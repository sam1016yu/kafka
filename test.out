
> Configure project :
Building project 'core' with Scala version 2.12.8
Building project 'streams-scala' with Scala version 2.12.8

> Task :generator:compileJava UP-TO-DATE
> Task :generator:processResources NO-SOURCE
> Task :generator:classes UP-TO-DATE
> Task :clients:processMessages UP-TO-DATE
> Task :clients:compileJava UP-TO-DATE
> Task :clients:processResources UP-TO-DATE
> Task :clients:classes UP-TO-DATE
> Task :clients:checkstyleMain UP-TO-DATE
> Task :clients:compileTestJava UP-TO-DATE
> Task :clients:processTestResources UP-TO-DATE
> Task :clients:testClasses UP-TO-DATE
> Task :clients:checkstyleTest UP-TO-DATE
> Task :clients:spotbugsMain UP-TO-DATE

> Configure project :kafka
Building project 'core' with Scala version 2.11.12
Building project 'streams-scala' with Scala version 2.11.12

> Task :testScala_2_11
> Task :testScala_2_12

> Configure project :kafka
Building project 'core' with Scala version 2.12.8
Building project 'streams-scala' with Scala version 2.12.8

> Task :testScala_2_13

> Configure project :kafka
Building project 'core' with Scala version 2.13.0
Building project 'streams-scala' with Scala version 2.13.0

> Task :clients:test

org.apache.kafka.clients.admin.ConfigTest > shouldGetAllEntries PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementHashCodeProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementToStringProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldReturnNullOnGetUnknownEntry PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementEqualsProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldGetEntry PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testResetSession PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testResetTimeouts PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testShouldHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testTimeToNextHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testSessionTimeoutExpired PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testShouldNotHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testPollTimeout PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldInitTransactions PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeFlushedWithAutoCompleteIfBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotBeFlushedAfterFlush PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testStaticMemberAssignmentPersistentAfterMemberIdChanges PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoDynamicConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowSendOffsetsToTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testStaticMemberAssignmentPersistent PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testMultipleConsumersMixedTopics PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.ClientUtilsTest > testFilterPreferredAddresses PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishLatestAndCumulativeConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnNullConsumerGroupIdWhenSendOffsetsToTransaction PASSED

org.apache.kafka.clients.ClientUtilsTest > testResolveUnknownHostException PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldAddOffsetsWhenSendOffsetsToTransaction PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortForNonAutoCompleteIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldResetSentOffsetsFlagOnlyWhenBeginningNewTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnInitTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPreserveCommittedMessagesOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnInitTransactionIfProducerAlreadyInitializedForTransactions PASSED

org.apache.kafka.clients.producer.MockProducerTest > testManualCompletion PASSED

org.apache.kafka.clients.producer.MockProducerTest > testAutoCompleteMock PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnFlushProducerIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotBeFlushedWithNoAutoCompleteIfBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotCountAbortedTransaction PASSED

org.apache.kafka.clients.ClientUtilsTest > testOnlyBadHostname PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionIfProducerGotFenced PASSED

org.apache.kafka.clients.ClientUtilsTest > testInvalidConfig PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfProducerGotFenced PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeValueAfterFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenersInvokedIfAddedBeforeAndAfterFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeCompleteAfterAlreadyFailed PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedBeforeFutureFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenersInvokedIfAddedBeforeAndAfterCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeCompleteAfterAlreadyComplete PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedBeforeFutureCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testComposeFailureCase PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeExceptionAfterSuccess PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testComposeSuccessCase PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testBasicCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testRuntimeExceptionInComplete PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeRaiseAfterAlreadyFailed PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testBasicFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedAfterFutureCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeRaiseAfterAlreadyCompleted PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedAfterFutureFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testVoidFuture PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testCompressedIterationWithNullValue PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testCompressedIterationWithEmptyRecords PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testIsValidWithChecksumMismatch PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testIsValidWithTooSmallBuffer PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnAssignorNotFound PASSED
org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps failed, log available in /mydata/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps.test.stdout

org.apache.kafka.clients.ClientUtilsTest > testResolveDnsLookupAllIps FAILED
    java.lang.AssertionError: expected:<2> but was:<1>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps(ClientUtilsTest.java:110)

org.apache.kafka.clients.ClientUtilsTest > testResolveDnsLookup PASSED

org.apache.kafka.clients.ClientUtilsTest > testParseAndValidateAddresses PASSED

org.apache.kafka.clients.ClientUtilsTest > testParseAndValidateAddressesWithReverseLookup PASSED

org.apache.kafka.clients.ClientUtilsTest > testNoPort PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderKey PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerde PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteNextThrowsIfNoInflights PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteLastSentThrowsIfNoInFlights PASSED

org.apache.kafka.clients.consumer.ConsumerRecordTest > testNullChecksumInConstructor PASSED

org.apache.kafka.clients.consumer.ConsumerRecordTest > testOldConstructor PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testMultipleConsumersMixedTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest > testConversionOfCommitMarker PASSED

org.apache.kafka.common.record.CompressionTypeTest > testLZ4FramingMagicV0 PASSED

org.apache.kafka.common.record.CompressionTypeTest > testLZ4FramingMagicV1 PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerdeInvalidHeaderCountTooLow PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderValue PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidVarlong PASSED

org.apache.kafka.common.record.DefaultRecordTest > testNullHeaderKey PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidNumHeadersPartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidKeySizePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerdeInvalidHeaderCountTooHigh PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderKeyPartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderValuePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidValueSizePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testUnderflowReadingVarlong PASSED

org.apache.kafka.common.record.DefaultRecordTest > testUnderflowReadingTimestamp PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidValueSize PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidNumHeaders PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidKeySize PASSED

org.apache.kafka.common.record.DefaultRecordTest > testSerdeNoSequence PASSED

org.apache.kafka.common.record.DefaultRecordTest > testNullHeaderKeyPartial PASSED

org.apache.kafka.clients.producer.MockProducerTest > testPartitioner PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnFenceProducerIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowFenceProducerIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldCountCommittedTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPreserveCommittedConsumerGroupsOffsetsOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeFlushedIfNoBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishMessagesOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldFlushOnCommitForNonAutoCompleteIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeFutureSubscriptionVersion PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldDropMessagesOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionsIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeginTransactions PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldAbortEmptyTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldCommitEmptyTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldDropConsumerGroupOffsetsOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest > testError PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest > testToken PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeNullSubscriptionUserData PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeMetadata PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldForbidConditionalClear PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldMaintainOrderWhenAdding PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldForbidConditionalRemove PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldForbidRemove PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeNullAssignmentUserData PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeNewSubscriptionWithOldVersion PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeAssignment PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testFrequencyCenterValueAboveMax PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeMetadataAndGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeFutureAssignmentVersion PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeOldSubscriptionVersion PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testNotEnoughBytes PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testSerde PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testIllegalNegativeVersion PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testCannotDeserializeUnknownControlType PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testUnknownControlTypeNotAllowed PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testDeserializeNewerVersion PASSED

org.apache.kafka.common.record.MultiRecordsSendTest > testSendsFreedAfterWriting PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testFrequencyCenterValueBelowMin PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testUseWithMetrics PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testMoreFrequencyParametersThanBuckets PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testBooleanFrequencies PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWildcardIfExactMatch PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentName PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWhereResourceTypeIsAny PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWhereResourceNameIsAny PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentResourceType PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchWildcardAgainstOtherName PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchIfExactMatch PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentNameCase PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchLiteralWildcardTheWayAround PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testCode PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testName PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testExhaustive PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testIsUnknown PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testSerializationRoundtrip PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testInvalidNegativeOffset PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testDeserializationCompatibilityBeforeLeaderEpoch PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testDeserializationCompatibilityWithLeaderEpoch PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testEqualsWithoutGroupInstanceId PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testEqualsWithGroupInstanceId PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testNonEqual PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testSimpleMock PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testConsumerRecordsIsEmptyWhenReturningNoRecords PASSED

org.apache.kafka.common.metrics.MetricsTest > testSimpleRate PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testSimpleMockDeprecated PASSED

org.apache.kafka.clients.consumer.ConsumerRecordsTest > iterator PASSED

org.apache.kafka.common.metrics.MetricsTest > testSimpleStats PASSED

org.apache.kafka.common.metrics.MetricsTest > testOldDataHasNoEffect PASSED

org.apache.kafka.common.metrics.MetricsTest > testQuotasEquality PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveInactiveMetrics PASSED

org.apache.kafka.common.record.ControlRecordTypeTest > testParseUnknownType PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveChildSensor PASSED

org.apache.kafka.common.record.ControlRecordTypeTest > testParseUnknownVersion PASSED

org.apache.kafka.common.metrics.MetricsTest > testMetricName PASSED

org.apache.kafka.common.metrics.MetricsTest > testSampledStatReturnsInitialValueWhenNoValuesExist PASSED

org.apache.kafka.common.security.auth.KafkaPrincipalTest > testEqualsAndHashCode PASSED

org.apache.kafka.common.metrics.MetricsTest > testDeprecatedMetricValueMethod PASSED

org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest > testOnCommitChain PASSED

org.apache.kafka.common.metrics.MetricsTest > testRateWindowing PASSED

org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest > testOnConsumeChain PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldInstantiateFromListOfOldAndNewClassTypes PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRangeHigh PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnNonAssignor PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersion PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUsableVersionCalculationNoKnownVersions PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldAdaptOldAssignors PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > testOnAssignment PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldInstantiateNewAssignors PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowJitterMinValueIsReallyMinimum PASSED

org.apache.kafka.common.metrics.MetricsTest > testMetricInstances PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinPeriodSecondsMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshBufferSecondsMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowFactorMinValueIsReallyMinimum PASSED

org.apache.kafka.common.metrics.MetricsTest > testTimeWindowing PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testJmxRegistration PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMaxValuesAreValid PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowJitterMaxValueIsReallyMaximum PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > testAssign PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinPeriodSecondsMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshBufferSecondsMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.metrics.MetricsTest > testEventWindowing PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowFactorMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshDefaults PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testJmxRegistrationSanitization PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinValuesAreValid PASSED

org.apache.kafka.common.metrics.MetricsTest > testSampledStatReturnsNaNWhenNoValuesExist PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testVersionsToString PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUnsupportedVersionsToString PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRangeLow PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRange PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnListWithNonAssignorClassType PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUnknownApiVersionsToString PASSED

org.apache.kafka.common.TopicPartitionTest > testSerializationRoundtrip PASSED

org.apache.kafka.common.TopicPartitionTest > testTopiPartitionSerializationCompatibility PASSED

org.apache.kafka.clients.producer.ProducerRecordTest > testInvalidRecords PASSED

org.apache.kafka.clients.producer.ProducerRecordTest > testEqualsAndHashCode PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testSessionless PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testInvalidSplitRules PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testValidRules PASSED

org.apache.kafka.clients.CommonClientConfigsTest > testExponentialBackoffDefaults PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testSslPrincipalMapper PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testValidSplitRules PASSED

org.apache.kafka.clients.producer.internals.DefaultPartitionerTest > testKeyPartitionIsStable PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testIncrementals PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testInvalidRules PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testIncrementalPartitionRemoval PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testFindMissing PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testDoubleBuild PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithNullKeyBytes PASSED

org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest > unavailablePartitionsTest PASSED

org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest > testStickyPartitionCache PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithKeyBytes PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithUnavailablePartitions PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testCloseBeforeConfigureIsIdempotent PASSED

org.apache.kafka.clients.ApiVersionsTest > testMaxUsableProduceMagic PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testCannotValidateExtensionWhichWasNotGiven PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMergeSortManyMemberInfo PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingSomeGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingWithAllGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingWithoutGroupInstanceId PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testUnvalidatedExtensionsAreIgnored PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testValidatedExtensionsAreReturned PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testInvalidExtensionsAndErrorMessagesAreReturned PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > addsExtensions PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnAcknowledgementWithErrorChain PASSED

org.apache.kafka.common.utils.ShellTest > testEchoHello PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnAcknowledgementChain PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnSendChain PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > throwsErrorOnInvalidExtensionValue PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testStickiness PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateInt PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest > validScope PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest > invalidScope PASSED

org.apache.kafka.common.utils.ShellTest > testRunProgramWithErrorReturn PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testDeserializerToPropertyConfig PASSED

org.apache.kafka.common.utils.ShellTest > testHeadDevZero PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAddRemoveConsumerOneTopic PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateLong PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateByteBufferWithOffsetPosition PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testDeserializerToMapConfig PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateByteBuffer PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testAuthenticationFailure PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testMetadataReady PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testMetadataRefreshBackoff PASSED

org.apache.kafka.common.utils.ShellTest > testAttemptToRunNonExistentProgram PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentUpdatedForDeletedTopic PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=NONE] PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testCloseAfterConfigIsIdempotent PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidationAfterPositionChange PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUsableVersionLatestVersions PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetCreateTimeNotAllowedV0 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetNoTimestampTypeNotAllowed PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testLoginManagerReleasedIfConfigureThrowsException PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscribeUserAssignment PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithOffsetEpoch PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePartitionAndPattern PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testInvalidWrapperOffsetV1 PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignment PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > topicSubscription PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLogAppendTimeV1 PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testOffsetResetWhileAwaitingValidation PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionPause PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetPartitionLeaderEpochNotAllowedV0 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetPartitionLeaderEpochNotAllowedV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetCreateTimeV1 PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionReset PASSED

org.apache.kafka.common.replica.ReplicaSelectorTest > testSameRackSelector PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLastOffsetCompressed PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidationAfterOffsetReset PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testZStdCompressionTypeWithV0OrV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLogAppendTimeNotAllowedV0 PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscription PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithNoEpochClearsAwaitingValidation PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > patternSubscription PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignmentChangeOnTopicSubscription PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testIterateCompressedRecordWithWrapperOffsetZero PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribeTopicAndPattern PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > invalidPositionUpdate PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscribeUserSubscribe PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantChangePositionForNonAssignedPartition PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testCompleteValidationShouldClearAwaitingValidation PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testGetOrCreateListValue PASSED

org.apache.kafka.common.security.kerberos.KerberosRuleTest > testReplaceParameters PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantAssignPartitionForUnsubscribedTopics PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteNext PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=NONE] PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekValidatedShouldClearAwaitingValidation PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=NONE] PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteLastSent PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=NONE] PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testEmptyPathWithKey PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=NONE] PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testNullPath PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testEmptyPath PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testNullPathWithKey PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testGetOneKeyAtPath PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testGetAllKeysAtPath PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > verifyAssignmentId PASSED

org.apache.kafka.clients.InFlightRequestsTest > testClearAll PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=GZIP] PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionWithResetPolicy PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=GZIP] PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignmentChangeOnPatternSubscription PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWithMissingNonOptionalExtraDataAtTheEnd PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=GZIP] PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidation PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePatternAndTopic PASSED

org.apache.kafka.clients.InFlightRequestsTest > testTimedOutNodes PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testNulls PASSED

org.apache.kafka.common.message.MessageTest > testOffsetCommitDefaultGroupInstanceId PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testToString PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadStringSizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testNullableDefault PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithNoOffsetEpoch PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePatternAndPartition PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadIgnoringExtraDataAtTheEnd PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeStringSize PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWhenOptionalDataMissingAtTheEndIsTolerated PASSED

org.apache.kafka.common.record.SimpleMemoryRecordsTest > testToStringIfLz4ChecksumIsCorrupted PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testPatternSubscriptionNoInternalTopics PASSED

org.apache.kafka.common.security.scram.internals.ScramFormatterTest > rfc7677Example PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWhenOptionalDataMissingAtTheEndIsNotTolerated PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadArraySizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testDefault PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeBytesSize PASSED

org.apache.kafka.common.security.SaslExtensionsTest > testCannotAddValueToMapReferenceAndGetFromExtensions PASSED

org.apache.kafka.common.security.scram.internals.ScramFormatterTest > saslName PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testPreferredReadReplicaLease PASSED

org.apache.kafka.common.security.SaslExtensionsTest > testReturnedMapIsImmutable PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantAssignPartitionForUnmatchedPattern PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionWithoutResetPolicy PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testStructEquals PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadBytesSizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testSimple PASSED

org.apache.kafka.common.metrics.MetricsTest > testConcurrentReadUpdate PASSED

org.apache.kafka.common.utils.CollectionUtilsTest > testSubtractMapRemovesSecondMapsKeys PASSED

org.apache.kafka.common.utils.CollectionUtilsTest > testSubtractMapDoesntRemoveAnythingWhenEmptyMap PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveMetric PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeArraySize PASSED

org.apache.kafka.common.metrics.MetricsTest > testBadSensorHierarchy PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testTransientTopics PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveSensor PASSED

org.apache.kafka.clients.producer.RecordSendTest > testTimeout PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncate PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testNormalSubscription PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.common.record.FileRecordsTest > testIterationOverPartialAndTruncation PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileRecordsTest > testRead PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testUserAssignment PASSED

org.apache.kafka.clients.producer.RecordSendTest > testError PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.utils.MockTimeTest > testAutoTickMs PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testPatternSubscriptionIncludeInternalTopics PASSED

org.apache.kafka.common.requests.SyncGroupRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.utils.MockTimeTest > testAdvanceClock PASSED

org.apache.kafka.clients.producer.RecordSendTest > testBlocking PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest > testError PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest > testToken PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=0] PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testIsPreparingConnection PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=0] PASSED

org.apache.kafka.common.utils.MockTimeTest > testWaitObjectTimeout PASSED

org.apache.kafka.common.utils.LoggingSignalHandlerTest > testRegister PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testNodeWithNewHostname PASSED

org.apache.kafka.common.utils.MockTimeTest > testWaitObjectConditionSatisfied PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=0] PASSED

org.apache.kafka.common.utils.SystemTimeTest > testWaitObjectTimeout PASSED

org.apache.kafka.common.utils.SystemTimeTest > testWaitObjectConditionSatisfied PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=0] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=1] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=1] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileRecordsTest > testDownconversionAfterMessageFormatDowngrade PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=1] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[0 magic=0, firstOffset=0, compressionType=NONE] PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange failed, log available in /mydata/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testHostResolveChange FAILED
    java.lang.AssertionError: expected:<2> but was:<1>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange(ClusterConnectionStatesTest.java:284)

org.apache.kafka.clients.ClusterConnectionStatesTest > testAuthorizationFailed PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault failed, log available in /mydata/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleIPsWithDefault FAILED
    java.lang.AssertionError: expected:<2> but was:<1>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault(ClusterConnectionStatesTest.java:259)

org.apache.kafka.clients.ClusterConnectionStatesTest > testThrottled PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testExponentialReconnectBackoff PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testRemoveNode PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testSingleIPWithUseAll PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll failed, log available in /mydata/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleIPsWithUseAll FAILED
    java.lang.AssertionError: expected:<2> but was:<1>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:647)
        at org.junit.Assert.assertEquals(Assert.java:633)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll(ClusterConnectionStatesTest.java:269)

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleNodeConnectionStates PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testClusterConnectionStateChanges PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testMaxReconnectBackoff PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testSingleIPWithDefault PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=1] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=2] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=2] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[0 magic=0, firstOffset=0, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=2] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=2] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testHistogram PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testConstantBinScheme PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testLinearBinScheme PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testConstantBinSchemeWithPositiveRange PASSED

org.apache.kafka.common.metrics.MetricsTest > testConcurrentReadUpdateReport PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=NONE] PASSED

org.apache.kafka.common.PartitionInfoTest > testToString PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.metrics.MetricsTest > testPercentiles PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnMatchPatternType PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validClientFirstMessage PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnAnyPatternType PASSED

org.apache.kafka.common.acl.AclBindingTest > testUnknowns PASSED

org.apache.kafka.common.acl.AclBindingTest > testMatching PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnAnyResourceType PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testSingleLeaveConstructor PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testBuildEmptyMembers PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldNotThrowOnUnknownResourceType PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testMultiLeaveConstructor PASSED

org.apache.kafka.common.acl.AclBindingTest > testMatchesAtMostOne PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldNotThrowOnUnknownPatternType PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.metrics.MetricsTest > testDuplicateMetricName PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidClientFinalMessage PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.metrics.MetricsTest > testQuotas PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validServerFirstMessage PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testToString PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsWithTopLevelError PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=NONE] PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsNoTopLevelError PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=NONE] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidServerFinalMessage PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidClientFirstMessage PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.metrics.MetricsTest > testHierarchicalSensors PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validClientFinalMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidServerFirstMessage PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validServerFinalMessage PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=GZIP] PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testStressfulSituation PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.utils.MappedByteBuffersTest > testUnmap PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.MetadataTest > testMaybeRequestUpdate PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testPollHeartbeatAwakesHeartbeatThread PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldThrowIfUnknown PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithFencedInstanceIdException PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.requests.OffsetCommitRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripPrefixedV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripAnyV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldThrowOnV0IfPrefixed PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripLiteralV0 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripLiteralV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripAnyV0AsLiteral PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testOkResponse PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testEmptyResponse PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=ZSTD] PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testUnauthorizedTopic PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetIsValidAfterSeek PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testUnexpectedEmptyResponse PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.MetadataTest > testClusterCopy PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testRetriableError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.requests.ControlRequestTest > testUpdateMetadataRequestNormalization PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.MetadataTest > testMetadataTopicErrors PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToLatestOffset PASSED

org.apache.kafka.common.requests.ControlRequestTest > testLeaderAndIsrRequestNormalization PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsFencedLeaderEpoch PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupReceivedExternalCompletion PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testCoordinatorDiscoveryBackoff PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.requests.ControlRequestTest > testStopReplicaRequestNormalization PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestTimeout PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.MetadataTest > testInvalidTopicError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testLookupCoordinator PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testNullChecksum PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testConstructionWithRelativeOffset PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testConstructionWithMissingRelativeOffset PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.MetadataTest > testOutOfBandEpochUpdate PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.MetadataTest > testFailedUpdate PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testSyncGroupRequestWithFencedInstanceIdException PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.MetadataTest > testRequestUpdate PASSED

org.apache.kafka.clients.MetadataTest > testTopicAuthorizationError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTopicAuthorizationFailureInAddPartitions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithListenerNameOverride PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testMetadataFailurePropagated PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.metrics.SensorTest > testIdempotentAdd PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testProducerWithInvalidCredentials PASSED

org.apache.kafka.clients.MetadataTest > testClusterListenerGetsNotifiedOfUpdate PASSED

org.apache.kafka.clients.MetadataTest > testTimeToNextUpdate_RetryBackoff PASSED

org.apache.kafka.clients.MetadataTest > testMetadataUpdateAfterClose PASSED

org.apache.kafka.clients.MetadataTest > testRejectOldMetadata PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldFailAbortIfAddOffsetsFailsWithFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingOptionValue PASSED

org.apache.kafka.common.network.SelectorTest > testSendLargeRequest PASSED

org.apache.kafka.common.security.JaasContextTest > testSingleOption PASSED

org.apache.kafka.common.security.JaasContextTest > testNumericOptionWithoutQuotes PASSED

org.apache.kafka.common.security.JaasContextTest > testConfigNoOptions PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithWrongListenerName PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTrySend PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.security.JaasContextTest > testNumericOptionWithQuotes PASSED

org.apache.kafka.common.security.JaasContextTest > testQuotedOptionValue PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupSentExternalCompletion PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingLoginModule PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingSemicolon PASSED

org.apache.kafka.common.security.JaasContextTest > testInvalidControlFlag PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithMemberIdRequired PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testMultipleAbortMarkers PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsWithAValidPosition PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatRequestWithFencedInstanceIdException PASSED

org.apache.kafka.common.security.JaasContextTest > testMultipleOptions PASSED

org.apache.kafka.common.security.JaasContextTest > testMultipleLoginModules PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingControlFlag PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithListenerNameAndFallback PASSED

org.apache.kafka.common.security.JaasContextTest > testQuotedOptionName PASSED

org.apache.kafka.common.security.JaasContextTest > testControlFlag PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchUnknownTopicOrPartition PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.utils.SanitizerTest > testSanitize PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testResetOffsetsMetadataRefresh PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testClearBufferedDataForTopicPartitions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetErrors PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDropCommitOnBatchExpiry PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReturnAbortedTransactionsinUncommittedMode PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupSent PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleLeaveGroupResponseWithException PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[5 magic=1, firstOffset=0, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testConsumerPositionUpdatedWhenSkippingAbortedTransactions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testCompletedFetchRemoval PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsUnknownLeaderEpoch PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBatchFailureAfterProducerReset PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAllowDrainInAbortableErrorState PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.metrics.SensorTest > testExpiredSensor PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToFatalErrorWhenRetriedBatchIsExpired PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.metrics.SensorTest > testShouldRecord PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdatePositionWithLastRecordMissingFromBatch PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnDisconnectAfterSend PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdatePositionOnEmptyBatch PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetOutOfRange PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithInFlightPartitionAddAfterAbortableError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransactionAfterAbortableError PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testTransactionalProducerWithInvalidCredentials PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > closeShouldBeIdempotent PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransactionBeforeInitTransactions PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > multiSend PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDiscardedAfterPausedPartitionResumedAndSeekedToNewOffset PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransaction PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfCoordinatorLoadingErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPartitionNotAdded PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionOverridesRetryBackoffForConcurrentTransactions PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithAddedPartitionAfterAbortableError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsFromGetErrorResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerFencedException PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupReceivedExternalCompletion PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithInFlightPartitionAddAfterFatalError PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testInvalidTopicExceptionPropagatedFromMetadata PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > sendWithinBlackoutPeriodAfterAuthenticationFailure PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInFindCoordinator PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > wakeup PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTimeoutUnsentRequest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWithInFlightRequests PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testEmptyMeansAllTopicsV0 PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.metrics.SensorTest > testCheckQuotasInMultiThreads PASSED

org.apache.kafka.common.metrics.SensorTest > testRecordLevelEnum PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAllowAbortOnProduceFailure PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testEmptyMeansEmptyForVersionsAboveV0 PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testMetadataRequestVersion PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testMixedTransactionalData PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testMixedIdempotentData PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldNotBeFlaggedAsIdempotentWhenRecordsNotIdempotent PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCommitTransactionWithUnsentProduceRequest PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendNoProducerId PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToAbortableErrorOnBatchExpiry PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorTransactionStarted PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAdjustSequenceNumbersAfterFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInAddOffsetsToTxn PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPendingPartitionAfterAbortableError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupInOnJoinComplete PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToAbortableErrorOnMultipleBatchExpiry PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInInitProducerId PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testShouldThrottle PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testNullableMetadata PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortResendsAddPartitionErrorIfRetried PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testStructBuild PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testUseDefaultLeaderEpoch PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testConstructor PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPendingPartitionAfterFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV6AndBelowCannotUseZStdCompression PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBatchCompletedAfterProducerReset PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldBeFlaggedAsTransactionalWhenTransactionalRecords PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldNotBeFlaggedAsTransactionalWhenNoRecords PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotHaveNoRecordBatches PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testBuildWithCurrentMessageFormat PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testBuildWithOldMessageFormat PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveShouldContainOnlyOneRecordBatch PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRaiseErrorWhenNoPartitionsPendingOnDrain PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotUseMagicV0 PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotUseMagicV1 PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldBeFlaggedAsIdempotentWhenIdempotentRecords PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testInvalidSessionTimeout[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupSent PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendAfterFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testGroupMaxSizeExceptionIsFatal PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnDisconnectBeforeSend PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testFetchCommittedOffsets[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.message.MessageTest > testResponseSchemas PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testExcludeInternalTopicsConfigOption[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotSendAbortTxnRequestWhenOnlyAddPartitionsRequestFailed PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnect[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.message.MessageTest > testJoinGroupRequestVersions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.message.MessageTest > testJoinGroupResponseVersions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[15 magic=0, firstOffset=57, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testConsumerWithInvalidCredentials PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.clients.NetworkClientTest > testDefaultRequestTimeout PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitAfterLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupDescribeUnauthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.MetadataTest > testRequestVersion PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.NetworkClientTest > testUnsupportedVersionDuringInternalMetadataRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > tooEarlyExpirationTime PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.MetadataTest > testTimeToNextUpdate PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > missingRequiredScope PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > validToken PASSED

org.apache.kafka.clients.MetadataTest > testNoEpoch PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > badOrMissingPrincipal PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > includesRequiredScope PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupSentExternalCompletion PASSED

org.apache.kafka.common.message.MessageTest > testAddPartitionsToTxnVersions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.MetadataTest > testNodeIfOffline PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testDisconnectDuringUserMetadataRequest PASSED

org.apache.kafka.clients.NetworkClientTest > testClose PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayDisconnectedWithNoExponentialBackoff PASSED

org.apache.kafka.clients.NetworkClientTest > testLeastLoadedNode PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayConnected PASSED

org.apache.kafka.clients.NetworkClientTest > testRequestTimeout PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayConnectedWithNoExponentialBackoff PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponseWithNoBrokerDiscovery PASSED

org.apache.kafka.clients.NetworkClientTest > testThrottlingNotEnabledForConnectionToOlderBroker PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponseWithStaticNodes PASSED

org.apache.kafka.clients.NetworkClientTest > testLeastLoadedNodeConsidersThrottledConnections PASSED

org.apache.kafka.clients.NetworkClientTest > testClientDisconnectAfterInternalApiVersionRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.utils.UtilsTest > testAbs PASSED

org.apache.kafka.common.utils.UtilsTest > testMin PASSED

org.apache.kafka.common.message.MessageTest > testMessageVersions PASSED

org.apache.kafka.clients.NetworkClientTest > testCallDisconnect PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.utils.UtilsTest > toArray PASSED

org.apache.kafka.common.utils.UtilsTest > utf8ByteBufferSerde PASSED

org.apache.kafka.common.utils.UtilsTest > testJoin PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.message.MessageTest > testDefaultValues PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testDnsLookupFailure PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelay PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionThrottling PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testServerDisconnectAfterInternalApiVersionRequest PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayWithNoExponentialBackoff PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.message.MessageTest > testRequestSchemas PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testSendToUnreadyNode PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayDisconnected PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.NetworkClientTest > testDisconnectWithMultipleInFlights PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupReceived PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithGroupInstanceIdNotFound PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testGracefulClose PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest > testWithZeroTokens PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleNormalLeaveGroupResponse PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest > testWithPotentiallyMultipleTokens PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.internals.TopicTest > shouldThrowOnInvalidTopicNames PASSED

org.apache.kafka.common.internals.TopicTest > shouldAcceptValidTopicNames PASSED

org.apache.kafka.common.internals.TopicTest > testTopicHasCollision PASSED

org.apache.kafka.common.internals.TopicTest > testTopicHasCollisionChars PASSED

org.apache.kafka.common.internals.TopicTest > shouldRecognizeInvalidCharactersInTopicNames PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[20 magic=1, firstOffset=57, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testIncrementalAlterConfigs PASSED

org.apache.kafka.common.protocol.ErrorsTest > testExceptionName PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMetricConfigRecordingLevel PASSED

org.apache.kafka.common.protocol.ErrorsTest > testForExceptionDefault PASSED

org.apache.kafka.common.protocol.ErrorsTest > testUniqueExceptions PASSED

org.apache.kafka.common.protocol.ErrorsTest > testForExceptionInheritance PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.protocol.ErrorsTest > testNoneException PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.protocol.ErrorsTest > testUniqueErrorCodes PASSED

org.apache.kafka.common.protocol.ErrorsTest > testExceptionsAreNotGeneric PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testLeaveGroupSentWithGroupInstanceIdUnSet PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleMultipleMembersLeaveGroupResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldBeUnknownIfResourceTypeUnknown PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnInterruption PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testRegexSubscription PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchPrefixedIfExactMatch PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithEmptySubscription PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentName PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWhereResourceTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWherePatternTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWhereResourceNameIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWherePatternTypeIsMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfExactMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentResourceType PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopics PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testAdminClientWithInvalidCredentials PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > validOptionsWithExplicitOptionValues PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > throwsErrorOnInvalidExtensionName PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > minimalToken PASSED

org.apache.kafka.common.utils.AbstractIteratorTest > testEmptyIterator PASSED

org.apache.kafka.common.utils.AbstractIteratorTest > testIterator PASSED

org.apache.kafka.common.utils.JavaTest > testLoadKerberosLoginModule PASSED

org.apache.kafka.common.utils.JavaTest > testIsIBMJdk PASSED

org.apache.kafka.common.utils.JavaTest > testJavaVersion PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testUncaughtExceptionInHeartbeatThread PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionWithEmptyPartitionAssignment PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardAgainstOtherName PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldBeUnknownIfPatternTypeUnknown PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentPatternType PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralIfNamePrefixed PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentNameCase PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardTheWayAround PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralWildcardIfExactMatch PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testToString PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsWithTopLevelError PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleLeaveGroupResponseWithEmptyMemberResponse PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testTimeoutAndRetryJoinGroupIfNeeded PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsNoTopLevelError PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsFromGetErrorResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testToString[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testAuthenticationErrorInEnsureCoordinatorReady PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestMaxTimeout PASSED

org.apache.kafka.common.protocol.types.StructTest > testEquals PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testUnexpectedRequestType PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testOversizeRequest PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteRecords PASSED

org.apache.kafka.common.message.MessageTest > testLeaveGroupResponseVersions PASSED

org.apache.kafka.common.message.MessageTest > testMetadataVersions PASSED

org.apache.kafka.common.metrics.stats.MeterTest > testMeter PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseTimeout PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testCode PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testName PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testExhaustive PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testIsUnknown PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfResourceNameIsNull PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfPatternTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfResourceTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfPatternTypeIsMatch PASSED

org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest > testFutureGetWithSeconds PASSED

org.apache.kafka.common.message.MessageTest > testSyncGroupDefaultGroupInstanceId PASSED

org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest > testFutureGetWithMilliSeconds PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testSetAttribute PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testSetAttributes PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttribute PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributeUnknown PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testInvoke PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupReceived PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributesWithUnknown PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributes PASSED

org.apache.kafka.common.config.AbstractConfigTest > testOriginalsWithPrefix PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOperationsBySubscribingConsumerWithDefaultGroupId PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleSingleLeaveGroupRequest PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfigProvidersPropsAsParam PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > shouldIgnoreGroupInstanceIdForEmptyGroupId PASSED

org.apache.kafka.common.message.MessageTest > testHeartbeatVersions PASSED

org.apache.kafka.common.protocol.ProtoUtilsTest > testDelayedAllocationSchemaDetection PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithEmptyUserAssignment PASSED

org.apache.kafka.common.message.MessageTest > testAddOffsetsToTxnVersions PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfiguredInstances PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithDuplicateConfigProvider PASSED

org.apache.kafka.common.acl.AclOperationTest > testCode PASSED

org.apache.kafka.common.acl.AclOperationTest > testName PASSED

org.apache.kafka.common.acl.AclOperationTest > testExhaustive PASSED

org.apache.kafka.common.acl.AclOperationTest > testIsUnknown PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testConstructorClose PASSED

org.apache.kafka.common.config.AbstractConfigTest > testOriginalsWithConfigProvidersProps PASSED

org.apache.kafka.common.message.MessageTest > testDescribeAclsRequest PASSED

org.apache.kafka.common.config.AbstractConfigTest > testEmptyList PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithSecondaryPrefix PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfigProviderConfigurationWithConfigParams PASSED

org.apache.kafka.common.config.AbstractConfigTest > testImmutableOriginalsWithConfigProvidersProps PASSED

org.apache.kafka.common.message.MessageTest > testLeaderAndIsrVersions PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMultipleConfigProviders PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithPrefixOverride PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnNullTopicInPartition PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMissingConfigKey PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testConnectionFailureOnMetadataUpdate PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPause PASSED

org.apache.kafka.common.message.MessageTest > testCreateTopicsVersions PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithInvalidConfigProviderClass PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithPrefixAllOrNothing PASSED

org.apache.kafka.common.message.MessageTest > testNonIgnorableFieldWithDefaultNull PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMissingConfigProvider PASSED

org.apache.kafka.common.config.AbstractConfigTest > testUnused PASSED

org.apache.kafka.common.config.AbstractConfigTest > testClassConfigs PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testInvalidTopicNames PASSED

org.apache.kafka.common.message.MessageTest > testOffsetFetchVersions PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testManualAssignmentChangeWithAutoCommitEnabled PASSED

org.apache.kafka.common.message.MessageTest > testOffsetForLeaderEpochVersions PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThreadSafeAssignedPartitionsMetric[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldThrowOnIfUnknown PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetLoadInProgress[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetOnly[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitRetryBackoff[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeAcls PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionChangesWithAutoCommitEnabled PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSelectRebalanceProtcol[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testChangingRegexSubscription PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithNoSubscription PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testFetchProgressWithMissingPartitionPosition PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testBeginningOffsetsAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyNoCoordinatorLookupForManualAssignmentWithSeek PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInvalidSocketSendBufferSize PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetsForTimesAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommitsFetchedDuringAssign PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryCommitTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMultipleAddPartitionsPerForOneProduce PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testGroupAuthorizationFailureInFindCoordinator PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendIdempotentProducerFatalError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendAfterAbortableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionAbortableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotAddPartitionsToTransactionWhenTopicAuthorizationFailed PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDefaultSequenceNumber PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDisallowCommitOnProduceFailure PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnNotCoordinatorError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransactionAfterFatalError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfUnknownTopicPartitionErrorOnTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCancelUnsentAddPartitionsAndProduceOnAbort PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransactionBeforeBeginTransaction PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsHandleNotControllerException PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > resendFailedProduceRequestAfterAbortableError PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testPrettyPrintException PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedForMessageFormatInTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlreadyAdded PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeMultipleConsumerGroups PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroupsWithAuthorizedOperationsOmitted PASSED

org.apache.kafka.common.network.SelectorTest > testLargeMessageSequence PASSED

org.apache.kafka.common.network.SelectorTest > testLowestPriorityChannel PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > blankPrincipalName PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > validCompactSerialization PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > missingPrincipal PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > validClaims PASSED

org.apache.kafka.common.record.FileRecordsTest > testAppendProtectsFromOverflow PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownWithCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMaybeLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateNotCalledIfSizeIsBiggerThanTargetSize PASSED

org.apache.kafka.common.record.FileRecordsTest > testOutOfRangeSlice PASSED

org.apache.kafka.common.record.FileRecordsTest > testFileSize PASSED

org.apache.kafka.common.record.FileRecordsTest > testIteratorWithLimits PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateNotCalledIfSizeIsSameAsTargetSize PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testEnlargement PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateTrue PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testNullForbidden PASSED

org.apache.kafka.common.record.FileRecordsTest > testOpenOversizeFile PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateIfSizeIsDifferentToTargetSize PASSED

org.apache.kafka.common.record.FileRecordsTest > testFormatConversionWithPartialMessage PASSED

org.apache.kafka.common.record.FileRecordsTest > testIterationDoesntChangePosition PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testInsertDelete PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateFalse PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateClearShutdown PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testTraversal PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testManyInsertsAndDeletes PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Login2Abort2Login3Commit3Logout3 PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > commitDoesNotThrowOnUnsupportedExtensionsCallback PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Logout1Login2Commit2Logout2 PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Login2Commit2Logout1Login3Commit3Logout2 PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > loginAbortLoginCommitLogout PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testSet PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testClear PASSED

org.apache.kafka.common.record.FileRecordsTest > testConversion PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testRemove PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testMoveToEnd PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testUpdateAndMoveToEnd PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testPartitionValues PASSED

org.apache.kafka.common.record.FileRecordsTest > testSearchForTimestamp PASSED

org.apache.kafka.common.record.FileRecordsTest > testSearch PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testDeepToString PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testMultibyteUtf8Lengths PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchExpirationAfterReenqueue PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testSimpleUtf8Lengths PASSED

org.apache.kafka.common.utils.SanitizerTest > testJmxSanitize PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > emptyTokens PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldThrowIfUnknown PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.common.network.ChannelBuildersTest > testCreateConfigurableKafkaPrincipalBuilder PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.KafkaFutureTest > testCompletingFutures PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testChecksumNullForMagicV2 PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchExpiration PASSED

org.apache.kafka.common.KafkaFutureTest > testThenApply PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > shouldAttemptToRejoinGroupAfterSyncGroupFailed PASSED

org.apache.kafka.common.KafkaFutureTest > testCompleteFutures PASSED

org.apache.kafka.common.KafkaFutureTest > testAllOfFuturesHandlesZeroFutures PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOsDefaultSocketBufferSizes PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > blockWhenPollConditionNotSatisfied PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > send PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testAuthenticationExceptionPropagatedFromMetadata PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > sendExpiry PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > blockOnlyForRetryBackoffIfNoInflightRequests PASSED

org.apache.kafka.common.KafkaFutureTest > testFutureTimeoutWithZeroWait PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testAwaitForMetadataUpdateWithTimeout PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchAbort PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testResetToCommittedOffset PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testAppendedChecksumMagicV0AndV1 PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchCannotCompleteTwice PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWakesUpPoll PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTopicAuthorizationExceptionPropagatedFromMetadata PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryAbortTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendIdempotentProducer PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendNoOngoingTransaction PASSED

org.apache.kafka.common.network.ChannelBuildersTest > testCreateOldPrincipalBuilder PASSED

org.apache.kafka.common.ClusterTest > testBootstrap PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseNoWait PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testEndOffsetsAuthenticationFailure PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyOrFailWithPartialFileChannelReads PASSED

org.apache.kafka.common.utils.UtilsTest > toArrayDirectByteBuffer PASSED

org.apache.kafka.common.utils.UtilsTest > testReadBytes PASSED

org.apache.kafka.common.utils.UtilsTest > testGetHost PASSED

org.apache.kafka.common.utils.UtilsTest > testGetPort PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyWithPartialFileChannelReads PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testFutureCompletionOutsidePoll PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > doNotBlockIfPollConditionIsSatisfied PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWithUnsentRequests PASSED

org.apache.kafka.common.KafkaFutureTest > testAllOfFutures PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testTimeoutWithoutMetadata PASSED

org.apache.kafka.common.utils.UtilsTest > testRecursiveDelete PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyOrFailWithRealFile PASSED

org.apache.kafka.common.utils.UtilsTest > writeToBuffer PASSED

org.apache.kafka.common.utils.UtilsTest > testConvertTo32BitField PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyIfEofIsReached PASSED

org.apache.kafka.common.utils.UtilsTest > testHostPattern PASSED

org.apache.kafka.common.utils.UtilsTest > testFormatBytes PASSED

org.apache.kafka.common.utils.UtilsTest > testMurmur2 PASSED

org.apache.kafka.common.utils.UtilsTest > utf8ByteArraySerde PASSED

org.apache.kafka.common.utils.UtilsTest > testCloseAll PASSED

org.apache.kafka.common.utils.UtilsTest > testFormatAddress PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetNoTimestampTypeNotAllowed PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooLittleCompressedV2 PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupsMetadataFailure PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooLittleNonCompressedV2 PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testHeartbeatThreadClose[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testStreamingIteratorConsistency PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetLogAppendTime PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataChangeTriggersRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseInterrupt PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldRecognizeInvalidCharactersInGroupInstanceIds PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnNullTopicPartition PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testSplitPreservesMagicAndCompressionType PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchCannotAbortTwice PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testShouldNotAttemptAppendOnceRecordsBuilderIsClosedForAppends PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testBlockTimeout PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testLargeAvailableMemory PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingAddOffsetRequest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupLeader[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyPollTimesOutDuringMetadataUpdate PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSkipKeyValueIteratorCorrectness PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyDeprecatedPollDoesNotTimeOutDuringMetadataUpdate PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMetricsReporterAutoGeneratedClientId PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testWriteEmptyHeader PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetLastOffset PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatchWithSequenceWrapAround PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordSize PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetPartitionLeaderEpoch PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatch PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testManualAssignmentChangeWithAutoCommitDisabled PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetOfPausedPartitions PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testSplitPreservesHeaders PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testReadAndWriteControlBatch PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooManyNonCompressedV2 PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatchWithProducerId PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooManyCompressedV2 PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionChangesWithAutoCommitDisabled PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSizeInBytes PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidCrc PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testIncrementSequence PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSeekNegative PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnEmptyTopicInPartition PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMissingOffsetNoResetPolicy PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInvalidSocketReceiveBufferSize PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnInvalidTopic PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAutoCommitSentBeforePositionUpdate PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > closeShouldBeIdempotent PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > fetchResponseWithUnexpectedPartitionIsIgnored PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataAwaitAfterClose PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollThrowsInterruptExceptionIfInterrupted PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullPattern PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommitSyncAuthenticationFailure PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testTopicExpiry PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > missingFields PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > stringConversion PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldThrowOnIfUnknown PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > generateCredential PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > extraneousFields PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroups PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopics PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitBatchOffAccumulator PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testRetryBackoff PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testNextReadyCheckDelay PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchSingle PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > scramCredentialCache PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > invalidCredential PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeCluster PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConfigs PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > testRebalanceTimeoutDefaultsToSessionTimeoutV0 PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldAcceptValidGroupInstanceIds PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldThrowOnInvalidGroupInstanceIds PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateAcls PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCloseAdminClient PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testPropagatedMetadataFetchException PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreatePartitions PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAdminClientApisAuthenticationFailure PASSED

org.apache.kafka.common.utils.AppInfoParserTest > testUnregisterAppInfoUnregistersMetrics PASSED

org.apache.kafka.common.utils.AppInfoParserTest > testRegisterAppInfoRegistersMetrics PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.requests.RequestContextTest > testSerdeUnsupportedApiVersionRequest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberIdOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnexpectedErrorOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryAbortTransactionAfterCommitTimeout PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedInitTransactions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionSuccessfulCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerIdResetAfterLastInFlightBatchFails PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateMetadataDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPendingMemberShouldLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testStressfulSituation PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeNonCompressed PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorUnavailableNoCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGenerationOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroups PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.common.network.SelectorTest > testConnectDisconnectDuringInSinglePoll PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherConcurrency PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchedRecordsRaisesOnSerializationErrors PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionNoOpWithPositionSet PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testAssignmentChangeWithInFlightReset PASSED

org.apache.kafka.common.network.SelectorTest > testConnectException PASSED

org.apache.kafka.common.network.SelectorTest > registerFailure PASSED

org.apache.kafka.common.network.SelectorTest > testMute PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testQuotaMetrics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSeekWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchMaxPollRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPreferredReadReplicaOffsetError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testParseInvalidRecordBatch PASSED

org.apache.kafka.common.network.SelectorTest > testCantSendWithInProgress PASSED

org.apache.kafka.common.network.SelectorTest > testCloseConnectionInClosingState PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyHeartbeatSent PASSED

org.apache.kafka.common.network.SelectorTest > testCloseOldestConnectionWithOneStagedReceive PASSED

org.apache.kafka.common.network.SelectorTest > testOutboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.network.SelectorTest > testImmediatelyConnectedCleaned PASSED

org.apache.kafka.common.network.SelectorTest > testExistingConnectionId PASSED

org.apache.kafka.common.network.SelectorTest > testCantSendWithoutConnecting PASSED

org.apache.kafka.common.network.SelectorTest > testCloseOldestConnection PASSED

org.apache.kafka.common.network.SelectorTest > testServerDisconnect PASSED

org.apache.kafka.common.network.SelectorTest > testMetricsCleanupOnSelectorClose PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.network.SelectorTest > testIdleExpiryWithoutReadyKeys PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadata[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.network.SelectorTest > testCloseOldestConnectionWithMultipleStagedReceives PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherSessionEpochUpdate PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSeekBeforeException PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionDisconnect PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testConsumingViaIncrementalFetchRequests PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForPausedAndResumedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataOfflinePartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsPartialResponse PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataInvalidTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToDefaultOffset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSkippingAbortedTransactions PASSED

org.apache.kafka.common.network.SelectorTest > testInboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEpochSetInFetchRequest PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchError PASSED

org.apache.kafka.common.network.SelectorTest > testNoRouteToHost PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNonContinuousRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchRequestInternalError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedWithCompactedTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetSendsReadUncommitted PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNormal PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsTimeout PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedAbortMarkerWithNoData PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUnauthorizedTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsUnauthorized PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNotLeaderForPartition PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingInitProducerId PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForSomePausedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchPositionAfterException PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testPartitionerClose PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationFencing PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsIncludesLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationAwaitsNodeApiVersion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchFencedLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchedRecordsAfterSeek PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetOutOfRangeException PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsWithOnePartitionAtTheWrongOffset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBatchedListOffsetsMetadataErrors PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnPausedPartition PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetricConfigRecordingLevel PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testParseCorruptedRecord PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoWait[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testHeaders PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testDisconnectInJoin[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithExpirationSmallerThanConfiguredBuffers PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRetryCommitUnknownTopicOrPartition[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithMinPeriodIntrusion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimes PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testLeaderEpochInConsumerRecord PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDuringRebalance PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testInvalidDefaultRecordBatch PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithPreExpirationBufferIntrusion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetrics PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithValidation[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsWithOnePartitionError PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToEarliestOffset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testMissingLeaderEpochInRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsWithoutAValidPosition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testStaleOutOfRangeError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testChangeResetWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedWithCommittedAndAbortedTransactions PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testLoginExceptionCausesCorrectLogout PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testInFlightFetchOnPausedPartition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testResetOffsetsSkipsBlackedOutConnections PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataRefreshDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRebalanceInProgress[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseDynamicAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefresh PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithExpirationSmallerThanConfiguredBuffersAndOlderCreateTime PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testInvalidVarlong PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testVarlongSerde PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedInt PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testWriteUnsignedIntLEToArray PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testInvalidVarint PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testVarintSerde PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedIntLEFromArray PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedIntLEFromInputStream PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testWriteUnsignedIntLEToOutputStream PASSED

org.apache.kafka.common.network.SelectorTest > testNormalOperation PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroups PASSED

org.apache.kafka.common.network.SelectorTest > testMuteOnOOM PASSED

org.apache.kafka.common.network.SelectorTest > testConnectionRefused PASSED

org.apache.kafka.common.network.SelectorTest > testEmptyRequest PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testMetadataRetries PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteAcls PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testHandleTimeout SKIPPED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testClientConnectionClose[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest > testForConsumerRequiresVersion3 PASSED

org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest > testDefaultReplicaId PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testUniqueness PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testFromApiKey PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testInvalidFromApiKey PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryCommitTransactionAfterAbortTimeout PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithAddedPartitionAfterFatalError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSequenceNumberOverflow PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testElectLeaders PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfUnknownTopicPartitionErrorOnAddPartitions PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testGenerateClientId PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFlushPendingPartitionsOnCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedFindCoordinator PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNoDrainWhenPartitionsPending PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSenderShutdownWithPendingTransactions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotSendAbortTxnRequestWhenOnlyAddOffsetsRequestFailed PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorTransactionNotStarted PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionRetainsRetryBackoffForRegularRetriableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testResetProducerIdAfterWithoutPendingInflightRequests PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNoProducerIdResetAfterLastInFlightBatchSucceeds PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCommitTransactionWithInFlightProduceRequest PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorProduceRequestInRetry PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testGroupAuthorizationFailureInTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortableErrorWhileAbortInProgress PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBasicTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerIdReset PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortResendsProduceRequestIfRetried PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionSuccessfulAbort PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFindCoordinatorAllowedInAbortableErrorState PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testResetSequenceNumbersAfterUnknownProducerId PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInAddPartitions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDisconnectAndRetry PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionFatalError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testEndTxnNotSentIfIncompleteBatches PASSED

org.apache.kafka.common.network.SslSelectorTest > testBytesBufferedChannelAfterMute PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAwaitFlushComplete PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSoonToExpireBatchesArePickedUpForExpiry PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testFlush PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testFull PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalHeartbeat[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffset[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetsGroupNotAuthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignmentRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupFollower[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroupOffsets PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCalcTimeoutMsRemainingAsInt PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityOnMetricsException PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCantAllocateMoreMemoryThanWeHave PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyHeartbeatSentWhenFetchedDataReady PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataUpdateWaitTime PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testResetUsingAutoResetPolicy PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataWaitAbortedOnFatalException PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadata PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOperationsByAssigningConsumerWithDefaultGroupId PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testTimeToNextUpdateOverwriteBackoff PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnEmptyTopicPartition PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullTopic PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscription PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInterceptorConstructorClose PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnEmptyTopic PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testWakeupWithFetchDataAvailable PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUnreachableBootstrapServer PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testLeaveGroupTimeout PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPartitionsForAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullTopicCollection PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommittedAuthenticationFaiure PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > negotiatedProperty PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > savesCustomExtensionAsNegotiatedProperty PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > unrecognizedExtensionsAreNotSaved PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > illegalToken PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > throwsAuthenticationExceptionOnInvalidExtensions PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testReleaseForeignBuffer PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEarlierOffsetResetArrivesLate PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testRestOffsetsAuthorizationFailure PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherMetricsTemplates PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingFindCoordinator PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReturnCommittedTransactions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesTimeout PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedLagMetric PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationSkippedForOldBroker PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDisconnected PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsDisconnect PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchSkipsBlackedOutNodes PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationHandlesSeekWithInflightOffsetForLeaderRequest PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetSendsReadCommitted PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPartialFetchWithPausedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchAfterPartitionWithFetchedRecordsIsUnassigned PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataLeaderNotAvailable PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchRequestWhenRecordTooLarge PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchUnknownLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEmptyControlBatch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testIdempotentResetWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataUnknownTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPreferredReadReplica PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSubscriptionPositionUpdatedWithEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForAllPausedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsRequiringOffsetReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testTruncationDetected PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflightsWhereFirstFailsFatallyAndSequenceOfFutureBatchesIsAdjusted PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherIgnoresControlRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherMetrics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherLeadMetric PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnTooSmallRecords PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnInvalidMagic PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnTooLargeRecords PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorIgnoresIncompleteEntries PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCancelInFlightRequestAfterFatalError PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotentSplitBatchAndSend PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnknownProducerErrorShouldBeRetriedWhenLogStartOffsetIsUnknown PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testMetadataTopicExpiry PASSED

org.apache.kafka.common.security.authenticator.LoginManagerTest > testClientLoginManager PASSED

org.apache.kafka.common.security.authenticator.LoginManagerTest > testServerLoginManager PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldReturnUnknownForUnknownCode PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldGetTypeFromId PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldRoundTripEveryType PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetErrorWithInvalidGroupId PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionalRequestsSentOnShutdown PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetThrottleTimeMs PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetErrorWithExistingGroupIds PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testMessageFormatDownConversion PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnknownProducerHandlingWhenRetentionLimitReached PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfAllSentBatchesShouldCauseUnresolvedSequences PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOutdatedCoordinatorAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupDuringJoin[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupFollower[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupReadUnauthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIncludeInternalTopicsConfigOption[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceInProgressOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberId[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateClaimForExistenceAndType PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateExpirationTimeAndIssuedAtConsistency PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateScope PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateIssuedAt PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateExpirationTime PASSED

org.apache.kafka.common.utils.TimerTest > testTimerUpdateAndReset PASSED

org.apache.kafka.common.utils.TimerTest > testTimerUpdate PASSED

org.apache.kafka.common.utils.TimerTest > testTimerSleep PASSED

org.apache.kafka.common.utils.TimerTest > testTimerResetUsesCurrentTime PASSED

org.apache.kafka.common.utils.TimerTest > testTimeoutOverflow PASSED

org.apache.kafka.common.utils.TimerTest > testNonMonotonicUpdate PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testShouldThrottle PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testEqualityWithStruct PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testConstructorWithStruct PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testEqualityWithMemberResponses PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testConstructorWithMemberResponses PASSED

org.apache.kafka.common.network.SslSelectorTest > testBytesBufferedChannelWithNoIncomingBytes PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testHeadersWithExtendedClasses PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseWhenWaitingForMetadataUpdate PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseWithTimeUnit PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[0] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[0] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[0] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[1] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[1] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[1] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[5] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[5] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[5] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[6] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[6] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[6] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[7] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[7] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[7] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[9] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[9] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[9] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[11] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[11] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownConsumerId[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[11] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[14] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[14] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[14] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadataTooLarge[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupFromAssignmentCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncDisconnected[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[15] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[15] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[15] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testLeaveGroupOnClose[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataWithPartitionOutOfRange PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[16] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[16] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[16] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testTopicRefreshInMetadata PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testNoSerializerProvided PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitFrequency PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[17] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[17] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[17] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAbortUnsentBatches PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchSingleMaxValue PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[18] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[18] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[18] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testStickyBatches PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[21] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[21] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[21] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[25] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[25] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[25] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[27] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[27] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[27] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[28] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[28] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[28] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[29] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[29] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[29] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[30] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[30] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[30] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[31] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[31] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[31] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInitTransactionTimeout PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[32] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[32] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRejoinGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInvalidSocketSendBufferSize PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[32] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[33] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[33] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[33] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[34] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[34] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[34] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[35] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[35] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[35] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[36] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[36] PASSED

org.apache.kafka.common.network.SslSelectorTest > testRenegotiationFails PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[36] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[37] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[37] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[37] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testClientConnectionClose[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[38] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[38] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[38] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[39] PASSED

org.apache.kafka.common.config.ConfigDefTest > testBasicTypes PASSED

org.apache.kafka.common.config.ConfigDefTest > testNullDefault PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[39] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[39] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[41] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[41] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[41] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[42] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[42] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[42] PASSED

org.apache.kafka.common.config.ConfigDefTest > testParseForValidate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[43] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[43] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[43] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[44] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[44] PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefaultRange PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[44] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[45] PASSED

org.apache.kafka.common.config.ConfigDefTest > testNames PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[45] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[45] PASSED

org.apache.kafka.common.config.ConfigDefTest > testGroupInference PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[47] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[47] PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringNestedClass PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[47] PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringInt PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[51] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[51] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[51] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[52] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[52] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[52] PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidators PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidateCannotParse PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidate PASSED

org.apache.kafka.common.config.ConfigDefTest > testInternalConfigDoesntShowUpInDocs PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefaultString PASSED

org.apache.kafka.common.config.ConfigDefTest > testSslPasswords PASSED

org.apache.kafka.common.config.ConfigDefTest > testDynamicUpdateModeInDocs PASSED

org.apache.kafka.common.config.ConfigDefTest > testBaseConfigDefDependents PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringClass PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringShort PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefault PASSED

org.apache.kafka.common.config.ConfigDefTest > toRst PASSED

org.apache.kafka.common.config.ConfigDefTest > testCanAddInternalConfig PASSED

org.apache.kafka.common.config.ConfigDefTest > testMissingRequired PASSED

org.apache.kafka.common.config.ConfigDefTest > testParsingEmptyDefaultValueForStringFieldShouldSucceed PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringPassword PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringList PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringLong PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringBoolean PASSED

org.apache.kafka.common.config.ConfigDefTest > testNullDefaultWithValidator PASSED

org.apache.kafka.common.config.ConfigDefTest > testMissingDependentConfigs PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringDouble PASSED

org.apache.kafka.common.config.ConfigDefTest > toEnrichedRst PASSED

org.apache.kafka.common.config.ConfigDefTest > testDefinedTwice PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringString PASSED

org.apache.kafka.common.config.ConfigDefTest > testNestedClass PASSED

org.apache.kafka.common.config.ConfigDefTest > testBadInputs PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidateMissingConfigKey PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testRequestHeader PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testSerdeControlledShutdownV0 PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testRequestHeaderWithNullClientId PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[53] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[53] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[53] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[54] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[54] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[54] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[56] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[56] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[56] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[57] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[57] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[57] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[58] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[58] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[58] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[59] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[59] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[59] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testDoNotPollWhenNoRequestSent PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupLeader[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfFirstBatchShouldCauseResetIfFutureBatchesFail PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAfterCoordinatorBackToService[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testNoDoubleDeallocation PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testJoinGroupInvalidGroupId[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[60] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[60] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[60] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[61] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[61] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[61] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[62] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[62] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[62] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[63] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[63] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[63] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[64] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[64] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[64] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[65] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[65] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[65] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[66] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[66] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[66] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[67] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[67] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[67] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[68] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[68] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[68] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[70] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[70] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[70] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testQuotaMetrics PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfUnsentBatchesShouldNotCauseUnresolvedSequences PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[71] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[71] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[71] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[72] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[72] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[72] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionalSplitBatchAndSend PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[73] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[73] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[73] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testClusterAuthorizationExceptionInProduceRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[74] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfDuplicateSequenceError PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[74] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[74] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testAppendInExpiryCallback PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testBatchesDrainedWithOldProducerIdShouldFailWithOutOfOrderSequenceOnSubsequentRetry PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchDoesNotSplitOnMessageTooLargeError PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflights PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[75] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[75] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[75] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCloseWithProducerIdReset PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testAbortRetryWhenProducerIdChanges PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > shouldCloseProperlyAndThrowIfInterrupted PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[76] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[76] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[76] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testTransactionalMethodThrowsWhenSenderClosed PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testOsDefaultSocketBufferSizes PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[77] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[77] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[77] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInterceptorConstructClose PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testBuffersGarbageCollected PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationBound PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testReleaseNull PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationZero PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testDoubleFree PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testNegativeMaxAllocation PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testPartitionsForWithNullTopic PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationOverMaxAllocation PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testMaxAllocationLargerThanSize PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testZeroMaxAllocation PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testZeroSize PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testNegativeSize PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationNegative PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testForIdWithInvalidIdLow PASSED

org.apache.kafka.common.protocol.ApiKeysTest > schemaVersionOutOfRange PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testForIdWithInvalidIdHigh PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testResponseThrottleTime PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[78] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[78] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[78] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testShouldRaiseOutOfOrderSequenceExceptionToUserIfLogWasNotTruncated PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSenderMetricsTemplates PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testInitProducerIdRequest PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testForceCloseWithProducerIdReset PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testResetWhenOutOfOrderSequenceReceived PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfOutOfOrderResponses PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCanRetryWithoutIdempotence PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testMustNotRetryOutOfOrderSequenceForNextBatch PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testRetries PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testInflightBatchesExpireOnDeliveryTimeout PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testResetOfProducerStateShouldAllowQueuedBatchesToDrain PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testDownConversionForMismatchedMagicValues PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testIdempotenceWithOldMagic PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[85] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[85] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[85] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeOldMessageFormatNonCompressed PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[94] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[94] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[94] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAbortIncompleteBatches PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeCompressed PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testMutedPartitions PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatches PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[95] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[95] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchesRetry PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[95] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeOldMessageFormatCompressed PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testLinger PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testPartialDrain PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitAndReenqueue PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[96] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[96] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[96] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInterceptorPartitionSetOnTooLargeRecord PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[98] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[98] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[98] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetricsReporterAutoGeneratedClientId PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[100] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[100] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSendInOrder PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testClusterAuthorizationExceptionInInitProducerIdRequest PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnsupportedVersionInProduceRequest PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testForceShutdownWithIncompleteTransaction PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfOutOfOrderResponsesWhenSecondSucceeds PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[100] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testResetNextBatchExpiry PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[105] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[105] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[105] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnsupportedForMessageFormatInProduceRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[110] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[110] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshConfigTest > fromGoodConfig PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[110] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[112] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[112] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[112] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[113] PASSED

org.apache.kafka.common.utils.Crc32Test > testValue PASSED

org.apache.kafka.common.utils.Crc32Test > testUpdate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[113] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[113] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[114] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[114] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[114] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataFetch PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIncompleteTransactionAbortOnShutdown PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[115] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[115] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[115] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSimple PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSequenceNumberIncrement PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[116] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[116] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[116] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchesInMultiplePartitions PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testOnlyCanExecuteCloseAfterInitTransactionsTimeout PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflightsRetriedInOrder PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[117] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[117] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[117] PASSED

org.apache.kafka.common.requests.RequestResponseTest > cannotUseFindCoordinatorV0ToFindTransactionCoordinator PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchDoesNotRetry PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorWithSerializers PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownNoCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[118] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[118] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[118] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAwaitsInterval[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testJoinGroupRequestVersion0RebalanceTimeout PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testInvalidSessionTimeout[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[119] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestIsolationLevel PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[119] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[119] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[120] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[120] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[120] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[122] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[122] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testFetchCommittedOffsets[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[122] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[129] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[129] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[129] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testToken PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[131] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testValidateNullExtensions PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[131] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[131] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testExcludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnect[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[134] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[134] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[134] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testNoExtensionsFromByteArray PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testAuthorizationId PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitAfterLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testRfc7688Example PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupDescribeUnauthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testThrowsSaslExceptionOnInvalidExtensionKey PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testNoExtensionsFromTokenAndNullExtensions PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testBuildClientResponseToBytes PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testExtensions PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testBuildServerResponseToBytes PASSED

org.apache.kafka.common.requests.RequestResponseTest > testCreateTopicRequestV3FailsIfNoPartitionsOrReplicas PASSED

org.apache.kafka.common.utils.Crc32CTest > testValue PASSED

org.apache.kafka.common.requests.RequestResponseTest > testOffsetFetchRequestBuilderToString PASSED

org.apache.kafka.common.requests.RequestResponseTest > testResponseHeader PASSED

org.apache.kafka.common.utils.Crc32CTest > testUpdate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[135] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[135] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[135] PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[136] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[136] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[136] PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldThrowOnV0IfPrefixed PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripLiteralV0 PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripAnyV0AsLiteral PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldThrowOnUnknownElements PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[138] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[138] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[138] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[141] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[141] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[141] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[142] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[142] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[142] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testHeaders PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInvalidSocketReceiveBufferSize PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorWithNotStringKey PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[143] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[143] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[143] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSerializerClose PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[144] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[144] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[144] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInitTransactionWhileThrottled PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[145] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[145] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[145] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[146] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[146] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[146] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataTimeoutWithPartitionOutOfRange PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[147] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[147] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[147] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataTimeoutWithMissingTopic PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorFailureCloseResource PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[148] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[148] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[148] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[149] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSendToInvalidTopic PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[149] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[149] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[150] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[150] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[150] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[154] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[154] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[154] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[155] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[155] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[155] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[156] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[156] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[156] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[157] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[157] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[157] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testSerialization PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[158] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[158] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[158] PASSED

org.apache.kafka.common.requests.RequestResponseTest > verifyFetchResponseFullWrites PASSED

org.apache.kafka.common.requests.RequestResponseTest > fetchResponseVersionTest PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchResponseV4 PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceResponseVersionTest PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestMaxBytesOldVersions PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceRequestToStringTest PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceResponseV5Test PASSED

org.apache.kafka.common.requests.RequestResponseTest > testCreateTopicRequestV0FailsIfValidateOnly PASSED

org.apache.kafka.common.requests.RequestResponseTest > testControlledShutdownResponse PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestWithMetadata PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceRequestGetErrorResponseTest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[160] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[160] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[160] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[174] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[174] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[174] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[175] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[175] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[175] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[176] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[176] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[176] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[182] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[182] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[182] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[183] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[183] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[183] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[192] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[192] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[192] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[195] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[195] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[195] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[196] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[196] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[196] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[197] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[197] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[197] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[198] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[198] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[198] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[202] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[202] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[202] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[207] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[207] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[207] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[214] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[214] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[214] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[216] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[216] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[216] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[217] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[217] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[217] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[218] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[218] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[218] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[221] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[221] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[221] PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnBlockTimeout PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testSimple PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testDelayedAllocation PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > outOfMemoryOnAllocation PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[223] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[223] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[223] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[226] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[226] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[226] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[227] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[227] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[227] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[228] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[228] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[228] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[229] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[229] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[229] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[230] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[230] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[230] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[231] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[231] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[231] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[232] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[232] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[232] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[233] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[233] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[233] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[234] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[234] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[234] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[235] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[235] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[235] PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testWrapsExtensionsCallbackHandlingErrorInSaslExceptionInFirstClientMessage PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testNoExtensionsDoesNotAttachAnythingToFirstClientMessage PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testAttachesExtensionsToFirstClientMessage PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[236] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[236] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[236] PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandByteBufferOnWrite PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testWriteDirectByteBuffer PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandDirectByteBufferOnWrite PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testWriteByteBuffer PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandByteBufferOnPositionIncrease PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[237] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[237] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[237] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[238] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[238] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[238] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[253] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[253] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[253] PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandDirectByteBufferOnPositionIncrease PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[255] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[255] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[255] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[256] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[256] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[256] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[257] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[257] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[257] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[274] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[274] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[274] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[278] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[278] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[278] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[295] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[295] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[295] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[296] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[296] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[296] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[297] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[297] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[297] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[298] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[298] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[298] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[300] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[300] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[300] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[301] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[301] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[301] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[302] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[302] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[302] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[303] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[303] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[303] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[304] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[304] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[304] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[306] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[306] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[306] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[307] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[307] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[307] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[310] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[310] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[310] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[311] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[311] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[311] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[312] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[312] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[312] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[314] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[314] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[314] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[315] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[315] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[315] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[316] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[316] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[316] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[318] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[318] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[318] PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentWithRandomSubscriptionsAndChanges PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testNewSubscription PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAddRemoveTopicTwoConsumers PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testMoveExistingAssignments PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithConflictingPreviousGenerations PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testConflictingPreviousAssignments PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[320] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[320] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[320] PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testMultipleConsumersMixedTopicSubscriptions PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[321] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[321] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[321] PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testSchemaBackwardCompatibility PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testPoorRoundRobinAssignmentScenario PASSED

org.apache.kafka.common.requests.HeartbeatRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentAfterOneConsumerLeaves PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testSameSubscriptions PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[356] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[356] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[356] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[357] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[357] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[357] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[358] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[358] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[358] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[359] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[359] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[359] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[369] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[369] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[369] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[374] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[374] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[374] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[375] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[375] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[375] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[376] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[376] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[376] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[378] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[378] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[378] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[379] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[379] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[379] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[380] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[380] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[380] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[381] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[381] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[381] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[382] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[382] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[382] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThreadSafeAssignedPartitionsMetric[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetLoadInProgress[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[383] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[383] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[383] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetOnly[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[384] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[384] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[384] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitRetryBackoff[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSelectRebalanceProtcol[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[385] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[385] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[385] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[387] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[387] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[387] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[390] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[390] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[390] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[392] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[392] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[392] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[396] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[396] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[396] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[397] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[397] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[397] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[398] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[398] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[398] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[415] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[415] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[415] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[416] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[416] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[416] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[418] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[418] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[418] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[455] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[455] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[455] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[456] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[456] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[456] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[457] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[457] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[457] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[459] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[459] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[459] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[462] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[462] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[462] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[466] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[466] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[466] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testKeyStoreTrustStoreValidation PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[467] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[467] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[467] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[473] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[473] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[473] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[474] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[474] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[474] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[475] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[475] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[475] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[476] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[476] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[476] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[477] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[477] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[477] PASSED

org.apache.kafka.common.network.SslSelectorTest > testDisconnectWithIntermediateBufferedBytes PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[479] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[479] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[479] PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testToLowerCase PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testParse PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testInvalidRules PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testNoReplacement PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariable PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceMultipleVariablesWithoutPathInValue PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariableWithTTL PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testNullConfigValue PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testSingleLevelOfIndirection PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceMultipleVariablesInValue PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariableNoPath PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > shouldThrowNpeWhenAddingNullHeader PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testAdd PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testNew PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testReadOnly PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testHeaders PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testLastHeader PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testRemove PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testAddRemoveInterleaved PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfiguration PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfigurationWithoutTruststore PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownWithCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMaybeLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithoutPasswordConfiguration PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfigurationWithoutKeystore PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testHeartbeatThreadClose[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataChangeTriggersRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupLeader[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testKeystoreVerifiableUsingTruststore PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectionWithCustomKeyManager PASSED

org.apache.kafka.common.network.SslSelectorTest > testSendLargeRequest PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testUntrustedKeyStoreValidationFails PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberIdOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnexpectedErrorOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateMetadataDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPendingMemberShouldLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorUnavailableNoCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGenerationOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testCertificateEntriesValidation PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithCustomKeyManagerConfiguration PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testClientMode PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadata[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoWait[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testDisconnectInJoin[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRetryCommitUnknownTopicOrPartition[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithValidation[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataRefreshDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRebalanceInProgress[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseDynamicAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryConfiguration PASSED

org.apache.kafka.common.utils.SecurityUtilsTest > testParseKafkaPrincipalWithNonUserPrincipalType PASSED

org.apache.kafka.common.utils.SecurityUtilsTest > testPrincipalNameCanContainSeparator PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldReturnAllKeysWhenMagicIsCurrentValueAndThrottleMsIsDefaultThrottle PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldCreateApiResponseThatHasAllApiKeysSupportedByBroker PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldHaveCorrectDefaultApiVersionsResponse PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldCreateApiResponseOnlyWithKeysSupportedByMagicValue PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalHeartbeat[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffset[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetsGroupNotAuthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignmentRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupFollower[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testLargeAssignmentWithMultipleConsumersLeaving PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentAfterOneConsumerAdded PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithMultipleGenerations1 PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithMultipleGenerations2 PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.common.record.BufferSupplierTest > testGrowableBuffer PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOutdatedCoordinatorAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupDuringJoin[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupFollower[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupReadUnauthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIncludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceInProgressOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseOldPrincipalBuilderForPlaintextIfProvided PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalBuilderScram PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalWithSslPrincipalMapper PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalIfSSLPeerIsNotAuthenticated PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalBuilderGssapi PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseSessionPeerPrincipalForSsl PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseOldPrincipalBuilderForSslIfProvided PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testReturnAnonymousPrincipalForPlaintext PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownConsumerId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadataTooLarge[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupFromAssignmentCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncDisconnected[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testLeaveGroupOnClose[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRejoinGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupLeader[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAfterCoordinatorBackToService[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testJoinGroupInvalidGroupId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownNoCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAwaitsInterval[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testListenerConfigOverride PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationCN PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMissingUsernameSaslPlain PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslScramMechanisms PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetworkThreadTimeRecorded PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslOauthBearerMechanism PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedValidProvided PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientEndpointNotValidated PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedCiphers PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerLoginOverride PASSED
org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion failed, log available in /mydata/kafka/clients/build/reports/testOutput/org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion.test.stdout

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedTLSVersion FAILED
    java.lang.AssertionError: expected:<AUTHENTICATION_FAILED> but was:<AUTHENTICATE>
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.failNotEquals(Assert.java:835)
        at org.junit.Assert.assertEquals(Assert.java:120)
        at org.junit.Assert.assertEquals(Assert.java:146)
        at org.apache.kafka.common.network.NetworkTestUtils.waitForChannelClose(NetworkTestUtils.java:111)
        at org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion(SslTransportLayerTest.java:536)

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testAuthenticateCallbackHandlerMechanisms PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMechanismPluggability PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testScramUsernameWithSpecialCharacters PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testApiVersionsRequestWithUnsupportedVersion PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMissingPasswordSaslPlain PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientAuthenticateCallbackHandler PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslOauthBearerMechanismWithoutServerTokens PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateWithDifferentPrincipal PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidLoginModule PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testTokenAuthenticationOverSaslScram PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientExceptionDoesNotContainSensitiveData PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeRead PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredNotProvided PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslScramSha256 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientLoginCallbackOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInsufficientScopeSaslOauthBearerMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testDisabledMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion0 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion1 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testPacketSizeTooBig PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerLoginCallbackOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidUsernameSaslPlain PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUserCredentialsUnavailableForScramMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion0 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion1 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMultipleServerMechanisms PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeWrite PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedNotProvided PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testRepeatedValidSaslPlainOverSsl PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslPlainOverPlaintext PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslPlainOverSsl PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeWrite PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidApiVersionsRequestSequence PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeystorePassword PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledNotProvided PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateAgainFasterThanOneSecond PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanDns PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationNoReverseLookup PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testDisallowedKafkaRequestsBeforeAuthentication PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientLoginOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientDynamicJaasConfiguration PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerAuthenticateCallbackHandler PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidPasswordSaslPlain PASSED

org.apache.kafka.common.network.SslSelectorTest > testLargeMessageSequence PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidPasswordSaslScram PASSED

org.apache.kafka.common.network.SslSelectorTest > testLowestPriorityChannel PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectDisconnectDuringInSinglePoll PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectException PASSED

org.apache.kafka.common.network.SslSelectorTest > registerFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerDynamicJaasConfiguration PASSED

org.apache.kafka.common.network.SslSelectorTest > testMute PASSED

org.apache.kafka.common.network.SslSelectorTest > testCantSendWithInProgress PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseConnectionInClosingState PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseOldestConnectionWithOneStagedReceive PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testTokenReauthenticationOverSaslScram PASSED

org.apache.kafka.common.network.SslSelectorTest > testOutboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidSaslPacket PASSED

org.apache.kafka.common.network.SslSelectorTest > testImmediatelyConnectedCleaned PASSED

org.apache.kafka.common.network.SslSelectorTest > testExistingConnectionId PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testSaslHandshakeRequestWithUnsupportedVersion PASSED

org.apache.kafka.common.network.SslSelectorTest > testCantSendWithoutConnecting PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseOldestConnection PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeWrite PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateWithDifferentMechanism PASSED

org.apache.kafka.common.network.SslSelectorTest > testServerDisconnect PASSED

org.apache.kafka.common.network.SslSelectorTest > testMetricsCleanupOnSelectorClose PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testJaasConfigurationForListener PASSED

org.apache.kafka.common.network.SslSelectorTest > testIdleExpiryWithoutReadyKeys PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseOldestConnectionWithMultipleStagedReceives PASSED

org.apache.kafka.common.network.SslSelectorTest > testInboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.network.SslSelectorTest > testNoRouteToHost PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnknownUserSaslScram PASSED

org.apache.kafka.common.network.SslSelectorTest > testNormalOperation PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testSetViewModification PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testSetViewGet PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorCreation PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEnlargement PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorTraversal PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListViewGet PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListViewModification PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testNullForbidden PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEmptyListIterator PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEquals PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testInsertDelete PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorRemove PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testTraversal PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testCollisions PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testManyInsertsAndDeletes PASSED

org.apache.kafka.common.requests.OffsetFetchRequestTest > testConstructorFailForUnsupportedAllPartition PASSED

org.apache.kafka.common.requests.OffsetFetchRequestTest > testConstructor PASSED

org.apache.kafka.common.network.SslSelectorTest > testMuteOnOOM PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectionRefused PASSED

org.apache.kafka.common.network.SslSelectorTest > testEmptyRequest PASSED

org.apache.kafka.common.cache.LRUCacheTest > testEviction PASSED

org.apache.kafka.common.cache.LRUCacheTest > testPutGet PASSED

org.apache.kafka.common.cache.LRUCacheTest > testRemove PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeRead PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidSecureRandomImplementation PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidEndpointIdentification PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanIp PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationDisabled PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidation PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerTruststoreDynamicUpdate PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNullTruststorePassword PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeRead PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredUntrustedProvided PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledUntrustedProvided PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testSelectorPollReadSize PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetReadBufferResize PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetWriteBufferResize PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidTruststorePassword PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerRequestMetrics PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPeerNotifiedOfHandshakeFailure PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testApplicationBufferResize PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClosePlaintext PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerKeystoreDynamicUpdate PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredValidProvided PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeyPassword PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCloseSsl PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidationFailure PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnZeroBytes PASSED

org.apache.kafka.common.serialization.SerializationTest > testSerdeFromUnknown PASSED

org.apache.kafka.common.serialization.SerializationTest > allSerdesShouldRoundtripInput PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnTooManyBytes PASSED

org.apache.kafka.common.serialization.SerializationTest > allSerdesShouldSupportNull PASSED

org.apache.kafka.common.serialization.SerializationTest > floatSerdeShouldPreserveNaNValues PASSED

org.apache.kafka.common.serialization.SerializationTest > testSerdeFromNotNull PASSED

org.apache.kafka.common.serialization.SerializationTest > stringSerdeShouldSupportDifferentEncodings PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnTooFewBytes PASSED

> Task :clients:test FAILED
> Task :kafka:generator:compileJava UP-TO-DATE
> Task :kafka:generator:processResources NO-SOURCE
> Task :kafka:generator:classes UP-TO-DATE
> Task :kafka:clients:processMessages UP-TO-DATE
> Task :kafka:clients:compileJava UP-TO-DATE
> Task :kafka:clients:processResources UP-TO-DATE
> Task :kafka:clients:classes UP-TO-DATE
> Task :kafka:clients:determineCommitId UP-TO-DATE
> Task :kafka:clients:createVersionFile
> Task :kafka:clients:jar UP-TO-DATE
> Task :kafka:clients:compileTestJava UP-TO-DATE
> Task :kafka:clients:processTestResources UP-TO-DATE
> Task :kafka:clients:testClasses UP-TO-DATE
> Task :kafka:core:compileJava NO-SOURCE
> Task :kafka:core:compileScala UP-TO-DATE
> Task :kafka:core:processResources NO-SOURCE
> Task :kafka:core:classes UP-TO-DATE
> Task :kafka:core:checkstyleMain
> Task :kafka:core:compileTestJava NO-SOURCE
> Task :kafka:core:compileTestScala UP-TO-DATE
> Task :kafka:core:processTestResources UP-TO-DATE
> Task :kafka:core:testClasses UP-TO-DATE
> Task :kafka:core:checkstyleTest NO-SOURCE
> Task :kafka:spotlessScala UP-TO-DATE
> Task :kafka:spotlessScalaCheck UP-TO-DATE
> Task :kafka:core:copyDependantLibs UP-TO-DATE
> Task :kafka:core:jar UP-TO-DATE
> Task :kafka:connect:api:compileJava UP-TO-DATE
> Task :kafka:connect:api:processResources NO-SOURCE
> Task :kafka:connect:api:classes UP-TO-DATE
> Task :kafka:connect:api:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:api:jar UP-TO-DATE
> Task :kafka:connect:json:compileJava UP-TO-DATE
> Task :kafka:connect:json:processResources NO-SOURCE
> Task :kafka:connect:json:classes UP-TO-DATE
> Task :kafka:connect:json:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:json:jar UP-TO-DATE
> Task :kafka:streams:compileJava UP-TO-DATE
> Task :kafka:streams:processResources NO-SOURCE
> Task :kafka:streams:classes UP-TO-DATE
> Task :kafka:streams:copyDependantLibs UP-TO-DATE
> Task :kafka:streams:jar UP-TO-DATE
> Task :kafka:streams:test-utils:compileJava UP-TO-DATE
> Task :kafka:streams:test-utils:processResources NO-SOURCE
> Task :kafka:streams:test-utils:classes UP-TO-DATE
> Task :kafka:streams:test-utils:copyDependantLibs UP-TO-DATE
> Task :kafka:streams:test-utils:jar UP-TO-DATE
> Task :kafka:streams:compileTestJava UP-TO-DATE
> Task :kafka:streams:processTestResources UP-TO-DATE
> Task :kafka:streams:testClasses UP-TO-DATE
> Task :kafka:streams:streams-scala:compileJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KTable.scala:24: imported `Suppressed' is permanently hidden by definition of object Suppressed in package kstream
import org.apache.kafka.streams.kstream.{Suppressed, ValueTransformerWithKeySupplier, KTable => KTableJ}
                                         ^
one warning found

> Task :kafka:streams:streams-scala:processResources NO-SOURCE
> Task :kafka:streams:streams-scala:classes
> Task :kafka:streams:streams-scala:checkstyleMain NO-SOURCE
> Task :kafka:streams:streams-scala:compileTestJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileTestScala
Pruning sources from previous analysis, due to incompatible CompileSetup.

> Task :kafka:streams:streams-scala:processTestResources UP-TO-DATE
> Task :kafka:streams:streams-scala:testClasses
> Task :kafka:streams:streams-scala:checkstyleTest NO-SOURCE
> Task :kafka:streams:streams-scala:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaJoin PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaSimple PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaAggregate PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaProperties PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaTransform PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped should create a Grouped with Serdes PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilWindowCloses should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped with repartition topic name should create a Grouped with Serdes, and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilTimeLimit should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxRecords should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxBytes should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.unbounded should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig should support very long chains of factory methods PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced should create a Produced with Serdes PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed should create a Consumed with Serdes PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialized should create a Materialized with Serdes PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a store name should create a Materialized with Serdes and a store name PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor should create a Consumed with Serdes and timestampExtractor PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a window store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a key value store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with resetPolicy should create a Consumed with Serdes and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a session store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filter a KStream should filter records satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filterNot a KStream should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > foreach a KStream should run foreach actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > peek a KStream should run peek actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > selectKey a KStream should select a new key PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > join 2 KStreams should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > filter a KTable should filter records satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > filterNot a KTable should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables with a Materialized should join correctly records and state store PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

> Task :kafka:core:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > session windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > non-windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionWithNamedRepartitionTopic PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionJava PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegion PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsMaterialized PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsJava PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWords PASSED

> Task :kafka:core:spotbugsMain

> Task :kafka:core:test

kafka.security.auth.PermissionTypeTest > testJavaConversions PASSED

kafka.security.auth.PermissionTypeTest > testFromString PASSED

kafka.metrics.KafkaTimerTest > testKafkaTimer PASSED

kafka.security.auth.ResourceTypeTest > testJavaConversions PASSED

kafka.security.auth.ResourceTypeTest > testFromString PASSED

kafka.security.auth.OperationTest > testJavaConversions PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartString PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartWithEmbeddedSeparators PASSED

kafka.security.auth.ResourceTest > shouldThrowOnTwoPartStringWithUnknownResourceType PASSED

kafka.security.auth.ResourceTest > shouldThrowOnBadResourceTypeSeparator PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartString PASSED

kafka.security.auth.ResourceTest > shouldRoundTripViaString PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartWithEmbeddedSeparators PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfBlankArg PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowVerifyWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersOption PASSED

kafka.admin.TimeConversionTests > testDateTimeFormats PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowTopicsOptionWithVerify PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithThrottleOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfNoArgs PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowBrokersListWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumExecuteOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumGenerateOptions PASSED

kafka.server.DelayedOperationTest > testRequestPurge PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersAndTopicsOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowThrottleWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldUseDefaultsIfEnabled PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldAllowThrottleOptionOnExecute PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithBrokers PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithTopicsOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumVerifyOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutTopicsOption PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenRacks PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAware PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenReplicas PASSED

kafka.server.DelayedOperationTest > testRequestExpiry PASSED

kafka.admin.AdminRackAwareTest > testSkipBrokerWithReplicaAlreadyAssigned PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAware PASSED

kafka.server.DelayedOperationTest > shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist PASSED

kafka.admin.AdminRackAwareTest > testRackAwareExpansion PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6Partitions PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers PASSED

kafka.security.auth.AclTest > testAclJsonConversion PASSED

kafka.admin.AdminRackAwareTest > testReplicaAssignment PASSED

kafka.admin.AdminRackAwareTest > testGetRackAlternatedBrokerListAndAssignReplicasToBrokers PASSED

kafka.admin.AdminRackAwareTest > testMoreReplicasThanRacks PASSED

kafka.admin.AdminRackAwareTest > testSingleRack PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithRandomStartIndex PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLockOverride PASSED

kafka.admin.AdminRackAwareTest > testLargeNumberPartitionsAssignment PASSED

kafka.security.auth.ZkAuthorizationTest > testIsZkSecurityEnabled PASSED

kafka.admin.AdminRackAwareTest > testLessReplicasThanRacks PASSED

kafka.server.ServerMetricsTest > testMetricsConfig PASSED

kafka.server.DynamicConfigTest > shouldFailFollowerConfigsWithInvalidValues PASSED

kafka.server.DelayedOperationTest > testTryCompleteLockContention PASSED

kafka.server.AbstractFetcherThreadTest > testSimpleFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochInfoNotAvailable PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeHigh PASSED

kafka.server.AbstractFetcherThreadTest > testFencedTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testRetryAfterUnknownLeaderEpochInLatestOffsetFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToEpochEndOffsetsDuringRemovePartitions PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationSkippedIfNoEpochChange PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingUserUnknownConfig PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochInTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testConsumerLagRemovedWithPartition PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeLow PASSED

kafka.server.AbstractFetcherThreadTest > testFencedOffsetResetAfterOutOfRange PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochWhileFetching PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringSuccessfulFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationThrowsExceptionIfLeaderReturnsPartitionsNotRequestedInFetchEpochs PASSED

kafka.server.AbstractFetcherThreadTest > testFencedFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochRequestNotSupported PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithDescribeBrokerLoggerIsNotAllowed PASSED

kafka.server.DynamicConfigTest > shouldFailLeaderConfigsWithInvalidValues PASSED

kafka.admin.AdminZkClientTest > testMockedConcurrentTopicCreation PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringAppending PASSED

kafka.server.AbstractFetcherThreadTest > testMetricsRemovedOnShutdown PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkDuringRemovePartitions PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringFencedFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testCorruptMessage PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingClientIdUnknownConfig PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartup PASSED

kafka.server.AbstractFetcherThreadTest > testTruncation PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsLeader PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleReplicaListBasedOnProposedAssignment PASSED

kafka.admin.ConfigCommandTest > testScramCredentials PASSED

kafka.server.ReplicaManagerTest > testReplicaSelector PASSED

kafka.admin.TopicCommandTest > testAlterPartitionCount PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetBothMessagesIfQuotasAllow PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForTopicsEntityType PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForSlowFollowers PASSED

kafka.server.DelayedOperationTest > testTryCompleteWithMultipleThreads PASSED

kafka.server.DelayedOperationTest > shouldCancelForKeyReturningCancelledOperations PASSED

kafka.server.DelayedOperationTest > testRequestSatisfaction PASSED

kafka.server.ReplicaManagerQuotasTest > testCompleteInDelayedFetchWithReplicaThrottling PASSED

kafka.admin.ConfigCommandTest > shouldFailIfBrokerEntityTypeIsNotAnInteger PASSED

kafka.security.auth.ZkAuthorizationTest > testKafkaZkClient PASSED

kafka.server.ReplicaManagerTest > testHighWaterMarkDirectoryMapping PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLock PASSED

kafka.admin.ReassignPartitionsIntegrationTest > testRackAwareReassign PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForCaughtUpFollowers PASSED

kafka.server.ReplicaManagerTest > testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate PASSED

kafka.admin.TopicCommandTest > testAlterInternalTopicPartitionCount PASSED

kafka.server.ReplicaManagerQuotasTest > shouldExcludeSubsequentThrottledPartitions PASSED

kafka.admin.AdminZkClientTest > testGetBrokerMetadatas PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeader PASSED

kafka.server.MetadataCacheTest > getTopicMetadataWithNonSupportedSecurityProtocol PASSED

kafka.server.MetadataCacheTest > getTopicMetadataIsrNotAvailable PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerDynamicConfig PASSED

kafka.server.MetadataCacheTest > getTopicMetadata PASSED

kafka.server.MetadataCacheTest > getTopicMetadataReplicaNotAvailable PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeaderOldMetadataVersion PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionLeaderNotAvailable PASSED

kafka.server.MetadataCacheTest > getAliveBrokersShouldNotBeMutatedByUpdateCache PASSED

kafka.server.MetadataCacheTest > getTopicMetadataNonExistingTopics PASSED

kafka.server.ReplicaManagerTest > testFollowerStateNotUpdatedIfLogReadFails PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testPeriodicTokenExpiry PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativeReplicationFactor PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForStuckFollowers PASSED

kafka.server.ReplicaManagerTest > testFetchBeyondHighWatermarkReturnEmptyResponse PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetNoMessagesIfQuotasExceededOnSubsequentPartitions PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithPrefixedResource PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testTokenRequestsWithDelegationTokenDisabled PASSED

kafka.server.ReplicaManagerTest > testFetchMessagesWhenNotFollowerForOnePartition PASSED

kafka.admin.TopicCommandTest > testCreateWithInvalidReplicationFactor PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnZkCommandError PASSED

kafka.server.IsrExpirationTest > testIsrExpirationIfNoFetchRequestMade PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldRetainValuesEvenIfCheckpointIsRecreated PASSED

kafka.admin.ConfigCommandTest > testUserClientQuotaOpts PASSED

kafka.server.ReplicaManagerQuotasTest > shouldIncludeInSyncThrottledReplicas PASSED

kafka.server.ReplicaManagerTest > testIllegalRequiredAcks PASSED

kafka.admin.ConfigCommandTest > shouldAddTopicConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testZkAntiMigration PASSED

kafka.admin.ConfigCommandTest > shouldAddClientConfig PASSED

kafka.admin.TopicCommandTest > testListTopicsWithExcludeInternal PASSED

kafka.security.auth.ZkAuthorizationTest > testConsumerOffsetPathAcls PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAllAccess PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativePartitionCount PASSED

kafka.server.ReplicaManagerTest > testClearPurgatoryOnBecomingFollower PASSED

kafka.admin.ConfigCommandTest > shouldDeleteBrokerConfig PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testDescribeToken PASSED

kafka.admin.ConfigCommandTest > shouldAddDefaultBrokerDynamicConfig PASSED

kafka.admin.TopicCommandTest > testCreateIfNotExists PASSED

kafka.admin.ConfigCommandTest > testQuotaConfigEntity PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testCreateToken PASSED

kafka.security.auth.ZkAuthorizationTest > testZkMigration PASSED

kafka.server.ReplicaManagerTest > testOldLeaderLosesMetricsWhenReassignPartitions PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedBracketConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLocalConcurrentModificationOfResourceAcls PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerLoggerConfig PASSED

kafka.server.ReplicaManagerTest > testHighwaterMarkRelativeDirectoryMapping PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testExpireToken PASSED

kafka.admin.ConfigCommandTest > shouldFailIfUnrecognisedEntityType PASSED

kafka.admin.TopicCommandTest > testCreateAlterTopicWithRackAware PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInBootstrapServerIsNotAllowed PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfNonExistingConfigIsDeleted PASSED

kafka.server.ReplicaManagerTest > testOldFollowerLosesMetricsWhenReassignPartitions PASSED

kafka.server.ReplicaManagerTest > testUnknownReplicaSelector PASSED

kafka.server.KafkaMetricReporterClusterIdTest > testClusterIdPresent PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchLatestEpochOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotUpdateEpochAndStartOffsetIfItDidNotChange PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesBetweenEpochBoundaryWhenRemovingNewest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnLogEndOffsetIfLatestEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToEarly PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsFollowerReceivesManyMessages PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldTruncateIfMatchingEpochButEarlierStartingOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteLogEndOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUndefinedOffsetIfUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsLeadersChangeManyTimes PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldSupportEpochsThatDoNotStartFromZero PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldAddEpochAndMessageOffsetToCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesOnEpochBoundaryWhenRemovingLatestEntries PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateSavedOffsetWhenOffsetToClearToIsBetweenEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryTailIfUndefinedPassed PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecorded PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPersistEpochsBetweenInstances PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToFirstOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldGetFirstOffsetOfSubsequentEpochWhenOffsetRequestedForPreviousEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceOffsetsIncreaseMonotonically PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest2 PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearEarliestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPreserveResetOffsetOnClearEarliestIfOneExists PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnInvalidOffsetIfEpochIsRequestedWhichIsNotCurrentlyTracked PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingStartOffsets PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchEndOffsetOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliestAndUpdateItsOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearAllEntries PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearLatestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryHeadIfUndefinedPassed PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerQuotaConfig PASSED

kafka.server.ReplicaManagerTest > testReceiveOutOfOrderSequenceExceptionWithLogStartOffset PASSED

kafka.security.auth.ZkAuthorizationTest > testChroot PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsFollower PASSED

kafka.server.ReplicaManagerTest > testDefaultReplicaSelector PASSED

kafka.server.ReplicaManagerTest > testReadCommittedFetchLimitedAtLSO PASSED

kafka.admin.TopicCommandTest > testTopicDeletion PASSED

kafka.server.ServerShutdownTest > testConsecutiveShutdown PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedEntityName PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnWildcardResource PASSED

kafka.server.ReplicaManagerTest > testDelayedFetchIncludesAbortedTransactions PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRenewToken PASSED
kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest failed, log available in /mydata/kafka/core/build/reports/testOutput/kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest.test.stdout

kafka.server.DescribeLogDirsRequestTest > testDescribeLogDirsRequest FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest(DescribeLogDirsRequestTest.scala:60)

kafka.admin.ListConsumerGroupTest > testListWithUnrecognizedNewConsumerOption PASSED

kafka.admin.ConfigCommandTest > shouldRaiseInvalidConfigurationExceptionWhenAddingInvalidBrokerLoggerConfig PASSED

kafka.server.FetchSessionTest > testFetchRequests PASSED

kafka.server.FetchSessionTest > testIncrementalFetchSession PASSED

kafka.metrics.MetricsTest > testMetricsReporterAfterDeletingTopic PASSED

kafka.server.FetchSessionTest > testResizeCachedSessions PASSED

kafka.server.FetchSessionTest > testSessionCache PASSED

kafka.server.FetchSessionTest > testZeroSizeFetchSession PASSED

kafka.server.ServerShutdownTest > testControllerShutdownDuringSend PASSED

kafka.server.FetchSessionTest > testNewSessionId PASSED

kafka.admin.BrokerApiVersionsCommandTest > checkBrokerApiVersionCommandOutput PASSED

kafka.admin.ConfigCommandTest > shouldSupportCommaSeparatedValues PASSED

kafka.admin.TopicCommandTest > testDescribeIfTopicNotExists PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRemoveTokenHmac PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithAlterBrokerLoggerIsNotAllowed PASSED

kafka.server.RequestQuotaTest > testUnauthorizedThrottle PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testDelete PASSED

kafka.admin.AdminZkClientTest > testBootstrapClientIdConfig PASSED

kafka.admin.DelegationTokenCommandTest > testDelegationTokenRequests PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfNonExistingGroup PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokerLoggersEntityType PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonEmptyGroup PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresMultipleLogSegments PASSED

kafka.admin.TopicCommandTest > testDescribeReportOverriddenConfigs PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnBrokerCommandError PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedForMessageFormatOnHandleWriteTxnMarkersWhenMagicLowerThanRequired PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleTxnOffsetCommitRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testOffsetCommitWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesNotLeaderForPartition PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.server.KafkaApisTest > testJoinGroupProtocolsOrder PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddPartitionsToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testReadUncommittedConsumerListOffsetLatest PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnDistinctListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.server.KafkaApisTest > shouldAppendToLogOnWriteTxnMarkersWhenCorrectMagicVersion PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleWriteTxnMarkersRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokersEntityType PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesFencedLeaderEpoch PASSED

kafka.server.KafkaApisTest > testFetchRequestV9WithNoLogConfig PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicWhenPartitionIsNotHosted PASSED

kafka.server.KafkaApisTest > rejectSyncGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > rejectHeartbeatRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > testReadCommittedConsumerListOffsetLatest PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnSharedListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.security.auth.ZkAuthorizationTest > testDeleteRecursive PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyDeletionOfResourceAcls PASSED

kafka.server.KafkaApisTest > testAddPartitionsToTxnWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownTopicOrPartition PASSED

kafka.admin.ReassignPartitionsCommandTest > testReassigningNonExistingPartition PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddOffsetToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownLeaderEpoch PASSED

kafka.server.KafkaApisTest > testTxnOffsetCommitWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testSingleLeaveGroup PASSED

kafka.server.KafkaApisTest > rejectJoinGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.DelegationTokenRequestsTest > testDelegationTokenRequests PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedMessageFormatForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldReturnEmptyMapForEmptyFile PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleEndTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testMultipleLeaveGroup PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicOrPartitionForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.KafkaApisTest > rejectOffsetCommitRequestWhenStaticMembershipNotSupported PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldThrowIfVersionIsNotRecognised PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopics PASSED

kafka.server.ScramServerStartupTest > testAuthentications PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testBasicPreferredReplicaElection PASSED

kafka.admin.TopicCommandTest > testListTopicsWithWhitelist PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteExistingPropertiesWhenLimitIsAdded PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegmentSize PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopicsAndPartitions PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpointFileInvalidLogDir PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldHandleMultipleLines PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpoint PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleLimitFromAllBrokers PASSED

kafka.admin.TopicCommandTest > testListTopics PASSED

kafka.server.StopReplicaRequestTest > testStopReplicaRequest PASSED

kafka.admin.ConfigCommandTest > testDynamicBrokerConfigUpdateUsingZooKeeper PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicas PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFound PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultiplePartitions PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInZKIsAllowed PASSED

kafka.admin.TopicCommandTest > testDeleteInternalTopic PASSED

kafka.admin.ConfigCommandTest > testQuotaDescribeEntities PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testInvalidBrokerGiven PASSED

kafka.admin.TopicCommandTest > testInvalidTopicLevelConfig PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForClientsEntityType PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testPreferredReplicaJsonData PASSED

kafka.admin.AdminZkClientTest > testTopicConfigChange PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnArgError PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=true] PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated PASSED

kafka.admin.TopicCommandTest > testAlterConfigs PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclInheritance PASSED

kafka.admin.AdminZkClientTest > testManualReplicaAssignment PASSED

kafka.server.AddPartitionsToTxnRequestTest > shouldReceiveOperationNotAttemptedWhenOtherPartitionHasError PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testZkAclsDisabled PASSED

kafka.metrics.MetricsTest > testSessionExpireListenerMetrics PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdWithMixOfSuccessAndError PASSED

kafka.admin.TopicCommandTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldIncreaseLeaderEpochBetweenLeaderRestarts PASSED

kafka.admin.AdminZkClientTest > testConcurrentTopicCreation PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementAllServers PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroup PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDistributedConcurrentModificationOfResourceAcls PASSED

kafka.server.LeaderElectionTest > testLeaderElectionWithStaleControllerEpoch PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartupDueToCorruptLogs PASSED

kafka.admin.TopicCommandTest > testTopicOperationsWithRegexSymbolInTopicName PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testValidCreateTopicsRequests PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequest PASSED

kafka.api.GroupCoordinatorIntegrationTest > testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec PASSED

kafka.admin.TopicCommandTest > testCreateWithConfigs PASSED

kafka.log.LogSegmentTest > testRecoveryWithCorruptMessage PASSED

kafka.admin.LeaderElectionCommandTest > testAllTopicPartition PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptIndex PASSED

kafka.log.LogSegmentTest > testReadFromGap PASSED

kafka.log.LogSegmentTest > testReloadLargestTimestampAndNextOffsetAfterTruncation PASSED

kafka.log.LogSegmentTest > testTruncate PASSED

kafka.log.LogSegmentTest > testRecoverTransactionIndex PASSED

kafka.log.LogSegmentTest > testReadBeforeFirstOffset PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeAppendMessage PASSED

kafka.log.LogSegmentTest > testChangeFileSuffixes PASSED

kafka.log.LogSegmentTest > testTruncateEmptySegment PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptTimeIndex PASSED

kafka.log.LogSegmentTest > shouldTruncateEvenIfOffsetPointsToAGapInTheLog PASSED

kafka.log.LogSegmentTest > testNextOffsetCalculation PASSED

kafka.log.LogSegmentTest > testFindOffsetByTimestamp PASSED

kafka.log.LogSegmentTest > testReadOnEmptySegment PASSED

kafka.admin.TopicCommandTest > testAlterIfExists PASSED

kafka.log.LogSegmentTest > testReadAfterLast PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeClearShutdown PASSED

kafka.log.LogSegmentTest > testAppendFromFile PASSED

kafka.log.LogSegmentTest > testTruncateFull PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.LiteralAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.LiteralAclStoreTest > shouldThrowFromEncodeOnNoneLiteral PASSED

kafka.zk.LiteralAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.zk.LiteralAclStoreTest > shouldDecodeResourceUsingTwoPartLogic PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnWildcardResource PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeEarliestTime PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequest PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=false] PASSED

kafka.api.AdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.admin.TopicCommandTest > testCreateWithReplicaAssignment PASSED

kafka.server.RequestQuotaTest > testUnthrottledClient PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventWhenInterBrokerProtocolAtLeastKafkaV2 PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlanSingleGroupArg PASSED

kafka.admin.TopicCommandTest > testAlterWithInvalidPartitionCount PASSED

kafka.admin.ListConsumerGroupTest > testListConsumerGroups PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithTopicOption PASSED

kafka.server.DeleteTopicsRequestTest > testValidDeleteTopicRequests PASSED

kafka.admin.TopicCommandTest > testCreate PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclManagementAPIs PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentNonOverlappingReplicas PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroup PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsUnregisteredAfterDeletingTopic PASSED

kafka.admin.AdminZkClientTest > shouldPropagateDynamicBrokerConfigs PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsMarkedForDeletion PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExecuteThrottledReassignment PASSED

kafka.admin.TopicCommandTest > testDeleteIfExists PASSED

kafka.server.LogOffsetTest > testGetOffsetsForUnknownTopic PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testErrorCreateTopicsRequests PASSED

kafka.server.ServerShutdownTest > testCleanShutdown PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWildCardAcls PASSED

kafka.admin.AdminZkClientTest > testTopicCreationWithCollision PASSED

kafka.admin.TopicCommandTest > testDescribe PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=true] PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.server.ServerGenerateBrokerIdTest > testBrokerMetadataOnIdCollision PASSED

kafka.server.RequestQuotaTest > testExemptRequestTime PASSED

kafka.admin.AdminZkClientTest > testTopicCreationInZK PASSED

kafka.admin.AclCommandTest > testAclCliWithAuthorizer PASSED

kafka.admin.LeaderElectionCommandTest > testTopicWithoutPartition PASSED

kafka.admin.AddPartitionsTest > testMissingPartition0 PASSED

kafka.admin.AclCommandTest > testInvalidAuthorizerProperty PASSED

kafka.admin.TopicCommandTest > testAlterAssignment PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralAclChangeEventWhenInterBrokerProtocolIsKafkaV2 PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonExistingGroup PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresMultipleLogSegments PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader PASSED

kafka.server.ServerShutdownTest > testCleanShutdownWithDeleteTopicEnabled PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.server.SimpleFetchTest > testReadFromLog PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testTopicAcl PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithConsumersWithoutAssignedPartitions PASSED

kafka.metrics.MetricsTest > testClusterIdMetric PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterPartitionCount PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequestErrorCode PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithCleaner PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchLeaderEpochOnFirstFetchOnly PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > issuesEpochRequestFromLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToInitialFetchOffsetIfReplicaReturnsUndefinedOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToReplicaOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchOneReplicaAtATime PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderNotInNewReplicas PASSED

kafka.server.LogOffsetTest > testEmptyLogsGetOffsets PASSED

kafka.api.SslProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.server.ProduceRequestTest > testSimpleProduceRequest PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserHasAccess PASSED

kafka.server.DynamicBrokerReconfigurationTest > testDefaultTopicConfig PASSED

kafka.server.DeleteTopicsRequestTest > testErrorDeleteTopicRequests PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartitionWithinBroker PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTime PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=false] PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresSingleLogSegment PASSED

kafka.log.LogConfigTest > testGetConfigValue PASSED

kafka.log.LogConfigTest > testToRst PASSED

kafka.log.LogConfigTest > ensureNoStaticInitializationOrderDependency PASSED

kafka.log.LogConfigTest > testToEnrichedRst PASSED

kafka.log.LogConfigTest > shouldValidateThrottledReplicasConfig PASSED

kafka.log.LogConfigTest > testFromPropsEmpty PASSED

kafka.log.LogConfigTest > testInvalidCompactionLagConfig PASSED

kafka.log.LogConfigTest > testKafkaConfigToProps PASSED

kafka.log.LogConfigTest > testFromPropsInvalid PASSED

kafka.log.LogConfigTest > testToHtml PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnPrefixedResource PASSED

kafka.server.ServerGenerateBrokerIdTest > testAutoGenerateBrokerId PASSED

kafka.server.LeaderElectionTest > testLeaderElectionAndEpoch PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAdminAPI PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByHigherThanLatest PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldPollIndefinitelyIfReplicaNotAvailable PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegments PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonEmptyGroup PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.json.JsonValueTest > testJsonObjectIterator PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDenyTakesPrecedence PASSED

kafka.utils.json.JsonValueTest > testDecodeLong PASSED

kafka.utils.json.JsonValueTest > testAsJsonObject PASSED

kafka.utils.json.JsonValueTest > testDecodeDouble PASSED

kafka.utils.json.JsonValueTest > testDecodeOption PASSED

kafka.utils.json.JsonValueTest > testDecodeString PASSED

kafka.utils.json.JsonValueTest > testJsonValueToString PASSED

kafka.utils.json.JsonValueTest > testAsJsonObjectOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArrayOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArray PASSED

kafka.utils.json.JsonValueTest > testJsonValueHashCode PASSED

kafka.utils.json.JsonValueTest > testDecodeInt PASSED

kafka.utils.json.JsonValueTest > testDecodeMap PASSED

kafka.utils.json.JsonValueTest > testDecodeSeq PASSED

kafka.utils.json.JsonValueTest > testJsonObjectGet PASSED

kafka.utils.json.JsonValueTest > testJsonValueEquals PASSED

kafka.utils.json.JsonValueTest > testJsonArrayIterator PASSED

kafka.utils.json.JsonValueTest > testJsonObjectApply PASSED

kafka.utils.json.JsonValueTest > testDecodeBoolean PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldNotAbortExpiredTransactionsThatHaveAPendingStateTransition PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnInitPidWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenPidDosentMatchMapped PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnConcurrentTxnRequestOnEndTxnRequestWhenStatusIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnEndTxnWhenIsNotCoordinatorForId PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidTnxProduceEpochOnAddPartitionsWhenEpochsAreDifferent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidRequestWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidPidMappingOnAddPartitionsToTransactionWhenTransactionalIdNotPresent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenTxnIdDoesntExist PASSED

kafka.server.FetchRequestTest > testZStdCompressedRecords PASSED

kafka.metrics.MetricsTest > testControllerMetrics PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldUseLastEpochToFenceWhenEpochsAreExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithProducerFencedOnEndTxnWhenEpochIsNotSameAsTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteCommitTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortTransactionOnHandleInitPidWhenExistingTransactionInOngoingState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnAddPartitionsWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnAddPartitionsWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteAbortAndResultIsNotAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsOngoing PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingEmptyTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteAbortAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareCommitToLogOnEndTxnWhenStatusIsOngoingAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendNewMetadataToLogOnAddPartitionsWhenPartitionsAdded PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnEndTxnWhenCoordinatorIsLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithErrorsNoneOnAddPartitionWhenNoErrorsAndPartitionsTheSame PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareAbortToLogOnEndTxnWhenStatusIsOngoingAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAcceptInitPidAndReturnNextPidWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRemoveTransactionsForPartitionOnEmigration PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortExpiredTransactionsInOngoingStateAndBumpEpoch PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteCommitAndResultIsNotCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteCommitAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionsOnAddPartitionsWhenStateIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldGenerateNewProducerIdIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnInitPidWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionOnAddPartitionsWhenStateIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldInitPidWithEpochZeroForNewTransactionalId PASSED

kafka.server.DeleteTopicsRequestWithDeletionDisabledTest > testDeleteRecordsRequest PASSED

kafka.server.MetadataRequestTest > testIsrAfterBrokerShutDownAndJoinsBack PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToEndOffsetOfLargestCommonEpoch PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > fetchEpochsFromLeaderShouldHandleExceptionFromGetLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchNonDelayedAndNonTruncatingReplicas PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldSendLeaderEpochRequestAndGetAResponse PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSingleCharacterResourceAcls PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultipleSubActions PASSED

kafka.api.SslProducerSendTest > testClose PASSED

kafka.admin.AddPartitionsTest > testWrongReplicaCount PASSED

kafka.server.DelegationTokenRequestsOnPlainTextTest > testDelegationTokenRequests PASSED

kafka.server.ReplicaFetchTest > testReplicaFetcherThread PASSED

kafka.server.MultipleListenersWithAdditionalJaasContextTest > testProduceConsume PASSED

kafka.admin.ReassignPartitionsCommandTest > testResumePartitionReassignmentThatWasCompleted PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldSetQuotaLimit PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFoundOverride PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedDoesNotMatchExisting PASSED

kafka.integration.MinIsrConfigTest > testDefaultKafkaConfig PASSED

kafka.metrics.MetricsTest > testWindowsStyleTagNames PASSED

kafka.server.ServerGenerateBrokerIdTest > testMultipleLogDirsMetaProps PASSED

kafka.server.DeleteTopicsRequestTest > testNotController PASSED

kafka.admin.AclCommandTest > testPatternTypes PASSED

kafka.server.ServerStartupTest > testBrokerStateRunningAfterZK PASSED

kafka.server.ProduceRequestTest > testCorruptLz4ProduceRequest PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testEmptyAclThrowsException PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeLatestTime PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonExistingGroup PASSED

kafka.admin.LeaderElectionCommandTest > testPathToJsonFile PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupOffsetsWithShortInitializationTimeout PASSED

kafka.server.FetchRequestTest > testFetchRequestToNonReplica PASSED

kafka.api.EndToEndClusterIdTest > testEndToEnd PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserWithCustomPrincipalHasAccess PASSED

kafka.controller.PartitionStateMachineTest > testNonexistentPartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionErrorCodeFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToUncleanOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOfflineTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCount PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNewPartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNewPartitionTransition PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTimeout PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCountDuringTopicDeletion PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionErrorCodeFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransitionForControlledShutdown PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testNoOfflinePartitionsChangeForTopicsBeingDeleted PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOfflinePartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransition PASSED

kafka.api.PlaintextConsumerTest > testEarliestOrLatestOffsets PASSED

kafka.server.ServerGenerateBrokerIdTest > testDisableGeneratedBrokerId PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAccessWithCustomPrincipal PASSED

kafka.server.AdvertiseBrokerTest > testBrokerAdvertiseHostNameAndPortToZK PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.api.UserQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderInNewReplicas PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperSessionStateMetric PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasWhenProposedIsSubsetOfExisting PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnWildcardResource PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldUpdateQuotaLimit PASSED

kafka.server.MetadataRequestTest > testReplicaDownResponse PASSED

kafka.api.AdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindTwoMovingReplicasInSamePartition PASSED

kafka.zookeeper.ZooKeeperClientTest > testExceptionInBeforeInitializingSession PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroupWithNoMembers PASSED

kafka.server.KafkaServerTest > testAlreadyRegisteredAdvertisedListeners PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteEntityConfigsWhenUpdatingThrottledReplicas PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementPartialServers PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNode PASSED

kafka.server.ServerStartupTest > testBrokerCreatesZKChroot PASSED

kafka.server.ProduceRequestTest > testProduceToNonReplica PASSED

kafka.api.LogAppendTimeTest > testProduceConsume PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDescribe PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testChangeListenerTiming PASSED

kafka.log.TransactionIndexTest > testTruncate PASSED

kafka.log.TransactionIndexTest > testAbortedTxnSerde PASSED

kafka.log.TransactionIndexTest > testRenameIndex PASSED

kafka.log.TransactionIndexTest > testPositionSetCorrectlyWhenOpened PASSED

kafka.log.TransactionIndexTest > testLastOffsetCannotDecrease PASSED

kafka.log.TransactionIndexTest > testLastOffsetMustIncrease PASSED

kafka.log.TransactionIndexTest > testSanityCheck PASSED

kafka.log.TransactionIndexTest > testCollectAbortedTransactions PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicOnControllerFailover PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsBytesInOut PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnection PASSED

kafka.api.SslProducerSendTest > testFlush PASSED

kafka.cluster.ReplicaTest > testCannotIncrementLogStartOffsetPastHighWatermark PASSED

kafka.cluster.ReplicaTest > testSegmentDeletionWithHighWatermarkInitialization PASSED

kafka.server.DynamicBrokerReconfigurationTest > testMetricsReporterUpdate PASSED

kafka.cluster.ReplicaTest > testCannotDeleteSegmentsAtOrAboveHighWatermark PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForCreation PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteEmptyGroup PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeNow PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclExistingZNode PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralWritesLiteralAclChangeEventWhenInterBrokerProtocolLessThanKafkaV2eralAclChangesForOlderProtocolVersions PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiryDuringClose PASSED

kafka.api.TransactionsBounceTest > testBrokerFailure PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftMinus PASSED

kafka.admin.LeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testListenerName PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNonexistentReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNonexistentReplicaTransition PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetAclNonExistentZNode PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionSuccessfulToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOnlinePartition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOfflinePartition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupWithReplicaWithoutLeader PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionIneligibleToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOnlineReplicaTransition PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForAutoCreate PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresSingleLogSegment PASSED

kafka.server.MetadataRequestTest > testAutoCreateOfCollidingTopics PASSED

kafka.server.KafkaMetricReporterExceptionHandlingTest > testBothReportersAreInvoked PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testThrowsOnAddPrefixedAclIfInterBrokerProtocolVersionTooLow PASSED

kafka.server.DelegationTokenRequestsWithDisableTokenFeatureTest > testDelegationTokenRequests PASSED

kafka.tools.CustomDeserializerTest > checkDeserializerTopicIsNotNull PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnPrefixedResource PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithMixOfSuccessAndError PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.RackAwareAutoTopicCreationTest > testAutoCreateTopic PASSED

kafka.log.LogValidatorTest > testRecompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testCompressedV1 PASSED

kafka.log.LogValidatorTest > testCompressedV2 PASSED

kafka.log.LogValidatorTest > testDownConversionOfIdempotentRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentCompressed PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV1 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV1ToV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0Compressed PASSED

kafka.log.LogValidatorTest > testZStdCompressedWithUnavailableIBPVersion PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed PASSED

kafka.log.LogValidatorTest > testDownConversionOfTransactionalRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1Compressed PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testControlRecordsNotAllowedFromClients PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed PASSED

kafka.log.LogValidatorTest > testMisMatchMagic PASSED

kafka.log.LogValidatorTest > testLogAppendTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testControlRecordsNotCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testCompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOnlyOneBatch PASSED

kafka.log.LogValidatorTest > testAllowMultiBatch PASSED

kafka.log.LogValidatorTest > testInvalidOffsetRangeAndRecordCount PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV2 PASSED

kafka.log.LogValidatorTest > testUncompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentNonCompressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2Compressed PASSED

kafka.log.LogValidatorTest > testNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV2 PASSED

kafka.log.LogValidatorTest > testRecompressionV1 PASSED

kafka.log.LogValidatorTest > testRecompressionV2 PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeInvalidJson PASSED

kafka.zk.ReassignPartitionsZNodeTest > testEncode PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeValidJson PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupMembersWithShortInitializationTimeout PASSED

kafka.server.ServerGenerateBrokerIdTest > testUserConfigAndGeneratedBrokerId PASSED

kafka.server.ServerStartupTest > testConflictBrokerStartupWithSamePort PASSED

kafka.server.LogOffsetTest > testGetOffsetsAfterDeleteRecords PASSED

kafka.server.ProduceRequestTest > testZSTDProduceRequest PASSED

kafka.api.SslProducerSendTest > testSendToPartition PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyModificationOfResourceAcls PASSED

kafka.admin.AddPartitionsTest > testIncrementPartitions PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testOffsetsForLeaderEpochErrorCodes PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicWithRecoveredFollower PASSED

kafka.server.MetadataRequestTest > testRack PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultReplication PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithEmptyResourceName PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.api.ConsumerBounceTest > testCloseDuringRebalance PASSED

kafka.api.PlaintextConsumerTest > testShrinkingTopicSubscriptions PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnPrefixedResource PASSED

kafka.server.FetchRequestTest > testBrokerRespectsPartitionsOrderAndSizeLimits PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldTriggerReassignmentOnControllerStartup PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithUnrecognizedNewConsumerOption PASSED

kafka.api.ProducerFailureHandlingTest > testCannotSendToInternalTopic PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.api.SaslMultiMechanismConsumerTest > testMultipleBrokerMechanisms PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnLiteralResource PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAdminAPI PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithDownConversionDisabled PASSED

kafka.api.SslProducerSendTest > testSendOffset PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroup PASSED

kafka.server.ServerStartupTest > testConflictBrokerRegistration PASSED

kafka.server.ServerGenerateBrokerIdTest > testConsistentBrokerIdFromUserConfigAndMetaProps PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicAlreadyMarkedAsDeleted PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeThrowsOnNoneLiteralResource PASSED

kafka.server.MetadataRequestTest > testIsInternal PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAuthorizer PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testGetAclsPrincipal PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInconsistentReplicasAndLogDirs PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testAuthzFailure PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdAllGroups PASSED

kafka.server.ServerStartupTest > testBrokerSelfAware PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLegacyAclOpsNeverAffectOrReturnPrefixed PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnPrefiexedResource PASSED

kafka.server.FetchRequestTest > testZStdCompressedTopic PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionLossRequestTermination PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroup PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsNonExistentZNode PASSED

kafka.admin.AddPartitionsTest > testManualAssignmentOfReplicas PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testCurrentEpochValidation PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToCurrentOffset PASSED

kafka.api.AuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataNonExistentZNode PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventIfInterBrokerProtocolNotSet PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckOne PASSED

kafka.api.SslProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterParallel PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnWildcardResource PASSED

kafka.api.CustomQuotaCallbackTest > testCustomQuotaCallback PASSED

kafka.utils.PasswordEncoderTest > testEncoderConfigChange PASSED

kafka.api.AdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.server.MetadataRequestTest > testControllerId PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchFromReplica PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecodeAlgorithms PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecode PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionBeatsConsumerOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailure PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithNonExistingMember PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionTimeout PASSED

kafka.coordinator.group.GroupMetadataTest > testConsumerBeatsTransactionalOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGenerationEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenDead PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGeneration PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToEmptyTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocol PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenPreparingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testFailedTxnOffsetCommitLeavesNoPendingState PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenCompletingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolRaisesIfNoMembers PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstance PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionalCommitIsAbortedAndConsumerCommitWins PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailureWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToStableTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSupportsProtocols PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenStable PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithEmptyGroupInstanceId PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolChoosesCompatibleProtocol PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLoadCache PASSED

kafka.server.KafkaConfigTest > testAdvertiseConfigured PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeBothMsAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRetentionValid PASSED

kafka.server.KafkaConfigTest > testSpecificProperties PASSED

kafka.server.KafkaConfigTest > testDefaultCompressionType PASSED

kafka.server.KafkaConfigTest > testControlPlaneListenerName PASSED

kafka.server.KafkaConfigTest > testDuplicateListeners PASSED

kafka.server.KafkaConfigTest > testLogRetentionUnlimited PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testMaxConnectionsPerIpProp PASSED

kafka.server.KafkaConfigTest > testLogRollTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testInvalidInterBrokerSecurityProtocol PASSED

kafka.server.KafkaConfigTest > testAdvertiseDefaults PASSED

kafka.server.KafkaConfigTest > testBadListenerProtocol PASSED

kafka.server.KafkaConfigTest > testListenerDefaults PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testUncleanElectionDisabled PASSED

kafka.server.KafkaConfigTest > testListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testCaseInsensitiveListenerProtocol PASSED

kafka.server.KafkaConfigTest > testListenerAndAdvertisedListenerNames PASSED

kafka.server.KafkaConfigTest > testNonroutableAdvertisedListeners PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameAndSecurityProtocolSet PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdEmptyGroup PASSED

kafka.server.KafkaConfigTest > testFromPropsInvalid PASSED

kafka.server.KafkaConfigTest > testInvalidCompressionType PASSED

kafka.server.KafkaConfigTest > testAdvertiseHostNameDefault PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMinutesProvided PASSED

kafka.server.KafkaConfigTest > testValidCompressionType PASSED

kafka.server.KafkaConfigTest > testUncleanElectionInvalid PASSED

kafka.server.KafkaConfigTest > testListenerNamesWithAdvertisedListenerUnset PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndMsProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testUncleanLeaderElectionDefault PASSED

kafka.server.KafkaConfigTest > testInvalidAdvertisedListenersProtocol PASSED

kafka.server.KafkaConfigTest > testUncleanElectionEnabled PASSED

kafka.zookeeper.ZooKeeperClientTest > testBlockOnRequestCompletionFromStateChangeHandler PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoopElection PASSED

kafka.server.DynamicConfigChangeTest > testProcessNotification PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMs PASSED

kafka.admin.LeaderElectionCommandTest > testPreferredReplicaElection PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAdvertisedListenerUpdate PASSED

kafka.zookeeper.ZooKeeperClientTest > testUnresolvableConnectString PASSED

kafka.server.KafkaConfigTest > testInterBrokerVersionMessageFormatCompatibility PASSED

kafka.server.KafkaConfigTest > testAdvertisePortDefault PASSED

kafka.server.KafkaConfigTest > testVersionConfiguration PASSED

kafka.server.KafkaConfigTest > testEqualAdvertisedListenersProtocol PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncryption PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenNonExistentZNode PASSED

kafka.server.DynamicBrokerConfigTest > testSecurityConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testSynonyms PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterId PASSED

kafka.zookeeper.ZooKeeperClientTest > testPipelinedGetData PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicConfigInitializationWithoutConfigsInZK PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithSomeInvalidConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicListenerConfig PASSED

kafka.server.DynamicBrokerConfigTest > testReconfigurableValidation PASSED

kafka.server.DynamicBrokerConfigTest > testConnectionQuota PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdate PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChildChangeHandlerForChildChange PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncoderSecretChange PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithReconfigurableValidationFailure PASSED

kafka.server.DynamicConfigChangeTest > shouldParseWildcardReplicationQuotaProperties PASSED

kafka.server.FetchRequestTest > testDownConversionFromBatchedToUnbatchedRespectsOffset PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNodeWithChildren PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldOnlyThrottleMovingReplicas PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataExistingZNode PASSED

kafka.zookeeper.ZooKeeperClientTest > testMixedPipeline PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestBeforeSaslHandshakeRequest PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataExistingZNode PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithConsumersWithoutAssignedPartitions PASSED

kafka.server.DynamicConfigChangeTest > testDefaultClientIdQuotaConfigChange PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteExistingZNode PASSED

kafka.api.SaslMultiMechanismConsumerTest > testCoordinatorFailover PASSED

kafka.server.FetchRequestDownConversionConfigTest > testLatestFetchWithDownConversionDisabled PASSED

kafka.server.MetadataRequestTest > testAliveBrokersWithNoTopics PASSED

kafka.admin.LeaderElectionCommandTest > testInvalidBroker PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.DeleteTopicTest > testIncreasePartitionCountDuringDeleteTopic PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringLogRoll PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAttemptToCreateInvalidAcls PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.api.PlaintextConsumerTest > testOffsetsForTimes PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiry PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopicAndPartition PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestAfterSaslHandshakeRequest PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExpandCluster PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataNonExistentZNode PASSED

kafka.server.DynamicConfigChangeTest > testQuotaInitialization PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteNonExistentZNode PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsExistingZNode PASSED

kafka.server.FetchRequestTest > testFetchRequestV2WithOversizedMessage PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperStateChangeRateMetrics PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDeletion PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclNonExistentZNode PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.server.DynamicConfigChangeTest > testUserQuotaConfigChange PASSED

kafka.api.MetricsTest > testMetrics PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.server.MetadataRequestTest > testAllTopicsRequest PASSED

kafka.zookeeper.ZooKeeperClientTest > testStateChangeHandlerForAuthFailure PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.admin.LeaderElectionCommandTest > testPartitionWithoutTopic PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidLogDir PASSED

kafka.api.UserQuotaTest > testThrottledProducerConsumer PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithTopicLevelOverrides PASSED

kafka.api.UserClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetWithUnrecognizedNewConsumerOption PASSED

kafka.admin.DeleteTopicTest > testPartitionReassignmentDuringDeleteTopic PASSED

kafka.api.PlaintextConsumerTest > testSubsequentPatternSubscription PASSED

kafka.server.DynamicConfigChangeTest > testClientIdQuotaConfigChange PASSED

kafka.server.CreateTopicsRequestTest > testValidCreateTopicsRequests PASSED

kafka.server.MultipleListenersWithDefaultJaasContextTest > testProduceConsume PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testSingletonPartitionGiven PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAuthorizer PASSED

kafka.server.MetadataRequestTest > testClusterIdIsValid PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringCheckpoint PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAtMinIsrPartitions PASSED

kafka.server.DynamicConfigChangeTest > testUserClientIdQuotaChange PASSED

kafka.admin.LeaderElectionCommandTest > testMissingElectionType PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasEmptyReplicaList PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.ProducerFailureHandlingTest > testWrongBrokerList PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterSequential PASSED

kafka.api.test.ProducerCompressionTest > testCompression[0 compressionType = none] PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclAuthorizationDenied PASSED

kafka.controller.ControllerIntegrationTest > testControllerDetectsBouncedBrokers PASSED

kafka.api.SaslMultiMechanismConsumerTest > testSimpleConsumption PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaProperties PASSED

kafka.server.FetchRequestTest > testDownConversionWithConnectionFailure PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.DeleteTopicTest > testDeleteNonExistingTopic PASSED

kafka.api.AdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.admin.LeaderElectionCommandTest > testMissingTopicPartitionSelection PASSED

kafka.server.CreateTopicsRequestTest > testErrorCreateTopicsRequests PASSED

kafka.server.MetadataRequestTest > testNoTopicsRequest PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicas PASSED

kafka.server.DynamicConfigChangeTest > shouldParseRegardlessOfWhitespaceAroundValues PASSED

kafka.api.test.ProducerCompressionTest > testCompression[1 compressionType = gzip] PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithAssign PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentDuplicateEntries PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidBrokerID PASSED

kafka.server.DynamicBrokerReconfigurationTest > testThreadPoolResize PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserQuotaConfigChange PASSED

kafka.controller.ControllerIntegrationTest > testControlledShutdown PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDurationToEarliest PASSED

kafka.admin.DeleteTopicTest > testRecreateTopicAfterDeletion PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.ProducerFailureHandlingTest > testResponseTooLargeForReplicationWithAckAll PASSED

kafka.server.CreateTopicsRequestTest > testInvalidCreateTopicsRequests PASSED

kafka.server.LogDirFailureTest > brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure PASSED

kafka.api.test.ProducerCompressionTest > testCompression[2 compressionType = snappy] PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaReset PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.ConsumerBounceTest > testClose PASSED

kafka.server.FetchRequestTest > testCurrentEpochValidation PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithLeaderThrottle PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartition PASSED

kafka.api.AuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicConnectionQuota PASSED

kafka.api.TransactionsTest > testBasicTransactions PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserClientIdQuotaConfigChange PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativeReplicationFactor PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithCreateTime PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.admin.DeleteTopicTest > testDisableDeleteTopic PASSED

kafka.api.test.ProducerCompressionTest > testCompression[3 compressionType = lz4] PASSED

kafka.api.AdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.admin.AclCommandTest > testAclCliWithAdminAPI PASSED

kafka.server.CreateTopicsRequestTest > testNotController PASSED

kafka.server.DynamicConfigChangeTest > testConfigChangeOnNonExistingTopic PASSED

kafka.server.MetadataRequestTest > testAutoCreateTopicWithInvalidReplicationFactor PASSED

kafka.admin.LeaderElectionCommandTest > testTopicPartition PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentWithOfflineReplicaHaltingProgress PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultiplePartitionsSameAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations PASSED

kafka.server.FetchRequestTest > testCreateIncrementalFetchWithPartitionsInError PASSED

kafka.server.DynamicConfigChangeTest > testConfigChange PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiVersionRequest PASSED

kafka.api.test.ProducerCompressionTest > testCompression[4 compressionType = zstd] PASSED

kafka.controller.ControllerIntegrationTest > testControllerEpochPersistsWhenAllBrokersDown PASSED

kafka.api.PlaintextConsumerTest > testAsyncCommit PASSED

kafka.log.LogCleanerIntegrationTest > testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigs PASSED

kafka.server.LogDirFailureTest > testReplicaFetcherThreadAfterLogDirFailureOnFollower PASSED

kafka.admin.DeleteTopicTest > testAddPartitionDuringDeleteTopic PASSED

kafka.api.ApiUtilsTest > testShortStringNonASCII PASSED

kafka.api.ApiUtilsTest > testShortStringASCII PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestIsNew PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicQueuedForDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSentToLiveOrShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaSentOnlyToLiveAndShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaGroupsByBroker PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataDoesNotIncludePartitionsWithoutLeaderAndIsr PASSED

kafka.controller.ControllerChannelManagerTest > testMixedDeleteAndNotDeleteStopReplicaRequests PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestDuringTopicDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataIncludesLiveOrShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicDeletionStarted PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSent PASSED

kafka.api.AdminClientIntegrationTest > testClose PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithInvalidReplicationFactor PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.zk.KafkaZkClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformMultipleReassignmentOperationsOverVariousTopics PASSED

kafka.server.MetadataRequestTest > testPreferredReplica PASSED

kafka.zk.KafkaZkClientTest > testCreateAndGetTopicPartitionStatesRaw PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopic PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.log.LogCleanerIntegrationTest > testMaxLogCompactionLag PASSED

unit.kafka.utils.ThrottlerTest > testThrottleDesiredRate PASSED

kafka.zk.KafkaZkClientTest > testLogDirGetters PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeSimpleConsumerGroup PASSED

kafka.server.EdgeCaseRequestTest > testMalformedHeaderRequest PASSED

kafka.server.FetchRequestTest > testFetchRequestV4WithReadCommitted PASSED

kafka.server.DynamicConfigChangeTest > testDynamicTopicConfigChange PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicListenerConnectionQuota PASSED

kafka.tools.ConsumerPerformanceTest > testDetailedHeaderMatchBody PASSED

kafka.tools.ConsumerPerformanceTest > testConfigWithUnrecognizedOption PASSED

kafka.tools.ConsumerPerformanceTest > testConfig PASSED

kafka.tools.ConsumerPerformanceTest > testNonDetailedHeaderMatchBody PASSED

kafka.server.ReplicationQuotasTest > shouldThrottleOldSegments PASSED

kafka.zk.KafkaZkClientTest > testSetGetAndDeletePartitionReassignment PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.TransactionsTest > testFencingOnSendOffsets PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testValidAlterConfigs PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreationWithOfflineReplica PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationsDeletion PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndVersion PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithAllAliveReplicas PASSED

kafka.api.UserClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.zk.KafkaZkClientTest > testGetChildren PASSED

kafka.server.EdgeCaseRequestTest > testProduceRequestWithNullClientId PASSED

kafka.server.MetadataRequestTest > testClusterIdWithRequestVersion1 PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldShrinkCluster PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsNotExistingGroup PASSED

kafka.zk.KafkaZkClientTest > testSetAndGetConsumerOffset PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfNonExistingGroup PASSED

kafka.zk.KafkaZkClientTest > testClusterIdMethods PASSED

kafka.zk.KafkaZkClientTest > testEntityConfigManagementMethods PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations2 PASSED

kafka.zk.KafkaZkClientTest > testUpdateLeaderAndIsr PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigsDueToPolicy PASSED

kafka.zk.KafkaZkClientTest > testUpdateBrokerInfo PASSED

kafka.server.GssapiAuthenticationTest > testServerNotFoundInKerberosDatabase PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithConsumersWithoutAssignedPartitions PASSED

kafka.api.ProducerFailureHandlingTest > testNonExistentTopic PASSED

kafka.api.TransactionsTest > testFencingOnAddPartitions PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiKeyRequest PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSaslListeners PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicDuringAddPartition PASSED

kafka.server.MetadataRequestTest > testAutoTopicCreation PASSED

kafka.zk.KafkaZkClientTest > testCreateRecursive PASSED

kafka.admin.ReassignPartitionsClusterTest > testHwAfterPartitionReassignment PASSED

kafka.api.ClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.zk.KafkaZkClientTest > testGetConsumerOffsetNoData PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[0] PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentResumesAfterReplicaComesOnline PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicPathMethods PASSED

kafka.zk.KafkaZkClientTest > testSetTopicPartitionStatesRaw PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.zk.KafkaZkClientTest > testAclManagementMethods PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[1] PASSED

kafka.zk.KafkaZkClientTest > testPreferredReplicaElectionMethods PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroupWithNoMembers PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.server.EdgeCaseRequestTest > testHeaderOnlyRequest PASSED

kafka.zk.KafkaZkClientTest > testPropagateLogDir PASSED

kafka.api.AdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndStat PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[2] PASSED

kafka.zk.KafkaZkClientTest > testReassignPartitionsInProgress PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionDisabled PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithUnrecognizedNewConsumerOption PASSED

kafka.zk.KafkaZkClientTest > testCreateTopLevelPaths PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationGetters PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.zk.KafkaZkClientTest > testLogDirEventNotificationsDeletion PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupStateWithShortInitializationTimeout PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[3] PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformThrottledReassignmentOverVariousTopics PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.zk.KafkaZkClientTest > testGetLogConfigs PASSED

kafka.api.TransactionsTest > testFencingOnTransactionExpiration PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateIfItAlreadyExists PASSED

kafka.zk.KafkaZkClientTest > testBrokerSequenceIdMethods PASSED

kafka.api.PlaintextConsumerTest > testLowMaxFetchSizeForRequestAndPartition PASSED

kafka.zk.KafkaZkClientTest > testAclMethods PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testWithOfflinePreferredReplica PASSED

kafka.zk.KafkaZkClientTest > testCreateSequentialPersistentPath PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDelete PASSED

kafka.api.ConsumerBounceTest > testSeekAndCommitWithBrokerFailures PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[4] PASSED

kafka.zk.KafkaZkClientTest > testConditionalUpdatePath PASSED

kafka.api.UserQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicZNode PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.zk.KafkaZkClientTest > testDeletePath PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.zk.KafkaZkClientTest > testGetBrokerMethods PASSED

kafka.zk.KafkaZkClientTest > testCreateTokenChangeNotification PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansionWithOfflineReplica PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.admin.DeleteTopicTest > testDeletingPartiallyDeletedTopic PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.zk.KafkaZkClientTest > testGetTopicsAndPartitions PASSED

kafka.zk.KafkaZkClientTest > testRegisterBrokerInfo PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldChangeThrottleOnRerunAndRemoveOnVerify PASSED

kafka.zk.KafkaZkClientTest > testRetryRegisterBrokerInfo PASSED

kafka.server.GssapiAuthenticationTest > testRequestIsAReplay PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsingWithDefaultClientIdQuota PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnStopPolling PASSED

kafka.zk.KafkaZkClientTest > testConsumerOffsetPath PASSED

kafka.api.SslConsumerTest > testCoordinatorFailover PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursiveWithControllerEpochVersionCheck PASSED

kafka.api.TransactionsTest > testDelayedFetchIncludesAbortedTransaction PASSED

kafka.zk.KafkaZkClientTest > testControllerManagementMethods PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsing PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.zk.KafkaZkClientTest > testTopicAssignmentMethods PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithFollowerThrottle PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroups PASSED

kafka.zk.KafkaZkClientTest > testPropagateIsrChanges PASSED

kafka.api.ConsumerBounceTest > testConsumerReceivesFatalExceptionWhenGroupPassesMaxSize PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElectionWithOfflinePreferredReplica PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.ProducerFailureHandlingTest > testInvalidPartition PASSED

kafka.server.ClientQuotaManagerTest > testClientIdQuotaParsing PASSED

kafka.zk.KafkaZkClientTest > testControllerEpochMethods PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursive PASSED

kafka.api.SslProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.zk.KafkaZkClientTest > testGetTopicPartitionStates PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.UserQuotaTest > testThrottledRequest PASSED

kafka.log.OffsetMapTest > testClear PASSED

kafka.log.OffsetMapTest > testGetWhenFull PASSED

kafka.log.OffsetMapTest > testBasicValidation PASSED

kafka.zk.KafkaZkClientTest > testCreateConfigChangeNotification PASSED

kafka.controller.TopicDeletionManagerTest > testBrokerFailureAfterDeletionStarted PASSED

kafka.controller.TopicDeletionManagerTest > testInitialization PASSED

kafka.controller.TopicDeletionManagerTest > testBasicDeletion PASSED

kafka.controller.TopicDeletionManagerTest > testDeletionWithBrokerOffline PASSED

kafka.server.GssapiAuthenticationTest > testServerAuthenticationFailure PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonOffsetCommitGroup PASSED

kafka.tools.ConsoleConsumerTest > shouldLimitReadsToMaxMessageLimit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseGroupIdFromBeginningGivenTogether PASSED

kafka.api.AdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnOffsetWithoutPartition PASSED

kafka.zk.KafkaZkClientTest > testDelegationTokenMethods PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSubsetOfPartitions PASSED

kafka.tools.ConsoleConsumerTest > shouldStopWhenOutputCheckErrorFails PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning PASSED

kafka.tools.ConsoleConsumerTest > shouldResetUnConsumedOffsetsBeforeExit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseConfigsFromFile PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetLatest PASSED

kafka.server.DynamicBrokerReconfigurationTest > testTrustStoreAlter PASSED

kafka.tools.ConsoleConsumerTest > groupIdsProvidedInDifferentPlacesMustMatch PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnGroupIdAndPartitionGivenTogether PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnUnrecognizedNewConsumerOption PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithNumericOffset PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetEarliest PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithStringOffset PASSED

kafka.tools.ConsoleConsumerTest > testCustomPropertyShouldBePassedToConfigureMethod PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerValidConfig PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithNoOffsetReset PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicSelectedGroups PASSED

kafka.api.TransactionsTest > testOffsetMetadataInSendOffsetsToTransaction PASSED

kafka.server.ClientQuotaManagerTest > testQuotaViolation PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnControlPlane PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInRevocation PASSED

kafka.api.ProducerFailureHandlingTest > testSendAfterClosed PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.api.SslConsumerTest > testSimpleConsumption PASSED

kafka.utils.JsonTest > testParseToWithInvalidJson PASSED

kafka.utils.JsonTest > testParseTo PASSED

kafka.utils.JsonTest > testJsonParse PASSED

kafka.utils.JsonTest > testLegacyEncodeAsString PASSED

kafka.utils.JsonTest > testEncodeAsBytes PASSED

kafka.utils.JsonTest > testEncodeAsString PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhileProducerFenced PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testCompleteTransitionWhenAppendSucceeded PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToUnknownError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldReturnNotCooridnatorErrorIfTransactionIdPartitionNotOwned PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testValidateTransactionTimeout PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedCommitState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldOnlyConsiderTransactionsInTheOngoingStateToAbort PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteAbortExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhilePendingStateChanged PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testLoadAndRemoveTransactionsForPartition PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareCommitTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorLoadingError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveOngoingTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAddGetPids PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedAbortState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveEmptyExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPendingStateNotResetOnRetryAppend PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveExpiredTransactionalIdsIfLogAppendFails PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareAbortTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteCommmitExpiredTransactionalIds PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.ClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonExistingGroup PASSED

kafka.server.ClientQuotaManagerTest > testRequestPercentageQuotaViolation PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithStaleBrokerEpoch PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckZero PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoPartitionsGiven PASSED

kafka.server.ClientQuotaManagerTest > testQuotaConfigPrecedence PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithAssign PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.server.ClientQuotaManagerTest > testExpireQuotaSensors PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testAcls PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.server.ClientQuotaManagerTest > testClientIdNotSanitized PASSED

kafka.api.ProducerFailureHandlingTest > testPartitionTooLargeForReplicationWithAckAll PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithExcludeInternal PASSED

kafka.api.TransactionsTest > testConsecutivelyRunInitTransactions PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithCorrectBrokerEpoch PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldSurviveFastLeaderChange PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForInvalidTopic PASSED

kafka.server.ClientQuotaManagerTest > testExpireThrottleTimeSensor PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.controller.ControllerIntegrationTest > testAutoPreferredReplicaLeaderElection PASSED

kafka.api.AdminClientIntegrationTest > testForceClose PASSED

kafka.server.BrokerEpochIntegrationTest > testReplicaManagerBrokerEpochMatchesWithZk PASSED

kafka.server.ClientQuotaManagerTest > testUserClientIdQuotaParsing PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToZonedDateTime PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithRoundRobinAssignor PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreation PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativePartitionCount PASSED

kafka.api.ConsumerBounceTest > testSubscribeWhenTopicUnavailable PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[0] PASSED

kafka.server.ClientQuotaManagerTest > testUserClientQuotaParsingIdWithDefaultClientIdQuota PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[0] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[0] PASSED

kafka.api.UserClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.AdminClientIntegrationTest > testListNodes PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicasAfterBrokerShutdown PASSED

kafka.utils.CoreUtilsTest > testGenerateUuidAsBase64 PASSED

kafka.utils.CoreUtilsTest > testAbs PASSED

kafka.utils.CoreUtilsTest > testReplaceSuffix PASSED

kafka.utils.CoreUtilsTest > testCircularIterator PASSED

kafka.utils.CoreUtilsTest > testReadBytes PASSED

kafka.utils.CoreUtilsTest > testCsvList PASSED

kafka.utils.CoreUtilsTest > testReadInt PASSED

kafka.utils.CoreUtilsTest > testAtomicGetOrUpdate PASSED

kafka.utils.CoreUtilsTest > testUrlSafeBase64EncodeUUID PASSED

kafka.utils.CoreUtilsTest > testCsvMap PASSED

kafka.utils.CoreUtilsTest > testInLock PASSED

kafka.utils.CoreUtilsTest > testTryAll PASSED

kafka.utils.CoreUtilsTest > testSwallow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerAfterEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testInitializeEpoch PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerId PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testBumpEpochNotAllowedIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInOngoingState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerNotAllowedIfItWouldOverflow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testNormalEpochBump PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfNonExistingGroup PASSED

kafka.server.DynamicBrokerReconfigurationTest > testUncleanLeaderElectionEnable PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicDeletion PASSED

kafka.server.BrokerEpochIntegrationTest > testControllerBrokerEpochCacheMatchesWithZk PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.server.DelayedFetchTest > testCompleteWhenFollowerLaggingHW PASSED

kafka.server.DelayedFetchTest > testFetchWithFencedEpoch PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWhenTopicDoesntExist PASSED

kafka.api.TransactionsTest > testReadCommittedConsumerShouldNotSeeUndecidedData PASSED

kafka.api.AdminClientIntegrationTest > testDelayedClose PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignment PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultipleBrokersGiven PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroupWithNoMembers PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentPartitionsOfDifferentSize PASSED

kafka.network.SocketServerTest > testGracefulClose PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.network.SocketServerTest > controlThrowable PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliest PASSED

kafka.network.SocketServerTest > testRequestMetricsAfterStop PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.AdminClientIntegrationTest > testLongTopicNames PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansion PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.network.SocketServerTest > testConnectionIdReuse PASSED

kafka.network.SocketServerTest > testClientDisconnectionUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testProcessorMetricsTags PASSED

kafka.server.ListOffsetsRequestTest > testListOffsetsErrorCodes PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testConnectionId PASSED

kafka.network.SocketServerTest > testBrokerSendAfterChannelClosedUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testNoOpAction PASSED

kafka.network.SocketServerTest > simpleRequest PASSED

kafka.network.SocketServerTest > closingChannelException PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeAllExistingGroups PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.api.TransactionsTest > testFencingOnSend PASSED

kafka.api.GroupEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.network.SocketServerTest > testIdleConnection PASSED

kafka.network.SocketServerTest > testClientDisconnectionWithStagedReceivesFullyProcessed PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.network.SocketServerTest > testZeroMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testMetricCollectionAfterShutdown PASSED

kafka.network.SocketServerTest > testSessionPrincipal PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.network.SocketServerTest > configureNewConnectionException PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIpOverrides PASSED

kafka.network.SocketServerTest > testControlPlaneRequest PASSED

kafka.api.ConsumerBounceTest > testRollingBrokerRestartsWithSmallerMaxGroupSizeConfigDisruptsBigGroup PASSED

kafka.api.ConsumerBounceTest > testConsumptionWithBrokerFailures SKIPPED

kafka.log.TimeIndexTest > testTruncate PASSED

kafka.log.TimeIndexTest > testEntry PASSED

kafka.log.TimeIndexTest > testAppend PASSED

kafka.log.TimeIndexTest > testEntryOverflow PASSED

kafka.log.TimeIndexTest > testLookUp PASSED

kafka.log.TimeIndexTest > testSanityCheck PASSED

kafka.api.AdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveIncrementsControllerEpoch PASSED

kafka.network.SocketServerTest > processNewResponseException PASSED

kafka.api.UserClientIdQuotaTest > testThrottledRequest PASSED

kafka.network.SocketServerTest > testConnectionRateLimit PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.network.SocketServerTest > processCompletedSendException PASSED

kafka.network.SocketServerTest > processDisconnectedException PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.network.SocketServerTest > sendCancelledKeyException PASSED

kafka.network.SocketServerTest > processCompletedReceiveException PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.network.SocketServerTest > testSocketsCloseOnShutdown PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionEnabled PASSED

kafka.controller.ControllerFailoverTest > testHandleIllegalStateException PASSED

kafka.tools.ReplicaVerificationToolTest > testReplicaBufferVerifyChecksum PASSED

kafka.server.ListOffsetsRequestTest > testCurrentEpochValidation PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerStickyAssignment PASSED

kafka.network.SocketServerTest > pollException PASSED

kafka.network.SocketServerTest > testSslSocketServer PASSED

kafka.network.SocketServerTest > tooBigRequestIsRejected PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandler PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithHeaders PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.api.TransactionsTest > testFencingOnCommit PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreAlter PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithConsumersWithoutAssignedPartitions PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.utils.ReplicationUtilsTest > testUpdateLeaderAndIsr PASSED

kafka.coordinator.group.MemberMetadataTest > testMatchesSupportedProtocols PASSED

kafka.coordinator.group.MemberMetadataTest > testHasValidGroupInstanceId PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadata PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadataRaisesOnUnsupportedProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteForPreferredProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteRaisesOnNoSupportedProtocols PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPartitionReassignment PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupWithShortInitializationTimeout PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.api.PlaintextConsumerTest > testPauseStateNotPreservedByRebalance PASSED

kafka.server.ListOffsetsRequestTest > testResponseIncludesLeaderEpoch PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldGetEpochsFromReplica PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnUnknownTopicOrPartitionIfThrown PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnNoLeaderForPartitionIfThrown PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[0] PASSED

kafka.api.AdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlan PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicCreation PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateAlterTopicWithRackAware PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursFetchSizeIfLargeRecordNotFirst PASSED

kafka.api.AdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreDescribeUsingAdminClient PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSslListener SKIPPED

kafka.controller.ControllerIntegrationTest > testControllerRejectControlledShutdownRequestWithStaleBrokerEpoch PASSED

kafka.api.TransactionsTest > testMultipleMarkersOneLeader PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithNoMembers PASSED

kafka.api.AuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochSecondTimeIfLeaderRepliesWithEpochNotKnownToFollower PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochOnFirstFetchOnlyIfLeaderEpochKnownToBoth PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToInitialFetchOffsetIfLeaderReturnsUndefinedOffset PASSED

kafka.api.ClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.api.PlaintextConsumerTest > testSeek PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.DescribeAuthorizedOperationsTest > testClusterAuthorizedOperations PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToSpecificOffset PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.AdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.controller.ControllerIntegrationTest > testBackToBackPreferredReplicaLeaderElections PASSED

kafka.api.ClientIdQuotaTest > testThrottledRequest PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArg PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseSingleArg PASSED

kafka.utils.CommandLineUtilsTest > testParseArgs PASSED

kafka.utils.CommandLineUtilsTest > testParseArgsWithMultipleDelimiters PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultValueIfNotExist PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgWithNoDelimiter PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgAsValid PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsNotOverwriteExisting PASSED

kafka.server.ReplicaFetcherThreadTest > shouldPollIndefinitelyIfLeaderReturnsAnyException PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponse PASSED

kafka.server.ReplicaFetcherThreadTest > shouldHandleExceptionFromBlockingSend PASSED

kafka.server.ReplicaFetcherThreadTest > shouldSendLatestRequestVersionsByDefault PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponseIfFollowerHasNoMoreEpochs PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochRequestIfLastEpochDefinedForSomePartitions PASSED

kafka.server.ReplicaFetcherThreadTest > shouldUseLeaderEndOffsetIfInterBrokerVersionBelow20 PASSED

kafka.server.ReplicaFetcherThreadTest > shouldMovePartitionsOutOfTruncatingLogState PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.server.ReplicaFetcherThreadTest > shouldCatchExceptionFromBlockingSendWhenShuttingDownReplicaFetcherThread PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFilterPartitionsMadeLeaderDuringLeaderEpochRequest PASSED

kafka.server.DynamicBrokerReconfigurationTest > testLogCleanerConfig PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.controller.ControllerIntegrationTest > testEmptyCluster PASSED

kafka.api.TransactionsTest > testCommitTransactionTimeout PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentTransactionExpiration PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentRandomSequences PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentLoadUnloadPartitions PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testTransactionalProducerWithAuthenticationFailure PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPreferredReplicaElection PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.api.AdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.DescribeAuthorizedOperationsTest > testTopicAuthorizedOperations PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[0] PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftPlus PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[1] PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElection PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithNullGroupId PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[1] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[1] PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAuthenticationFailure PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.TransactionsTest > testSendOffsets PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsExplicit PASSED

kafka.KafkaTest > testKafkaSslPasswordsWithSymbols PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsDefault PASSED

kafka.KafkaTest > testKafkaSslPasswords PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgs PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheEnd PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsOnly PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheBegging PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.admin.TopicCommandWithAdminClientTest > testTopicDeletion PASSED

kafka.api.DescribeAuthorizedOperationsTest > testConsumerGroupAuthorizedOperations PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommaSeparatedRegex PASSED

kafka.api.SaslPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.PlaintextConsumerTest > testPositionAndCommit PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.log.LogTest > testLogDelete PASSED

kafka.log.LogTest > testAbortedTransactionSpanningMultipleSegments PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndCleanShutdown PASSED

kafka.log.LogTest > testProducerIdMapTruncateFullyAndStartAt PASSED

kafka.log.LogTest > testAppendBelowExpectedOffsetThrowsException PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingTopic PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.log.LogTest > shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationSuccess PASSED

kafka.log.LogTest > testMultipleProducerIdsPerMemoryRecord PASSED

kafka.log.LogTest > testSplitOnOffsetOverflow PASSED

kafka.log.LogTest > testAppendWithNoTimestamp PASSED

kafka.log.LogTest > testFetchUpToHighWatermark PASSED

kafka.log.LogTest > testLastStableOffsetWithMixedProducerData PASSED

kafka.log.LogTest > testReadWithMinMessage PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnBrokerChange PASSED

kafka.log.LogTest > testIndexRebuild PASSED

kafka.log.LogTest > testZombieCoordinatorFencedEmptyTransaction PASSED

kafka.log.LogTest > testLogRolls PASSED

kafka.log.LogTest > testMessageSizeCheck PASSED

kafka.log.LogTest > testAsyncDelete PASSED

kafka.log.LogTest > testLogRollAfterLogHandlerClosed PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testFirstUnstableOffsetWithTransactionalData PASSED

kafka.log.LogTest > shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetAfterSegmentDeletion PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.log.LogTest > testAppendToTransactionIndexFailure PASSED

kafka.log.LogTest > testParseTopicPartitionNameForInvalidPartition PASSED

kafka.log.LogTest > testUpdateProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > testPeriodicProducerIdExpiration PASSED

kafka.log.LogTest > testReadOutOfRange PASSED

kafka.log.LogTest > testAppendWithOutOfOrderOffsetsThrowsException PASSED

kafka.log.LogTest > testProducerIdExpirationOnSegmentDeletion PASSED

kafka.log.LogTest > shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete PASSED

kafka.log.LogTest > testHighWatermarkMaintenance PASSED

kafka.log.LogTest > testFetchOffsetByTimestampIncludesLeaderEpoch PASSED

kafka.log.LogTest > testLogReinitializeAfterManualDelete PASSED

kafka.log.LogTest > testFirstUnstableOffsetNoTransactionalData PASSED

kafka.log.LogTest > testReadAtLogGap PASSED

kafka.log.LogTest > testSizeForLargeLogs PASSED

kafka.log.LogTest > testTimeBasedLogRoll PASSED

kafka.log.LogTest > testProducerIdMapOffsetUpdatedForNonIdempotentData PASSED

kafka.log.LogTest > testMultipleProducersWithDuplicatesInSingleAppend PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDynamicMessageFormatDowngrade PASSED

kafka.log.LogTest > testNonSequentialAppend PASSED

kafka.log.LogTest > testLoadEmptyLog PASSED

kafka.log.LogTest > testMessageSetSizeCheck PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDowngradeInAppendedMessages PASSED

kafka.log.LogTest > testRecoverOnlyLastSegment PASSED

kafka.log.LogTest > testIndexResizingAtTruncation PASSED

kafka.log.LogTest > testCompactedTopicConstraints PASSED

kafka.log.LogTest > followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache PASSED

kafka.log.LogTest > testRebuildTransactionalState PASSED

kafka.log.LogTest > testProducerIdMapTruncateToWithNoSnapshots PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecordV1 PASSED

kafka.log.LogTest > testDuplicateAppendToFollower PASSED

kafka.log.LogTest > testThatGarbageCollectingSegmentsDoesntChangeOffset PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndNoCleanShutdown PASSED

kafka.log.LogTest > testAppendAndReadWithSequentialOffsets PASSED

kafka.log.LogTest > testOffsetFromFile PASSED

kafka.log.LogTest > testProducerSnapshotAfterSegmentRollOnAppend PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase1 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase2 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase3 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase4 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase5 PASSED

kafka.log.LogTest > testFullTransactionIndexRecovery PASSED

kafka.log.LogTest > testAppendEmptyLogBelowLogStartOffsetThrowsException PASSED

kafka.log.LogTest > testDegenerateSegmentSplitWithOutOfRangeBatchLastOffset PASSED

kafka.log.LogTest > shouldDeleteSizeBasedSegments PASSED

kafka.log.LogTest > testRebuildProducerStateWithEmptyCompactedBatch PASSED

kafka.log.LogTest > testParseTopicPartitionNameForNull PASSED

kafka.log.LogTest > testLogDeletionAfterDeleteRecords PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsRemoveNonExistentTopics PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownCurrentMessageFormat PASSED

kafka.log.LogTest > testAppendAndReadWithNonSequentialOffsets PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog PASSED

kafka.log.LogTest > testDuplicateAppends PASSED

kafka.log.LogTest > testRollSegmentThatAlreadyExists PASSED

kafka.log.LogTest > testParseTopicPartitionNameForExistingInvalidDir PASSED

kafka.log.LogTest > testTruncateToEmptySegment PASSED

kafka.log.LogTest > testLoadPartitionDirWithNoSegmentsShouldNotThrow PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingSeparator PASSED

kafka.log.LogTest > testParseTopicPartitionNameWithPeriodForDeletedTopic PASSED

kafka.log.LogTest > testRecoverLastSegmentWithNoSnapshots PASSED

kafka.log.LogTest > testFetchUpToLastStableOffset PASSED

kafka.log.LogTest > testLeaderEpochCacheCreatedAfterMessageFormatUpgrade PASSED

kafka.log.LogTest > testFetchUpToLogEndOffset PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanMaxPartitionFetchBytes PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetMidSegment PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLatest PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.log.LogTest > testCorruptIndexRebuild PASSED

kafka.log.LogTest > shouldDeleteTimeBasedSegmentsReadyToBeDeleted PASSED

kafka.log.LogTest > testReadWithTooSmallMaxLength PASSED

kafka.log.LogTest > testOverCompactedLogRecovery PASSED

kafka.log.LogTest > testBogusIndexSegmentsAreRemoved PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterStaticMessageFormatDowngrade PASSED

kafka.log.LogTest > testCompressedMessages PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsThrowTimeoutException PASSED

kafka.log.LogTest > testAppendMessageWithNullPayload PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.log.LogTest > testCorruptLog PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testProducerWithAuthenticationFailure PASSED

kafka.log.LogTest > testLogRecoversToCorrectOffset PASSED

kafka.log.LogTest > testReopenThenTruncate PASSED

kafka.log.LogTest > testZombieCoordinatorFenced PASSED

kafka.log.LogTest > testOldProducerEpoch PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownV1 PASSED

kafka.log.LogTest > testDegenerateSegmentSplit PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingPartition PASSED

kafka.log.LogTest > testParseTopicPartitionNameForEmptyName PASSED

kafka.log.LogTest > testOffsetSnapshot PASSED

kafka.log.LogTest > testOpenDeletesObsoleteFiles PASSED

kafka.log.LogTest > shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testLogDeleteDirName PASSED

kafka.api.SaslPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.timer.TimerTest > testAlreadyExpiredTask PASSED

kafka.log.LogTest > testDeleteOldSegments PASSED

kafka.log.LogTest > testRebuildTimeIndexForOldMessages PASSED

kafka.log.LogTest > testProducerIdMapTruncateTo PASSED

kafka.log.LogTest > testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.log.LogTest > testLogEndLessThanStartAfterReopen PASSED

kafka.log.LogTest > testLogRecoversForLeaderEpoch PASSED

kafka.log.LogTest > testWriteLeaderEpochCheckpointAfterDirectoryRename PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecord PASSED

kafka.log.LogTest > testSizeBasedLogRoll PASSED

kafka.log.LogTest > testRebuildProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize PASSED

kafka.log.LogTest > testTransactionIndexUpdatedThroughReplication PASSED

kafka.log.LogTest > testTimeBasedLogRollJitter PASSED

kafka.log.LogTest > testParseTopicPartitionName PASSED

kafka.log.LogTest > testRecoveryOfSegmentWithOffsetOverflow PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsMidSegment PASSED

kafka.log.LogTest > testInitializationOfProducerSnapshotsUpgradePath PASSED

kafka.log.LogTest > shouldDeleteStartOffsetBreachedSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testSkipLoadingIfEmptyProducerStateBeforeTruncation PASSED

kafka.log.LogTest > testTruncateTo PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfNewMessageFormatAndCleanShutdown PASSED

kafka.api.PlaintextConsumerTest > testUnsubscribeTopic PASSED

kafka.log.LogTest > shouldApplyEpochToMessageOnAppendIfLeader PASSED

kafka.log.LogTest > testLogDeletionAfterClose PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsOnSegment PASSED

kafka.log.LogTest > testCleanShutdownFile PASSED

kafka.log.LogTest > testTransactionIndexUpdated PASSED

kafka.log.LogTest > testBuildTimeIndexWhenNotAssigningOffsets PASSED

kafka.common.InterBrokerSendThreadTest > shouldCreateClientRequestAndSendWhenNodeIsReady PASSED

kafka.common.InterBrokerSendThreadTest > testFailingExpiredRequests PASSED

kafka.common.InterBrokerSendThreadTest > shouldCallCompletionHandlerWithDisconnectedResponseWhenNodeNotReady PASSED

kafka.common.InterBrokerSendThreadTest > shouldNotSendAnythingWhenNoRequests PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.controller.ControllerEventManagerTest > testEventQueueTime PASSED

kafka.controller.ControllerEventManagerTest > testEventThatThrowsException PASSED

kafka.controller.ControllerEventManagerTest > testSuccessfulEvent PASSED

kafka.controller.ControllerEventManagerTest > testMetricsCleanedOnClose PASSED

kafka.tools.DumpLogSegmentsTest > testPrintDataLog PASSED

kafka.tools.DumpLogSegmentsTest > testDumpIndexMismatches PASSED

kafka.tools.DumpLogSegmentsTest > testDumpTimeIndexErrors PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationFailure PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.utils.timer.TimerTest > testTaskExpiration PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationForOfflineReplicas PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.ExtendedAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowFromEncodeOnLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowIfConstructedWithLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentTxnGoodPathSequence PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.AdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnClose PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.AdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaults PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByLowerThanEarliest PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentRandomSequence PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[1] PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanFetchMaxBytes PASSED

kafka.api.AdminClientIntegrationTest > testAclOperations PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testKafkaAdminClientWithAuthenticationFailure PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.api.AdminClientIntegrationTest > testDescribeCluster PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerWithAuthenticationFailure PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[0] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[1] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[2] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[3] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[4] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[5] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[6] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[7] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[8] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[9] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[10] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[11] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[12] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[13] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[14] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[15] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[16] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[17] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[18] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[19] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[20] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[21] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[22] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[23] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[24] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[25] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[26] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[27] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[28] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[29] PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerDefaultAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeReportOverriddenConfigs PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnClose PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndPartitionCount PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[1] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[2] PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.integration.UncleanLeaderElectionTest > testTopicUncleanLeaderElectionEnable PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[2] PASSED

kafka.api.PlaintextConsumerTest > testListTopics PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[2] PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicAllGroups PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.utils.timer.TimerTaskListTest > testAll PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithEmptyControlBatch PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithTombstones PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetCommitted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithoutGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupNotExists PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadEmptyGroupWithOffsets PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValue PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetCommitsFromMultipleProducers PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptySimpleGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetWithExplicitRetention PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetFromOldCommit PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testAddGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithLargeGroupMetadataRecord PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemovalWithLogAppendTime PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsTransactionWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetWriteAfterGroupRemoved PASSED

kafka.api.AuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetsWithoutGroup PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroupWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsConsumerWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testloadGroupWithStaticMember PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAborted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testMetrics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithNoneExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testReadFromOldGroupMetadata PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAppendFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationOfSimpleConsumer PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemoval PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithTombstone PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsAndGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadedWithPendingCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreGroupErrorMapping PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupAndOffsetsFromDifferentSegments PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationSemantics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireGroupWithOffsetsOnly PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testDoNotLoadAbortedTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptyGroup PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testClose PASSED

kafka.api.AdminClientIntegrationTest > testCreatePartitions PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.PlaintextConsumerTest > testExpandingTopicSubscriptions PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > offsetsShouldNotGoBackwards PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabled PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.api.AdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.PlaintextConsumerTest > testInterceptors PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.api.AdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDuration PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldFollowLeaderEpochBasicWorkflow PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithEmptyGroupId PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldReadWriteMessages PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldThrowExceptionWriteInvalidTxn PASSED

kafka.api.AuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.api.AdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.api.PlaintextConsumerTest > testPatternUnsubscription PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWithWrapAroundBatchRecord PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencing PASSED

kafka.log.ProducerStateManagerTest > testTruncate PASSED

kafka.log.ProducerStateManagerTest > testLoadFromTruncatedSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testRemoveExpiredPidsOnReload PASSED

kafka.log.ProducerStateManagerTest > testOutOfSequenceAfterControlRecordEpochBump PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterTruncation PASSED

kafka.log.ProducerStateManagerTest > testTakeSnapshot PASSED

kafka.log.ProducerStateManagerTest > testDeleteSnapshotsBefore PASSED

kafka.log.ProducerStateManagerTest > testAppendEmptyControlBatch PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterEviction PASSED

kafka.log.ProducerStateManagerTest > testNoValidationOnFirstEntryWhenLoadingLog PASSED

kafka.log.ProducerStateManagerTest > testLoadFromEmptySnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducersWithOngoingTransactionsDontExpire PASSED

kafka.log.ProducerStateManagerTest > testBasicIdMapping PASSED

kafka.log.ProducerStateManagerTest > updateProducerTransactionState PASSED

kafka.log.ProducerStateManagerTest > testRecoverFromSnapshot PASSED

kafka.log.ProducerStateManagerTest > testPrepareUpdateDoesNotMutate PASSED

kafka.log.ProducerStateManagerTest > testSequenceNotValidatedForGroupMetadataTopic PASSED

kafka.log.ProducerStateManagerTest > testLastStableOffsetCompletedTxn PASSED

kafka.log.ProducerStateManagerTest > testLoadFromSnapshotRemovesNonRetainedProducers PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffset PASSED

kafka.log.ProducerStateManagerTest > testTxnFirstOffsetMetadataCached PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencedAfterReload PASSED

kafka.log.ProducerStateManagerTest > testControlRecordBumpsEpoch PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithoutProducerStateOnReplica PASSED

kafka.log.ProducerStateManagerTest > testLoadFromCorruptSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWrapAround PASSED

kafka.log.ProducerStateManagerTest > testPidExpirationTimeout PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithSequenceGapsOnReplica PASSED

kafka.log.ProducerStateManagerTest > testAppendTxnMarkerWithNoProducerState PASSED

kafka.log.ProducerStateManagerTest > testOldEpochForControlRecord PASSED

kafka.log.ProducerStateManagerTest > testTruncateAndReloadRemovesOutOfRangeSnapshots PASSED

kafka.log.ProducerStateManagerTest > testStartOffset PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceInvalidWrapAround PASSED

kafka.log.ProducerStateManagerTest > testTruncateHead PASSED

kafka.log.ProducerStateManagerTest > testNonTransactionalAppendWithOngoingTransaction PASSED

kafka.log.ProducerStateManagerTest > testSkipSnapshotIfOffsetUnchanged PASSED

kafka.cluster.PartitionTest > testMakeLeaderDoesNotUpdateEpochCacheForOldFormats PASSED

kafka.cluster.PartitionTest > testIsrExpansion PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testIsrNotShrunkIfUpdateFails PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testIsrNotExpandedIfUpdateFails PASSED

kafka.cluster.PartitionTest > testAddAndRemoveMetrics PASSED

kafka.cluster.PartitionTest > testListOffsetIsolationLevels PASSED

kafka.cluster.PartitionTest > testAppendRecordsAsFollowerBelowLogStartOffset PASSED

kafka.cluster.PartitionTest > testFetchLatestOffsetIncludesLeaderEpoch PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeShrinkIsr PASSED

kafka.cluster.PartitionTest > testMonotonicOffsetsAfterLeaderChange PASSED

kafka.cluster.PartitionTest > testMakeFollowerWithNoLeaderIdChange PASSED

kafka.cluster.PartitionTest > testAppendRecordsToFollowerWithNoReplicaThrowsException PASSED

kafka.cluster.PartitionTest > testFollowerDoesNotJoinISRUntilCaughtUpToOffsetWithinCurrentLeaderEpoch PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfFollowerCaughtUpToLogEnd PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testAtMinIsr PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForFollower PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[2] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.api.AuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.cluster.PartitionTest > testDelayedFetchAfterAppendRecords PASSED

kafka.cluster.PartitionTest > testMakeLeaderUpdatesEpochCache PASSED

kafka.cluster.PartitionTest > testUseCheckpointToInitializeHighWatermark PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplicaDifferentBaseOffsets PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfPreviousFetchIsCaughtUp PASSED

kafka.cluster.PartitionTest > testGetReplica PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplica PASSED

kafka.cluster.PartitionTest > testUpdateFollowerFetchState PASSED

kafka.api.PlaintextConsumerTest > testGroupConsumption PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.utils.TopicFilterTest > testWhitelists PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testExceedProducerIdLimit PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testGetProducerId PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLocalDateTime PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.api.PlaintextConsumerTest > testPartitionsFor PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabled PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionInvalidTopicOverride PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnRebalance PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.api.PlaintextConsumerTest > testInterceptorsWithWrongKeyValue PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabledByTopicOverride PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadWithMaxPollRecords PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[2] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[3] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[3] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[3] PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testHeaders PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithWhitelist PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.api.AdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.PlaintextConsumerTest > testHeadersSerializerDeserializer PASSED

kafka.api.AdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.api.PlaintextConsumerTest > testDeprecatedPollBlocksForAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.AdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabledByTopicOverride PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMoreAssignmentThanPartitions PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[3] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.AdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testForceClose PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerRoundRobinAssignment PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.api.AdminClientIntegrationTest > testConsumerGroups PASSED

kafka.api.PlaintextConsumerTest > testPartitionPauseAndResume PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testListNodes PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsAllTopicsAllGroups PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.PlaintextConsumerTest > testQuotaMetricsNotCreatedIfNoQuotasConfigured PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.log.LogManagerTest > testFileReferencesAfterAsyncDelete PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.log.LogManagerTest > testCreateLogWithLogDirFallback PASSED

kafka.log.LogManagerTest > testCleanupSegmentsToMaintainSize PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithRelativeDirectory PASSED

kafka.log.LogManagerTest > testCreateLogWithInvalidLogDir PASSED

kafka.log.LogManagerTest > testGetNonExistentLog PASSED

kafka.log.LogManagerTest > testTwoLogManagersUsingSameDirFails PASSED

kafka.log.LogManagerTest > testLeastLoadedAssignment PASSED

kafka.log.LogManagerTest > testCleanupExpiredSegments PASSED

kafka.log.LogManagerTest > testCheckpointRecoveryPoints PASSED

kafka.log.LogManagerTest > testCheckpointForOnlyAffectedLogs PASSED

kafka.log.LogManagerTest > testTimeBasedFlush PASSED

kafka.log.LogManagerTest > testCreateLog PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactPolicy PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithTrailingSlash PASSED

kafka.log.LogManagerTest > testCreateAndDeleteOverlyLongTopic PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactDeletePolicy PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testProcessNotification PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDelayedClose PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testSwallowsProcessorException PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[3] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[4] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[4] PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithSubscribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithLogAppendTime PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopicsAndPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLongTopicNames PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsWhenReadCommitted PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnCloseAfterWakeup PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.api.PlaintextConsumerTest > testMaxPollRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopics PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.PlaintextConsumerTest > testAutoOffsetReset PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[4] PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagWithMaxPollRecords PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopics PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceMultiplePartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceSinglePartition PASSED

kafka.server.ThrottledChannelExpirationTest > testThrottledChannelDelay PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.server.ThrottledChannelExpirationTest > testCallbackInvocationAfterExpiration PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.api.PlaintextConsumerTest > testFetchInvalidOffset PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.integration.MetricsDuringTopicCreationDeletionTest > testMetricsDuringTopicCreateDelete PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteInternalTopic PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithLogAppendTime PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitIntercept PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.api.PlaintextProducerSendTest > testAutoCreateTopic PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursMaxPartitionFetchBytesIfLargeRecordNotFirst PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.PlaintextProducerSendTest > testSendWithInvalidCreateTime PASSED

kafka.admin.TopicCommandWithAdminClientTest > testInvalidTopicLevelConfig PASSED

kafka.api.PlaintextConsumerTest > testCommitSpecifiedOffsets PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.api.PlaintextProducerSendTest > testBatchSizeZero PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.api.PlaintextProducerSendTest > testWrongSerializer PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithSubscribe PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithLogAppendTime PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.PlaintextConsumerTest > testCommitMetadata PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.api.PlaintextConsumerTest > testHeadersExtendedSerializerDeserializer PASSED

kafka.api.PlaintextProducerSendTest > testClose PASSED

kafka.api.PlaintextProducerSendTest > testFlush PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMorePartitionsThanAssignment PASSED

kafka.api.PlaintextConsumerTest > testRoundRobinAssignment PASSED

kafka.api.PlaintextProducerSendTest > testSendToPartition PASSED

kafka.api.PlaintextProducerSendTest > testSendOffset PASSED

kafka.api.AuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.api.PlaintextConsumerTest > testPatternSubscription PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.api.PlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.api.PlaintextConsumerTest > testSimpleConsumption PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionLastIsrShuttingDown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithNoLiveIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithEmptyIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionAllIsrSimultaneouslyShutdown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionEnabled PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionDisabled PASSED

kafka.tools.ConsoleProducerTest > testParseKeyProp PASSED

kafka.tools.ConsoleProducerTest > testInvalidConfigs PASSED

kafka.tools.ConsoleProducerTest > testValidConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.api.PlaintextProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.log.LogCleanerManagerTest > testUndecidedTransactionalDataNotCleanable PASSED

kafka.log.LogCleanerManagerTest > testLogsUnderCleanupIneligibleForCompaction PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresInProgressPartitions PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForNone PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactLogs PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndLogTruncation PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderCleanupPolicyDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndTopicDeletion PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForShortTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogReturnsLogWithDirtiestRatio PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresBothInProgressPartitionsAndUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testDoneCleaning PASSED

kafka.log.LogCleanerManagerTest > testDoneDeleting PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeCluster PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderReplicatedPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreatePartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnavailablePartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithUnspecifiedReplicationFactorAndPartitionsWithZkClient PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.admin.TopicCommandWithAdminClientTest > testIfExistsAndIfNotExistsOptionsInvalidWithBootstrapServers PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.SchedulerTest > testMockSchedulerNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testUnscheduleProducerTask PASSED

kafka.utils.SchedulerTest > testMockSchedulerPeriodicTask PASSED

kafka.utils.SchedulerTest > testNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testRestart PASSED

kafka.utils.SchedulerTest > testReentrantTaskInMockScheduler PASSED

kafka.utils.SchedulerTest > testPeriodicTask PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyProtocolType PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoinedFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteNonEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForStaticMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRebalanceCompletesBeforeMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberHeartbeatLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersWrongCoordinatorBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupStaticMemberWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupRebalancing PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailureInSyncGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testGenerationIdIncrementsOnRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSecondJoinInconsistentProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersValidBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsLeaderWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithExplicitUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForDynamicMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetsRetentionMsIntegerOverflow PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesStableGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatDuringRebalanceCausesRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSingleLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsMultipleProducersOneGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSecondMemberPartiallyJoinAndTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberCommitOffsetWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooLarge PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooSmall PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupEmptyAssignment PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupShouldReceiveErrorIfGroupOverMaxSize PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetWithDefaultGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchAllOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedLeaderShouldRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalArgumentAsMissingOldMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberTimesOut PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesRebalancingGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFollowerAfterLeader PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroupWithStoredOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetsAfterGroupIsEmpty PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetForUnknownPartition PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitAndFetchOffsetsWithEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentProtocolType PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsOneProducerMultipleGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownGroupBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalStateAsUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldGetDifferentStaticMemberIdAfterEachRejoin PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetFromUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWithFencedInstanceId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinAsFirstMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetNotCoordinatorForGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetCommitDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberLeaveWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithUnknownInstanceIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberSyncAsLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBatchLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedFollowerDoesNotRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidJoinGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayRebalanceUptoRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeoutDuringRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithFollowerIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testNewMemberJoinExpiration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsWithAbort PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupLeaderAfterFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupInactiveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsIgnoreSpuriousCommit PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMembersLeavesGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupNotCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBasicFetchTxnOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersFencedInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidHeartbeat PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRequestHandlingWhileLoadingInProgress PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndReplicationFactor PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithReplicaAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithInvalidPartitionCount PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumerGroups PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.utils.LoggingTest > testLog4jControllerIsRegistered PASSED

kafka.utils.LoggingTest > testLogName PASSED

kafka.utils.LoggingTest > testLogNameOverride PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotLeaderForPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRemoveTopicPartitionFromWaitingSetOnUnsupportedForMessageFormat PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenRecordListTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenInvalidProducerEpoch PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenInvalidRequiredAcksError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldReEnqueuePartitionsWhenBrokerDisconnected PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNoErrors PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenCorruptMessageError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorLoading PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWheCoordinatorEpochFenced PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenUnknownError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorEpochChanged PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenUnknownTopicOrPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasAfterAppendError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenMessageTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionIfErrorCodeNotAvailableForPid PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreate PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.ShutdownableThreadTest > testShutdownWhenCalledAfterThreadStart PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSaveForLaterWhenLeaderUnknownButNotAvailable PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateEmptyMapWhenNoRequestsOutstanding PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCreateMetricsOnStarting PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldAbortAppendToLogOnEndTxnWhenNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRetryAppendToLogOnEndTxnWhenCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCompleteAppendToLogOnEndTxnWhenSendMarkersSucceed PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateRequestPerPartitionPerBroker PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRemoveMarkersForTxnPartitionWhenPartitionEmigrated PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSkipSendMarkersWhenLeaderNotFound PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitionsMixed PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigOptWithBootstrapServers PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithUnspecifiedPartitionCount PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteIfExists PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldNotAllowDivergentLogs PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribe PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > logsShouldNotDivergeOnUncleanLeaderElections PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignment PASSED

kafka.server.ReplicationQuotaManagerTest > shouldThrottleOnlyDefinedReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldSupportWildcardThrottledReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldExceedQuotaThenReturnBackBelowBoundAsTimePasses PASSED

kafka.server.AbstractFetcherManagerTest > testAddAndRemovePartition PASSED

kafka.server.AbstractFetcherManagerTest > testMetricFailedPartitionCount PASSED

kafka.api.ApiVersionTest > testApiVersionUniqueIds PASSED

kafka.api.ApiVersionTest > testMinSupportedVersionFor PASSED

kafka.api.ApiVersionTest > testShortVersion PASSED

kafka.api.ApiVersionTest > testApply PASSED

kafka.api.ApiVersionTest > testApiVersionValidator PASSED

kafka.log.OffsetIndexTest > lookupExtremeCases PASSED

kafka.log.OffsetIndexTest > appendTooMany PASSED

kafka.log.OffsetIndexTest > testEntry PASSED

kafka.log.OffsetIndexTest > testSanityLastOffsetEqualToBaseOffset PASSED

kafka.log.OffsetIndexTest > forceUnmapTest PASSED

kafka.log.OffsetIndexTest > testFetchUpperBoundOffset PASSED

kafka.log.OffsetIndexTest > randomLookupTest PASSED

kafka.log.OffsetIndexTest > testEntryOverflow PASSED

kafka.log.OffsetIndexTest > testReopen PASSED

kafka.log.OffsetIndexTest > appendOutOfOrder PASSED

kafka.log.OffsetIndexTest > truncate PASSED

kafka.api.SaslSslConsumerTest > testCoordinatorFailover PASSED

kafka.api.SaslSslConsumerTest > testSimpleConsumption PASSED

kafka.log.LogCleanerTest > testCleanCorruptMessageSet PASSED

kafka.log.LogCleanerTest > testAbortedTransactionSpanningSegments PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsLastSequenceEvenIfTransactionAborted PASSED

kafka.log.LogCleanerTest > testBuildOffsetMap PASSED

kafka.log.LogCleanerTest > testAbortMarkerRemoval PASSED

kafka.log.LogCleanerTest > testBuildOffsetMapFakeLarge PASSED

kafka.log.LogCleanerTest > testSegmentGrouping PASSED

kafka.log.LogCleanerTest > testCorruptMessageSizeLargerThanBytesAvailable PASSED

kafka.log.LogCleanerTest > testSizeTrimmedForPreallocatedAndCompactedTopic PASSED

kafka.log.LogCleanerTest > testCommitMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsProducerLastSequence PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithAbort PASSED

kafka.log.LogCleanerTest > testDeletedBatchesWithNoMessagesRead PASSED

kafka.log.LogCleanerTest > testSegmentGroupingWithSparseOffsets PASSED

kafka.log.LogCleanerTest > testLargeMessage PASSED

kafka.log.LogCleanerTest > testCleanEmptyControlBatch PASSED

kafka.log.LogCleanerTest > testRecoveryAfterCrash PASSED

kafka.log.LogCleanerTest > testCleanTombstone PASSED

kafka.log.LogCleanerTest > testDuplicateCheckAfterCleaning PASSED

kafka.log.LogCleanerTest > testAbortMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testCleaningWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testLogToClean PASSED

kafka.log.LogCleanerTest > testCleaningWithDeletes PASSED

kafka.log.LogCleanerTest > testClientHandlingOfCorruptMessageSet PASSED

kafka.log.LogCleanerTest > testCleanWithTransactionsSpanningSegments PASSED

kafka.log.LogCleanerTest > testEmptyBatchRemovalWithSequenceReuse PASSED

kafka.log.LogCleanerTest > testCommittedTransactionSpanningSegments PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSize PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSizeWithCorruptHeader PASSED

kafka.log.LogCleanerTest > testCleanSegments PASSED

kafka.log.LogCleanerTest > testBasicTransactionAwareCleaning PASSED

kafka.log.LogCleanerTest > testSegmentGroupingFollowingLoadOfZeroIndex PASSED

kafka.log.LogCleanerTest > testLogToCleanWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testBuildPartialOffsetMap PASSED

kafka.log.LogCleanerTest > testCleaningWithUnkeyedMessages PASSED

kafka.log.LogCleanerTest > testSegmentWithOffsetOverflow PASSED

kafka.log.LogCleanerTest > testPartialSegmentClean PASSED

kafka.log.LogCleanerTest > testCommitMarkerRemoval PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithConcurrentSegmentDeletion PASSED

kafka.cluster.BrokerEndPointTest > testEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testHashAndEquals PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNoRack PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonFutureVersion PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNullRack PASSED

kafka.cluster.BrokerEndPointTest > testBrokerEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV1 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV2 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV3 PASSED

> Task :kafka:core:test FAILED
> Task :testScala_2_12 FAILED
> Task :kafka:generator:compileJava UP-TO-DATE
> Task :kafka:generator:processResources NO-SOURCE
> Task :kafka:generator:classes UP-TO-DATE
> Task :kafka:clients:processMessages UP-TO-DATE
> Task :kafka:clients:compileJava UP-TO-DATE
> Task :kafka:clients:processResources UP-TO-DATE
> Task :kafka:clients:classes UP-TO-DATE
> Task :kafka:clients:determineCommitId UP-TO-DATE
> Task :kafka:clients:createVersionFile
> Task :kafka:clients:jar UP-TO-DATE
> Task :kafka:clients:compileTestJava UP-TO-DATE
> Task :kafka:clients:processTestResources UP-TO-DATE
> Task :kafka:clients:testClasses UP-TO-DATE
> Task :kafka:core:compileJava NO-SOURCE

> Task :kafka:core:compileScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `withAdminClient`'s return type
    private def withAdminClient(opts: AclCommandOptions)(f: Admin => Unit) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:188: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `withAuthorizer`'s return type
    private def withAuthorizer()(f: Authorizer => Unit) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:261: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeAcls`'s return type
    private def removeAcls(authorizer: Authorizer, acls: Set[Acl], filter: ResourcePatternFilter) {
                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:576: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      override def run() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `awaitBrokers`'s return type
    def awaitBrokers() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:195: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `alterConfig`'s return type
  private[admin] def alterConfig(zkClient: KafkaZkClient, opts: ConfigCommandOptions, adminZkClient: AdminZkClient) {
                                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `preProcessScramCredentials`'s return type
  private def preProcessScramCredentials(configsToBeAdded: Properties) {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `preProcessBrokerConfigs`'s return type
  private def preProcessBrokerConfigs(configsToBeAdded: Properties, perBrokerConfig: Boolean) {
                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:224: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `describeConfig`'s return type
  private def describeConfig(zkClient: KafkaZkClient, opts: ConfigCommandOptions, adminZkClient: AdminZkClient) {
                                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:297: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `alterBrokerConfig`'s return type
                                       entityType: String, entityName: String) {
                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:342: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `describeBrokerConfig`'s return type
                                   entityType: String, entityName: String) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:540: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:524: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:923: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/DelegationTokenCommand.scala:199: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/PreferredReplicaLeaderElectionCommand.scala:108: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writePreferredReplicaElectionData`'s return type
                                        partitionsUndergoingPreferredReplicaElection: Set[TopicPartition]) {
                                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/PreferredReplicaLeaderElectionCommand.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `electPreferredLeaders`'s return type
    override def electPreferredLeaders(partitionsFromUser: Option[Set[TopicPartition]]) {
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:87: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyAssignment`'s return type
  def verifyAssignment(zkClient: KafkaZkClient, adminClientOpt: Option[Admin], opts: ReassignPartitionsCommandOptions) {
                                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:163: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `generateAssignment`'s return type
  def generateAssignment(zkClient: KafkaZkClient, opts: ReassignPartitionsCommandOptions) {
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:199: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `executeAssignment`'s return type
  def executeAssignment(zkClient: KafkaZkClient, adminClientOpt: Option[Admin], opts: ReassignPartitionsCommandOptions) {
                                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:208: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `executeAssignment`'s return type
  def executeAssignment(zkClient: KafkaZkClient, adminClientOpt: Option[Admin], reassignmentJsonString: String, throttle: Throttle, timeoutMs: Long = 10000L) {
                                                                                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:534: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeLimit`'s return type
  def maybeLimit(throttle: Throttle) {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:196: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `createTopic`'s return type
    def createTopic(topic: CommandTopicPartition)
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:197: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `listTopics`'s return type
    def listTopics(opts: TopicCommandOptions)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:198: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `alterTopic`'s return type
    def alterTopic(opts: TopicCommandOptions)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:199: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `describeTopic`'s return type
    def describeTopic(opts: TopicCommandOptions)
                                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:200: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `deleteTopic`'s return type
    def deleteTopic(opts: TopicCommandOptions)
                                              ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:652: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkArgs`'s return type
    def checkArgs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  def run(args: Array[String]) {
                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:102: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processResult`'s return type
                      children: java.util.List[String]) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:196: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processResult`'s return type
                      stat: Stat) {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/api/ApiUtils.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeShortString`'s return type
  def writeShortString(buffer: ByteBuffer, string: String) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:416: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeFutureLocalReplica`'s return type
  def removeFutureLocalReplica(deleteFromLogDir: Boolean = true) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:453: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `delete`'s return type
  def delete() {
               ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:1079: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateTo`'s return type
  def truncateTo(offset: Long, isFuture: Boolean) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:1093: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateFullyAndStartAt`'s return type
  def truncateFullyAndStartAt(newOffset: Long, isFuture: Boolean) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/common/Config.scala:26: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateChars`'s return type
  def validateChars(prop: String, value: String) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/common/InterBrokerSendThread.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
  override def doWork() {
                        ^
/mydata/kafka/core/src/main/scala/kafka/common/MessageFormatter.scala:33: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  def init(props: Properties) {}
                              ^
/mydata/kafka/core/src/main/scala/kafka/common/MessageFormatter.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {}
              ^
/mydata/kafka/core/src/main/scala/kafka/common/MessageReader.scala:33: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  def init(inputStream: InputStream, props: Properties) {}
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/common/MessageReader.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {}
              ^
/mydata/kafka/core/src/main/scala/kafka/common/ZkNodeChangeNotificationListener.scala:35: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `processNotification`'s return type
  def processNotification(notificationMessage: Array[Byte])
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/common/ZkNodeChangeNotificationListener.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  def init() {
             ^
/mydata/kafka/core/src/main/scala/kafka/common/ZkNodeChangeNotificationListener.scala:81: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processNotifications`'s return type
  private def processNotifications() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/common/ZkNodeChangeNotificationListener.scala:129: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `purgeObsoleteNotifications`'s return type
  private def purgeObsoleteNotifications(now: Long, notifications: Seq[String]) {
                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:84: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRequest`'s return type
                  callback: AbstractResponse => Unit = null) {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:96: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addBroker`'s return type
  def addBroker(broker: Broker) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeBroker`'s return type
  def removeBroker(brokerId: Int) {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addNewBroker`'s return type
  private def addNewBroker(broker: Broker) {
                                           ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeExistingBroker`'s return type
  private def removeExistingBroker(brokerState: ControllerBrokerStateInfo) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:209: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startRequestSendThread`'s return type
  protected def startRequestSendThread(brokerId: Int) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:355: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `newBatch`'s return type
  def newBatch() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:369: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `clear`'s return type
  def clear() {
              ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:410: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateMetadataRequestPartitionInfo`'s return type
    def updateMetadataRequestPartitionInfo(partition: TopicPartition, beingDeleted: Boolean) {
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerContext.scala:102: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setLiveBrokerAndEpochs`'s return type
  def setLiveBrokerAndEpochs(brokerAndEpochs: Map[Broker, Long]) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:242: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onControllerFailover`'s return type
  private def onControllerFailover() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:303: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onControllerResignation`'s return type
  private def onControllerResignation() {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:346: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onBrokerLogDirFailure`'s return type
  private def onBrokerLogDirFailure(brokerIds: Seq[Int]) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:367: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onBrokerStartup`'s return type
  private def onBrokerStartup(newBrokers: Seq[Int]) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:423: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onBrokerFailure`'s return type
  private def onBrokerFailure(deadBrokers: Seq[Int]) {
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:436: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onBrokerUpdate`'s return type
  private def onBrokerUpdate(updatedBrokerId: Int) {
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:488: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onNewPartitionCreation`'s return type
  private def onNewPartitionCreation(newPartitions: Set[TopicPartition]) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:541: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionReassignment`'s return type
  private def onPartitionReassignment(topicPartition: TopicPartition, reassignedPartitionContext: ReassignedPartitionsContext) {
                                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:593: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeTriggerPartitionReassignment`'s return type
  private def maybeTriggerPartitionReassignment(topicPartitions: Set[TopicPartition]) {
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:690: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initializeControllerContext`'s return type
  private def initializeControllerContext() {
                                            ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:734: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initializePartitionReassignment`'s return type
  private def initializePartitionReassignment() {
                                                ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:758: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateLeaderAndIsrCache`'s return type
  private def updateLeaderAndIsrCache(partitions: Seq[TopicPartition] = controllerContext.allPartitions.toSeq) {
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:772: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `moveReassignedPartitionLeaderIfRequired`'s return type
                                                      reassignedPartitionContext: ReassignedPartitionsContext) {
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:801: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `stopOldReplicasOfReassignedPartition`'s return type
                                                   oldReplicas: Set[Int]) {
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:813: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateAssignedReplicasForPartition`'s return type
                                                 replicas: Seq[Int]) {
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:828: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startNewReplicasForReassignedPartition`'s return type
                                                     newReplicas: Set[Int]) {
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:836: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateLeaderEpochAndSendRequest`'s return type
  private def updateLeaderEpochAndSendRequest(partition: TopicPartition, replicasToReceiveRequest: Seq[Int], newAssignedReplicas: Seq[Int]) {
                                                                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:872: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregisterPartitionReassignmentIsrChangeHandlers`'s return type
  private def unregisterPartitionReassignmentIsrChangeHandlers() {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:884: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removePartitionsFromReassignedPartitions`'s return type
  private def removePartitionsFromReassignedPartitions(partitionsToBeRemoved: Set[TopicPartition]) {
                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:911: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removePartitionsFromPreferredReplicaElection`'s return type
                                                           isTriggeredByAutoRebalance : Boolean) {
                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:936: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendUpdateMetadataRequest`'s return type
  private[controller] def sendUpdateMetadataRequest(brokers: Seq[Int], partitions: Set[TopicPartition]) {
                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1474: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processUpdateNotifications`'s return type
    def processUpdateNotifications(partitions: Seq[TopicPartition]) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/PartitionStateMachine.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/controller/PartitionStateMachine.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/PartitionStateMachine.scala:82: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initializePartitionState`'s return type
  private def initializePartitionState() {
                                         ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:57: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initializeReplicaState`'s return type
  private def initializeReplicaState() {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:120: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `enqueueTopicsForDeletion`'s return type
  def enqueueTopicsForDeletion(topics: Set[String]) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `resumeDeletionForTopics`'s return type
  def resumeDeletionForTopics(topics: Set[String] = Set.empty) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:150: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `failReplicaDeletion`'s return type
  def failReplicaDeletion(replicas: Set[PartitionAndReplica]) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:205: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `completeReplicaDeletion`'s return type
  def completeReplicaDeletion(replicas: Set[PartitionAndReplica]) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:238: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `completeDeleteTopic`'s return type
  private def completeDeleteTopic(topic: String) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:258: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onTopicDeletion`'s return type
  private def onTopicDeletion(topics: Set[String]) {
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:294: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startReplicaDeletion`'s return type
  private def startReplicaDeletion(replicasForTopicsToBeDeleted: Set[PartitionAndReplica]) {
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:324: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionDeletion`'s return type
  private def onPartitionDeletion(partitionsToBeDeleted: Set[TopicPartition]) {
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup(enableMetadataExpiration: Boolean = true) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:97: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:245: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doJoinGroup`'s return type
                          responseCallback: JoinCallback) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:361: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doSyncGroup`'s return type
                          responseCallback: SyncCallback) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:427: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLeaveGroup`'s return type
                       responseCallback: LeaveGroupResult => Unit) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:526: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleHeartbeat`'s return type
                      responseCallback: Errors => Unit) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:599: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleCommitOffsets`'s return type
                          responseCallback: immutable.Map[TopicPartition, Errors] => Unit) {
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:624: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `scheduleHandleTxnCompletion`'s return type
                                  transactionResult: TransactionResult) {
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:637: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doCommitOffsets`'s return type
                              responseCallback: immutable.Map[TopicPartition, Errors] => Unit) {
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:713: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleDeletedPartitions`'s return type
  def handleDeletedPartitions(topicPartitions: Seq[TopicPartition]) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:748: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onGroupUnloaded`'s return type
  private def onGroupUnloaded(group: GroupMetadata) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:772: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onGroupLoaded`'s return type
  private def onGroupLoaded(group: GroupMetadata) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:784: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleGroupImmigration`'s return type
  def handleGroupImmigration(offsetTopicPartitionId: Int) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:788: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleGroupEmigration`'s return type
  def handleGroupEmigration(offsetTopicPartitionId: Int) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:792: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setAndPropagateAssignment`'s return type
  private def setAndPropagateAssignment(group: GroupMetadata, assignment: Map[String, Array[Byte]]) {
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:798: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `resetAndPropagateAssignmentError`'s return type
  private def resetAndPropagateAssignmentError(group: GroupMetadata, error: Errors) {
                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:804: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `propagateAssignment`'s return type
  private def propagateAssignment(group: GroupMetadata, error: Errors) {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:819: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `completeAndScheduleNextHeartbeatExpiration`'s return type
  private def completeAndScheduleNextHeartbeatExpiration(group: GroupMetadata, member: MemberMetadata) {
                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:823: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `completeAndScheduleNextExpiration`'s return type
  private def completeAndScheduleNextExpiration(group: GroupMetadata, member: MemberMetadata, timeoutMs: Long) {
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:838: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addPendingMemberExpiration`'s return type
  private def addPendingMemberExpiration(group: GroupMetadata, pendingMemberId: String, timeoutMs: Long) {
                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:845: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeHeartbeatForLeavingMember`'s return type
  private def removeHeartbeatForLeavingMember(group: GroupMetadata, member: MemberMetadata) {
                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:860: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addMemberAndRebalance`'s return type
                                    callback: JoinCallback) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:891: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateMemberAndRebalance`'s return type
                                       callback: JoinCallback) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:896: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybePrepareRebalance`'s return type
  private def maybePrepareRebalance(group: GroupMetadata, reason: String) {
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:903: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `prepareRebalance`'s return type
  private def prepareRebalance(group: GroupMetadata, reason: String) {
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:927: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeMemberAndUpdateGroup`'s return type
  private def removeMemberAndUpdateGroup(group: GroupMetadata, member: MemberMetadata, reason: String) {
                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:943: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removePendingMemberAndUpdateGroup`'s return type
  private def removePendingMemberAndUpdateGroup(group: GroupMetadata, memberId: String) {
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:959: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpireJoin`'s return type
  def onExpireJoin() {
                     ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:963: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompleteJoin`'s return type
  def onCompleteJoin(group: GroupMetadata) {
                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:1041: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpireHeartbeat`'s return type
  def onExpireHeartbeat(group: GroupMetadata, memberId: String, isPending: Boolean, heartbeatDeadline: Long) {
                                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:1058: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompleteHeartbeat`'s return type
  def onCompleteHeartbeat() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:222: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `add`'s return type
  def add(member: MemberMetadata, callback: JoinCallback = null) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:239: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `remove`'s return type
  def remove(memberId: String) {
                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:390: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `transitionTo`'s return type
  def transitionTo(groupState: GroupState) {
                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:507: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initializeOffsets`'s return type
                        pendingTxnOffsets: Map[Long, mutable.Map[TopicPartition, CommitRecordMetadataAndOffset]]) {
                                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:512: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onOffsetCommitAppend`'s return type
  def onOffsetCommitAppend(topicPartition: TopicPartition, offsetWithCommitRecordMetadata: CommitRecordMetadataAndOffset) {
                                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:537: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `prepareOffsetCommit`'s return type
  def prepareOffsetCommit(offsets: Map[TopicPartition, OffsetAndMetadata]) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:542: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `prepareTxnOffsetCommit`'s return type
  def prepareTxnOffsetCommit(producerId: Long, offsets: Map[TopicPartition, OffsetAndMetadata]) {
                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:574: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onTxnOffsetCommitAppend`'s return type
                              commitRecordMetadataAndOffset: CommitRecordMetadataAndOffset) {
                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:691: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertValidTransition`'s return type
  private def assertValidTransition(targetState: GroupState) {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:152: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup(enableMetadataExpiration: Boolean) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:233: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `putCacheCallback`'s return type
        def putCacheCallback(responseStatus: Map[TopicPartition, PartitionResponse]) {
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:356: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `putCacheCallback`'s return type
          def putCacheCallback(responseStatus: Map[TopicPartition, PartitionResponse]) {
                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:500: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `scheduleLoadGroupAndOffsets`'s return type
  def scheduleLoadGroupAndOffsets(offsetsPartition: Int, onGroupLoaded: GroupMetadata => Unit) {
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:510: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadGroupsAndOffsets`'s return type
  private[group] def loadGroupsAndOffsets(topicPartition: TopicPartition, onGroupLoaded: GroupMetadata => Unit) {
                                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:528: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doLoadGroupsAndOffsets`'s return type
  private def doLoadGroupsAndOffsets(topicPartition: TopicPartition, onGroupLoaded: GroupMetadata => Unit) {
                                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:709: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeGroupsForPartition`'s return type
                               onGroupUnloaded: GroupMetadata => Unit) {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:714: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeGroupsAndOffsets`'s return type
    def removeGroupsAndOffsets() {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:884: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:914: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addPartitionOwnership`'s return type
  private[group] def addPartitionOwnership(partition: Int) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1405: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
    def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream) {
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1426: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
    def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream) {
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/ProducerIdManager.scala:153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:277: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleTxnImmigration`'s return type
  def handleTxnImmigration(txnTopicPartitionId: Int, coordinatorEpoch: Int) {
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:281: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleTxnEmigration`'s return type
  def handleTxnEmigration(txnTopicPartitionId: Int, coordinatorEpoch: Int) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:496: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup(enableTransactionalIdExpiration: Boolean = true) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:516: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionLog.scala:255: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
    def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream) {
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:176: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addMarkersForBroker`'s return type
  private[transaction] def addMarkersForBroker(broker: Node, txnTopicPartition: Int, txnIdAndMarker: TxnIdAndMarkerEntry) {
                                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:148: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `enableTransactionalIdExpiration`'s return type
  def enableTransactionalIdExpiration() {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:392: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadTransactionsForTxnTopicPartition`'s return type
  def loadTransactionsForTxnTopicPartition(partitionId: Int, coordinatorEpoch: Int, sendTxnMarkers: SendTxnMarkersCallback) {
                                                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:403: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadTransactions`'s return type
    def loadTransactions() {
                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:448: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeTransactionsForTxnTopicPartition`'s return type
  def removeTransactionsForTxnTopicPartition(partitionId: Int, coordinatorEpoch: Int) {
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:459: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeTransactions`'s return type
    def removeTransactions() {
                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:651: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/log/AbstractIndex.scala:208: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `renameTo`'s return type
  def renameTo(f: File) {
                        ^
/mydata/kafka/core/src/main/scala/kafka/log/AbstractIndex.scala:216: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `flush`'s return type
  def flush() {
              ^
/mydata/kafka/core/src/main/scala/kafka/log/AbstractIndex.scala:238: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `trimToValidSize`'s return type
  def trimToValidSize() {
                        ^
/mydata/kafka/core/src/main/scala/kafka/log/AbstractIndex.scala:250: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/log/AbstractIndex.scala:321: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `forceUnmap`'s return type
  protected[log] def forceUnmap() {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:729: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateLogEndOffset`'s return type
  private def updateLogEndOffset(messageOffset: Long) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:927: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:947: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `renameDir`'s return type
  def renameDir(name: String) {
                              ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:967: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `closeHandlers`'s return type
  def closeHandlers() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1225: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeIncrementLogStartOffset`'s return type
  def maybeIncrementLogStartOffset(newLogStartOffset: Long) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1981: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `delete`'s return type
  private[log] def delete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2056: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateFullyAndStartAt`'s return type
  private[log] def truncateFullyAndStartAt(newOffset: Long) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2170: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteSegmentFiles`'s return type
  private def deleteSegmentFiles(segments: Iterable[LogSegment], asyncDelete: Boolean) {
                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2173: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteSegments`'s return type
    def deleteSegments() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2220: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `replaceSegments`'s return type
  private[log] def replaceSegments(newSegments: Seq[LogSegment], oldSegments: Seq[LogSegment], isRecoveredSwapFile: Boolean = false) {
                                                                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:145: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:157: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `abortCleaning`'s return type
  def abortCleaning(topicPartition: TopicPartition) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateCheckpoints`'s return type
  def updateCheckpoints(dataDir: File) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:209: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLogDirFailure`'s return type
  def handleLogDirFailure(dir: String) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:216: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeTruncateCheckpoint`'s return type
  def maybeTruncateCheckpoint(dataDir: File, topicPartition: TopicPartition, offset: Long) {
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:224: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `abortAndPauseCleaning`'s return type
  def abortAndPauseCleaning(topicPartition: TopicPartition) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:231: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `resumeCleaning`'s return type
  def resumeCleaning(topicPartitions: Iterable[TopicPartition]) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:296: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkDone`'s return type
    private def checkDone(topicPartition: TopicPartition) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:306: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
    override def doWork() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:377: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordStats`'s return type
    def recordStats(id: Int, name: String, from: Long, to: Long, stats: CleanerStats) {
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:633: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanInto`'s return type
                             stats: CleanerStats) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:786: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `growBuffers`'s return type
  def growBuffers(maxLogMessageSize: Int) {
                                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:799: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `restoreBuffers`'s return type
  def restoreBuffers() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:876: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `buildOffsetMap`'s return type
                                  stats: CleanerStats) {
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1005: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `readMessages`'s return type
  def readMessages(messagesRead: Int, bytesRead: Int) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1010: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `invalidMessage`'s return type
  def invalidMessage() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1014: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recopyMessages`'s return type
  def recopyMessages(messagesWritten: Int, bytesWritten: Int) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1019: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `indexMessagesRead`'s return type
  def indexMessagesRead(size: Int) {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1023: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `indexBytesRead`'s return type
  def indexBytesRead(size: Int) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1027: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `indexDone`'s return type
  def indexDone() {
                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:1031: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `allDone`'s return type
  def allDone() {
                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:250: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `abortCleaning`'s return type
  def abortCleaning(topicPartition: TopicPartition) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:270: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `abortAndPauseCleaning`'s return type
  def abortAndPauseCleaning(topicPartition: TopicPartition) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:293: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `resumeCleaning`'s return type
  def resumeCleaning(topicPartitions: Iterable[TopicPartition]){
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:347: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCleaningAborted`'s return type
  def checkCleaningAborted(topicPartition: TopicPartition) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:354: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateCheckpoints`'s return type
  def updateCheckpoints(dataDir: File, update: Option[(TopicPartition,Long)]) {
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:393: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLogDirFailure`'s return type
  def handleLogDirFailure(dir: String) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:400: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeTruncateCheckpoint`'s return type
  def maybeTruncateCheckpoint(dataDir: File, topicPartition: TopicPartition, offset: Long) {
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:416: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doneCleaning`'s return type
  def doneCleaning(topicPartition: TopicPartition, dataDir: File, endOffset: Long) {
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:115: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:316: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateNames`'s return type
  def validateNames(props: Properties) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:337: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validate`'s return type
  def validate(props: Properties) {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLogDirFailure`'s return type
  def handleLogDirFailure(dir: String) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:391: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:428: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:500: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateTo`'s return type
  def truncateTo(partitionOffsets: Map[TopicPartition, Long], isFuture: Boolean) {
                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:541: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateFullyAndStartAt`'s return type
  def truncateFullyAndStartAt(topicPartition: TopicPartition, newOffset: Long, isFuture: Boolean) {
                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:572: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkpointLogRecoveryOffsets`'s return type
  def checkpointLogRecoveryOffsets() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:584: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkpointLogStartOffsets`'s return type
  def checkpointLogStartOffsets() {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:912: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanupLogs`'s return type
  def cleanupLogs() {
                    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:237: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateTxnIndex`'s return type
  def updateTxnIndex(completedTxn: CompletedTxn, lastStableOffset: Long) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:386: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadLargestTimestamp`'s return type
  private def loadLargestTimestamp() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:465: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `flush`'s return type
  def flush() {
              ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:489: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `changeFileSuffixes`'s return type
  def changeFileSuffixes(oldSuffix: String, newSuffix: String) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:501: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onBecomeInactiveSegment`'s return type
  def onBecomeInactiveSegment() {
                                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:582: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:593: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `closeHandlers`'s return type
  def closeHandlers() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:603: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteIfExists`'s return type
  def deleteIfExists() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:425: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateKey`'s return type
  private def validateKey(record: Record, compactedTopic: Boolean) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:438: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateTimestamp`'s return type
                                timestampDiffMaxMs: Long) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:141: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `append`'s return type
  def append(offset: Long, position: Int) {
                                          ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateTo`'s return type
  override def truncateTo(offset: Long) {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateToEntries`'s return type
  private def truncateToEntries(entries: Int) {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sanityCheck`'s return type
  override def sanityCheck() {
                             ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:229: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `file_$eq`'s return type
  def file_=(f: File) {
                      ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:28: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `put`'s return type
  def put(key: ByteBuffer, offset: Long)
                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:30: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `updateLatestOffset`'s return type
  def updateLatestOffset(offset: Long)
                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:31: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `clear`'s return type
  def clear()
             ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:84: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `put`'s return type
  override def put(key: ByteBuffer, offset: Long) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `clear`'s return type
  override def clear() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetMap.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `hashInto`'s return type
  private def hashInto(key: ByteBuffer, buffer: Array[Byte]) {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:421: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeSnapshot`'s return type
  private def writeSnapshot(file: File, entries: mutable.Map[Long, ProducerStateEntry]) {
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:467: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteSnapshotFiles`'s return type
  private def deleteSnapshotFiles(dir: File, predicate: Long => Boolean = _ => true) {
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:554: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadFromSnapshot`'s return type
  private def loadFromSnapshot(logStartOffset: Long, currentTime: Long) {
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:595: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeExpiredProducers`'s return type
  def removeExpiredProducers(currentTimeMs: Long) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:709: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateHead`'s return type
  def truncateHead(logStartOffset: Long) {
                                         ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:748: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncate`'s return type
  def truncate() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:113: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeAppend`'s return type
  def maybeAppend(timestamp: Long, offset: Long, skipFullCheck: Boolean = false) {
                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:168: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateTo`'s return type
  override def truncateTo(offset: Long) {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:202: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncateToEntries`'s return type
  private def truncateToEntries(entries: Int) {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:211: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sanityCheck`'s return type
  override def sanityCheck() {
                             ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `file_$eq`'s return type
  def file_=(f: File) {
                      ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaCSVMetricsReporter.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  override def init(props: VerifiableProperties) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaCSVMetricsReporter.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startReporter`'s return type
  override def startReporter(pollingPeriodSecs: Long) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaCSVMetricsReporter.scala:76: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `stopReporter`'s return type
  override def stopReporter() {
                              ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaMetricsReporter.scala:38: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `startReporter`'s return type
  def startReporter(pollingPeriodInSeconds: Long)
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaMetricsReporter.scala:39: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `stopReporter`'s return type
  def stopReporter()
                    ^
/mydata/kafka/core/src/main/scala/kafka/metrics/KafkaMetricsReporter.scala:52: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `init`'s return type
  def init(props: VerifiableProperties)
                                       ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateRequestMetrics`'s return type
    def updateRequestMetrics(networkThreadTimeNanos: Long, response: Response) {
                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:311: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRequest`'s return type
  def sendRequest(request: RequestChannel.Request) {
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:316: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponse`'s return type
  def sendResponse(response: RequestChannel.Response) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:350: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateErrorMetrics`'s return type
  def updateErrorMetrics(apiKey: ApiKeys, errors: collection.Map[Errors, Integer]) {
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:356: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `clear`'s return type
  def clear() {
              ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:360: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:456: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `markErrorMeter`'s return type
  def markErrorMeter(error: Errors, count: Int) {
                                                ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:115: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup(startupProcessors: Boolean = true) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:525: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  def run() {
            ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:752: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  override def run() {
                     ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:783: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processException`'s return type
  private def processException(errorMessage: String, throwable: Throwable) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:790: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processChannelException`'s return type
  private def processChannelException(channelId: String, errorMessage: String, throwable: Throwable) {
                                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:798: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processNewResponses`'s return type
  private def processNewResponses() {
                                    ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:839: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponse`'s return type
  protected[network] def sendResponse(response: RequestChannel.Response, responseSend: Send) {
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:860: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `poll`'s return type
  private def poll() {
                     ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:871: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processCompletedReceives`'s return type
  private def processCompletedReceives() {
                                         ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:909: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processCompletedSends`'s return type
  private def processCompletedSends() {
                                      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:938: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processDisconnected`'s return type
  private def processDisconnected() {
                                    ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1007: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureNewConnections`'s return type
  private def configureNewConnections() {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1029: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `closeAll`'s return type
  private def closeAll() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1113: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `inc`'s return type
  def inc(listenerName: ListenerName, address: InetAddress, acceptorBlockedPercentMeter: com.yammer.metrics.core.Meter) {
                                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1166: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `dec`'s return type
  def dec(listenerName: ListenerName, address: InetAddress) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/security/CredentialProvider.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateCredentials`'s return type
  def updateCredentials(username: String, config: Properties) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:79: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configure`'s return type
  override def configure(javaConfigs: util.Map[String, _]) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addAcls`'s return type
  override def addAcls(acls: Set[Acl], resource: Resource) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:262: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:267: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadCache`'s return type
  private def loadCache() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:293: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `logAuditMessage`'s return type
  private def logAuditMessage(principal: KafkaPrincipal, authorized: Boolean, operation: Operation, resource: Resource, host: String) {
                                                                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:373: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateCache`'s return type
  private def updateCache(resource: Resource, versionedAcls: VersionedAcls) {
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:381: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateAclChangedFlag`'s return type
  private def updateAclChangedFlag(resource: Resource) {
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:390: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processNotification`'s return type
    override def processNotification(resource: Resource) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherManager.scala:120: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `markPartitionsForTruncation`'s return type
  def markPartitionsForTruncation(brokerId: Int, topicPartition: TopicPartition, truncationOffset: Long) {
                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherManager.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addFetcherForPartitions`'s return type
  def addFetcherForPartitions(partitionAndOffsets: Map[TopicPartition, InitialFetchState]) {
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherManager.scala:171: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeFetcherForPartitions`'s return type
  def removeFetcherForPartitions(partitions: Set[TopicPartition]) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherManager.scala:181: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdownIdleFetcherThreads`'s return type
  def shutdownIdleFetcherThreads() {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherManager.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `closeAllFetchers`'s return type
  def closeAllFetchers() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:100: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  override def shutdown() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
  override def doWork() {
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:138: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handlePartitionsWithErrors`'s return type
  private def handlePartitionsWithErrors(partitions: Iterable[TopicPartition], methodName: String) {
                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:386: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `markPartitionsForTruncation`'s return type
  def markPartitionsForTruncation(topicPartition: TopicPartition, truncationOffset: Long) {
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:408: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addPartitions`'s return type
  def addPartitions(initialFetchStates: Map[TopicPartition, OffsetAndEpoch]) {
                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:436: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateFetchOffsetAndMaybeMarkTruncationComplete`'s return type
  private def updateFetchOffsetAndMaybeMarkTruncationComplete(fetchOffsets: Map[TopicPartition, OffsetTruncationState]) {
                                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:609: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `delayPartitions`'s return type
  def delayPartitions(partitions: Iterable[TopicPartition], delay: Long) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:624: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removePartitions`'s return type
  def removePartitions(topicPartitions: Set[TopicPartition]) {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:693: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `lag_$eq`'s return type
  def lag_=(newLag: Long) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:699: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregister`'s return type
  def unregister() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:720: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregister`'s return type
  def unregister(topicPartition: TopicPartition) {
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:725: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregister`'s return type
  def unregister() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:741: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregister`'s return type
  def unregister() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:72: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tryCompleteDelayedTopicOperations`'s return type
  def tryCompleteDelayedTopicOperations(topic: String) {
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:85: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createTopics`'s return type
                   responseCallback: Map[String, ApiError] => Unit) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:193: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteTopics`'s return type
                   responseCallback: Map[String, Errors] => Unit) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:586: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/BrokerStates.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `newState`'s return type
  def newState(newState: BrokerStates) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/BrokerStates.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `newState`'s return type
  def newState(newState: Byte) {
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `start`'s return type
  private def start() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:288: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordNoThrottle`'s return type
  def recordNoThrottle(clientSensors: ClientSensors, value: Double) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:413: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuota`'s return type
  def updateQuota(sanitizedUser: Option[String], clientId: Option[String], sanitizedClientId: Option[String], quota: Option[Quota]) {
                                                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientRequestQuotaManager.scala:39: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordExempt`'s return type
  def recordExempt(value: Double) {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:44: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `processConfigChanges`'s return type
  def processConfigChanges(entityName: String, value: Properties)
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processConfigChanges`'s return type
  def processConfigChanges(topic: String, topicConfig: Properties) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:120: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuotaConfig`'s return type
  def updateQuotaConfig(sanitizedUser: Option[String], sanitizedClientId: Option[String], config: Properties) {
                                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:149: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processConfigChanges`'s return type
  def processConfigChanges(sanitizedClientId: String, clientConfig: Properties) {
                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:161: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processConfigChanges`'s return type
  def processConfigChanges(quotaEntityPath: String, config: Properties) {
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:182: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processConfigChanges`'s return type
  def processConfigChanges(brokerId: String, properties: Properties) {
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedCreatePartitions.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
  override def onComplete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedDeleteRecords.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpiration`'s return type
  override def onExpiration() {
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedDeleteRecords.scala:117: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
  override def onComplete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedDeleteRecords.scala:127: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordExpiration`'s return type
  def recordExpiration(partition: TopicPartition) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedDeleteTopics.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
  override def onComplete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedFetch.scala:152: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpiration`'s return type
  override def onExpiration() {
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedFetch.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
  override def onComplete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:332: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `watchForOperation`'s return type
  private def watchForOperation(key: Any, operation: T) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:343: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeKeyIfEmpty`'s return type
  private def removeKeyIfEmpty(key: Any, watchers: Watchers) {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:359: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:377: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `watch`'s return type
    def watch(t: T) {
                    ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:435: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `advanceClock`'s return type
  def advanceClock(timeoutMs: Long) {
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedOperation.scala:461: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
    override def doWork() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedProduce.scala:115: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpiration`'s return type
  override def onExpiration() {
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedProduce.scala:127: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
  override def onComplete() {
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedProduce.scala:144: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordExpiration`'s return type
  def recordExpiration(partition: TopicPartition) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `loadCache`'s return type
  private def loadCache() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createToken`'s return type
                  responseCallback: CreateResponseCallback) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:298: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `renewToken`'s return type
                 renewCallback: RenewResponseCallback) {
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:398: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `expireToken`'s return type
                  expireResponseCallback: ExpireResponseCallback) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:480: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processNotification`'s return type
    override def processNotification(tokenIdBytes: Array[Byte]) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicConfigManager.scala:111: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processEntityConfigChangeVersion1`'s return type
    private def processEntityConfigChangeVersion1(jsonBytes: Array[Byte], js: JsonObject) {
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicConfigManager.scala:129: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processEntityConfigChangeVersion2`'s return type
    private def processEntityConfigChangeVersion2(jsonBytes: Array[Byte], js: JsonObject) {
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:126: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handle`'s return type
  def handle(request: RequestChannel.Request) {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLeaderAndIsrRequest`'s return type
  def handleLeaderAndIsrRequest(request: RequestChannel.Request) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onLeadershipChange`'s return type
    def onLeadershipChange(updatedLeaders: Iterable[Partition], updatedFollowers: Iterable[Partition]) {
                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:233: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleStopReplicaRequest`'s return type
  def handleStopReplicaRequest(request: RequestChannel.Request) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleUpdateMetadataRequest`'s return type
  def handleUpdateMetadataRequest(request: RequestChannel.Request) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:301: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleControlledShutdownRequest`'s return type
  def handleControlledShutdownRequest(request: RequestChannel.Request) {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:324: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleOffsetCommitRequest`'s return type
  def handleOffsetCommitRequest(request: RequestChannel.Request) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:331: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(commitStatus: Map[TopicPartition, Errors]) {
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:456: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleProduceRequest`'s return type
  def handleProduceRequest(request: RequestChannel.Request) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:495: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(responseStatus: Map[TopicPartition, PartitionResponse]) {
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:582: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleFetchRequest`'s return type
  def handleFetchRequest(request: RequestChannel.Request) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:843: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleListOffsetRequest`'s return type
  def handleListOffsetRequest(request: RequestChannel.Request) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1066: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleTopicMetadataRequest`'s return type
  def handleTopicMetadataRequest(request: RequestChannel.Request) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleOffsetFetchRequest`'s return type
  def handleOffsetFetchRequest(request: RequestChannel.Request) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1227: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleFindCoordinatorRequest`'s return type
  def handleFindCoordinatorRequest(request: RequestChannel.Request) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1287: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleDescribeGroupRequest`'s return type
  def handleDescribeGroupRequest(request: RequestChannel.Request) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1350: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleListGroupsRequest`'s return type
  def handleListGroupsRequest(request: RequestChannel.Request) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1377: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleJoinGroupRequest`'s return type
  def handleJoinGroupRequest(request: RequestChannel.Request) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1381: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(joinResult: JoinGroupResult) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1451: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleSyncGroupRequest`'s return type
  def handleSyncGroupRequest(request: RequestChannel.Request) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1454: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(syncGroupResult: SyncGroupResult) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1515: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleHeartbeatRequest`'s return type
  def handleHeartbeatRequest(request: RequestChannel.Request) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1519: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(error: Errors) {
                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1554: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLeaveGroupRequest`'s return type
  def handleLeaveGroupRequest(request: RequestChannel.Request) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1567: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
      def sendResponseCallback(leaveGroupResult : LeaveGroupResult) {
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1592: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleSaslHandshakeRequest`'s return type
  def handleSaslHandshakeRequest(request: RequestChannel.Request) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1597: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleSaslAuthenticateRequest`'s return type
  def handleSaslAuthenticateRequest(request: RequestChannel.Request) {
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1604: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleApiVersionsRequest`'s return type
  def handleApiVersionsRequest(request: RequestChannel.Request) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1622: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleCreateTopicsRequest`'s return type
  def handleCreateTopicsRequest(request: RequestChannel.Request) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1719: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleDeleteTopicsRequest`'s return type
  def handleDeleteTopicsRequest(request: RequestChannel.Request) {
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1785: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleDeleteRecordsRequest`'s return type
  def handleDeleteRecordsRequest(request: RequestChannel.Request) {
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1804: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(authorizedTopicResponses: Map[TopicPartition, DeleteRecordsResponse.PartitionResponse]) {
                                                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1867: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
      def sendResponseCallback(error: Errors) {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
      def sendResponseCallback(authorizedTopicErrors: Map[TopicPartition, Errors]) {
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2422: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleCreateTokenRequest`'s return type
  def handleCreateTokenRequest(request: RequestChannel.Request) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2426: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(createResult: CreateTokenResult) {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2456: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleRenewTokenRequest`'s return type
  def handleRenewTokenRequest(request: RequestChannel.Request) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2460: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(error: Errors, expiryTimestamp: Long) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2479: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleExpireTokenRequest`'s return type
  def handleExpireTokenRequest(request: RequestChannel.Request) {
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2483: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(error: Errors, expiryTimestamp: Long) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2502: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleDescribeTokensRequest`'s return type
  def handleDescribeTokensRequest(request: RequestChannel.Request) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2506: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponseCallback`'s return type
    def sendResponseCallback(error: Errors, tokenDetails: List[DelegationToken]) {
                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2654: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleError`'s return type
  private def handleError(request: RequestChannel.Request, e: Throwable) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2677: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendErrorResponseMaybeThrottle`'s return type
  private def sendErrorResponseMaybeThrottle(request: RequestChannel.Request, error: Throwable) {
                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:257: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:1466: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateValues`'s return type
  private def validateValues() {
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  def run() {
            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
  def close() {
              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:234: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateReplicationBytesIn`'s return type
  def updateReplicationBytesIn(value: Long) {
                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:240: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateReplicationBytesOut`'s return type
  private def updateReplicationBytesOut(value: Long) {
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:247: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeOldLeaderMetrics`'s return type
  def removeOldLeaderMetrics(topic: String) {
                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:267: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeMetrics`'s return type
  def removeMetrics(topic: String) {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaRequestHandler.scala:273: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateBytesOut`'s return type
  def updateBytesOut(topic: String, isFollower: Boolean, value: Long) {
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:192: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:424: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `controlledShutdown`'s return type
  private def controlledShutdown() {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:579: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:725: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkpointBrokerId`'s return type
  private def checkpointBrokerId(brokerId: Int) {
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServerStartable.scala:39: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServerStartable.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServerStartable.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setServerState`'s return type
  def setServerState(newState: Byte) {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addOrUpdatePartitionInfo`'s return type
                                       stateInfo: UpdateMetadataRequest.PartitionState) {
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/QuotaFactory.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
    def shutdown() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaAlterLogDirsManager.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaAlterLogDirsThread.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processResponseCallback`'s return type
    def processResponseCallback(responsePartitionData: Seq[(TopicPartition, FetchPartitionData)]) {
                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherBlockingSend.scala:38: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `initiateClose`'s return type
  def initiateClose()
                     ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherBlockingSend.scala:40: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `close`'s return type
  def close()
             ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherManager.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:219: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
    override def doWork() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:279: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordIsrChange`'s return type
  def recordIsrChange(topicPartition: TopicPartition) {
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:292: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybePropagateIsrChanges`'s return type
  def maybePropagateIsrChanges() {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:322: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {
                ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:488: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendRecords`'s return type
                    recordConversionStatsCallback: Map[TopicPartition, RecordConversionStats] => Unit = _ => ()) {
                                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:699: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteRecords`'s return type
                    responseCallback: Map[TopicPartition, DeleteRecordsResponse.PartitionResponse] => Unit) {
                                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:835: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `fetchMessages`'s return type
                    clientMetadata: Option[ClientMetadata]) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1568: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkpointHighWatermarks`'s return type
  def checkpointHighWatermarks() {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1595: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handleLogDirFailure`'s return type
  def handleLogDirFailure(dir: String, sendZkNotification: Boolean = true) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1630: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeMetrics`'s return type
  def removeMetrics() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1640: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown(checkpointHW: Boolean = true) {
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicationQuotaManager.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuota`'s return type
  def updateQuota(quota: Quota) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicationQuotaManager.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `record`'s return type
  def record(value: Long) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicationQuotaManager.scala:152: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `markThrottled`'s return type
  def markThrottled(topic: String, partitions: Seq[Int]) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicationQuotaManager.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `markThrottled`'s return type
  def markThrottled(topic: String) {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicationQuotaManager.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeThrottle`'s return type
  def removeThrottle(topic: String) {
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/checkpoints/CheckpointFile.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `write`'s return type
  def write(entries: Iterable[T]) {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/checkpoints/LeaderEpochCheckpointFile.scala:28: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `write`'s return type
  def write(epochs: Seq[EpochEntry])
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/checkpoints/OffsetCheckpointFile.scala:48: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `write`'s return type
  def write(epochs: Seq[EpochEntry])
                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  def run(conf: ConsumerConfig) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:87: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addShutdownHook`'s return type
  def addShutdownHook(consumer: ConsumerWrapper, conf: ConsumerConfig) {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      override def run() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:102: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `process`'s return type
              skipMessageOnError: Boolean) {
                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `reportRecordCount`'s return type
  def reportRecordCount() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:171: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setAutoOffsetResetValue`'s return type
  def setAutoOffsetResetValue(config: ConsumerConfig, props: Properties) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:397: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumerInit`'s return type
    def consumerInit() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:416: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `seek`'s return type
    def seek(topic: String, partitionId: Int, offset: Long) {
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:426: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `resetUnconsumedOffsets`'s return type
    def resetUnconsumedOffsets() {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:451: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanup`'s return type
    def cleanup() {
                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:469: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  override def init(props: Properties) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:503: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
  def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream) {
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:512: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `write`'s return type
    def write(deserializer: Option[Deserializer[_]], sourceBytes: Array[Byte], topic: String) {
                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:556: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  override def init(props: Properties) {}
                                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:558: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
  def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream){}
                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:564: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
  override def init(props: Properties) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:572: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTo`'s return type
  def writeTo(consumerRecord: ConsumerRecord[Array[Byte], Array[Byte]], output: PrintStream) {
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleProducer.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
          override def run() {
                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleProducer.scala:255: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
    override def init(inputStream: InputStream, props: Properties) {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consume`'s return type
              testStartTime: Long) {
                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsAssigned`'s return type
      def onPartitionsAssigned(partitions: util.Collection[TopicPartition]) {
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsRevoked`'s return type
      def onPartitionsRevoked(partitions: util.Collection[TopicPartition]) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:122: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `dumpIndex`'s return type
                               maxMessageSize: Int) {
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:159: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `dumpTimeIndex`'s return type
                                   maxMessageSize: Int) {
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:329: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `dumpLog`'s return type
                      parser: MessageParser[_, _]) {
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:404: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordMismatchTimeIndex`'s return type
    def recordMismatchTimeIndex(file: File, indexTimestamp: Long, logTimestamp: Long) {
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:411: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordOutOfOrderIndexTimestamp`'s return type
    def recordOutOfOrderIndexTimestamp(file: File, indexTimestamp: Long, prevIndexTimestamp: Long) {
                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:418: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `recordShallowOffsetNotFound`'s return type
    def recordShallowOffsetNotFound(file: File, indexOffset: Long, logOffset: Long) {
                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:425: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `printErrors`'s return type
    def printErrors() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `finalise`'s return type
    def finalise() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:43: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:84: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:165: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanShutdown`'s return type
  def cleanShutdown() {
                      ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeSetDefaultProperty`'s return type
  private def maybeSetDefaultProperty(properties: Properties, propertyName: String, defaultValue: String) {
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:207: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
    override def run() {
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:263: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeFlushAndCommitOffsets`'s return type
    def maybeFlushAndCommitOffsets() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:272: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
    def shutdown() {
                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:284: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `awaitShutdown`'s return type
    def awaitShutdown() {
                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:306: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
    def init() {
               ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:339: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `wakeup`'s return type
    def wakeup() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:343: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:347: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `commit`'s return type
    def commit() {
                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:357: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsRevoked`'s return type
    override def onPartitionsRevoked(partitions: util.Collection[TopicPartition]) {
                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:363: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsAssigned`'s return type
    override def onPartitionsAssigned(partitions: util.Collection[TopicPartition]) {
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:372: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `send`'s return type
    def send(record: ProducerRecord[Array[Byte], Array[Byte]]) {
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:381: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `flush`'s return type
    def flush() {
                ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:385: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:389: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close(timeout: Long) {
                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:397: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompletion`'s return type
    override def onCompletion(metadata: RecordMetadata, exception: Exception) {
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:521: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
        override def run() {
                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:204: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      override def run() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:275: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createNewFetcherBarrier`'s return type
  def createNewFetcherBarrier() {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:281: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createNewVerificationBarrier`'s return type
  def createNewVerificationBarrier() {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:287: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initialize`'s return type
  private def initialize() {
                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:294: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setInitialOffsets`'s return type
  private def setInitialOffsets() {
                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:299: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addFetchedData`'s return type
  def addFetchedData(topicAndPartition: TopicPartition, replicaId: Int, partitionData: FetchResponse.PartitionData[MemoryRecords]) {
                                                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:307: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyCheckSum`'s return type
  def verifyCheckSum(println: String => Unit) {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:393: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `doWork`'s return type
  override def doWork() {
                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/StateChangeLogMerger.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/utils/CommandLineUtils.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkRequiredArgs`'s return type
  def checkRequiredArgs(parser: OptionParser, options: OptionSet, required: OptionSpec[_]*) {
                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/utils/CommandLineUtils.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkInvalidArgs`'s return type
  def checkInvalidArgs(parser: OptionParser, options: OptionSet, usedOption: OptionSpec[_], invalidOptions: Set[OptionSpec[_]]) {
                                                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/utils/CommandLineUtils.scala:87: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkInvalidArgsSet`'s return type
  def checkInvalidArgsSet(parser: OptionParser, options: OptionSet, usedOptions: Set[OptionSpec[_]], invalidOptions: Set[OptionSpec[_]]) {
                                                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/utils/CommandLineUtils.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeMergeOptions`'s return type
  def maybeMergeOptions[V](props: Properties, key: String, options: OptionSet, spec: OptionSpec[V]) {
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/utils/CoreUtils.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `swallow`'s return type
  def swallow(action: => Unit, logging: Logging, logLevel: Level = Level.WARN) {
                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/utils/CoreUtils.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unregisterMBean`'s return type
  def unregisterMBean(name: String) {
                                    ^
/mydata/kafka/core/src/main/scala/kafka/utils/FileLock.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `lock`'s return type
  def lock() {
             ^
/mydata/kafka/core/src/main/scala/kafka/utils/FileLock.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `unlock`'s return type
  def unlock() {
               ^
/mydata/kafka/core/src/main/scala/kafka/utils/KafkaScheduler.scala:35: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `startup`'s return type
  def startup()
               ^
/mydata/kafka/core/src/main/scala/kafka/utils/KafkaScheduler.scala:41: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `shutdown`'s return type
  def shutdown()
                ^
/mydata/kafka/core/src/main/scala/kafka/utils/KafkaScheduler.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  override def startup() {
                         ^
/mydata/kafka/core/src/main/scala/kafka/utils/KafkaScheduler.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  override def shutdown() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/utils/Pool.scala:76: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `clear`'s return type
  def clear() { pool.clear() }
              ^
/mydata/kafka/core/src/main/scala/kafka/utils/Throttler.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `maybeThrottle`'s return type
  def maybeThrottle(observed: Double) {
                                      ^
/mydata/kafka/core/src/main/scala/kafka/utils/Throttler.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/utils/VerifiableProperties.scala:217: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verify`'s return type
  def verify() {
               ^
/mydata/kafka/core/src/main/scala/kafka/utils/VersionInfo.scala:24: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/utils/timer/Timer.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  override def shutdown() {
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createTopic`'s return type
                  rackAwareMode: RackAwareMode = RackAwareMode.Enforced) {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:137: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeTopicPartitionAssignment`'s return type
  private def writeTopicPartitionAssignment(topic: String, replicaAssignment: Map[Int, Seq[Int]], isUpdate: Boolean) {
                                                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:157: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `deleteTopic`'s return type
  def deleteTopic(topic: String) {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:292: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `changeClientIdConfig`'s return type
  def changeClientIdConfig(sanitizedClientId: String, configs: Properties) {
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:307: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `changeUserOrUserClientIdConfig`'s return type
  def changeUserOrUserClientIdConfig(sanitizedEntityName: String, configs: Properties) {
                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/zk/AdminZkClient.scala:376: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `changeEntityConfig`'s return type
  private def changeEntityConfig(rootEntityType: String, fullSanitizedEntityName: String, configs: Properties) {
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/zk/KafkaZkClient.scala:1158: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `propagateLogDirEvent`'s return type
  def propagateLogDirEvent(brokerId: Int) {
                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:32: Unused import
import org.apache.kafka.common.config.{ConfigResource, LogLevelConfig}
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1170: value DEFAULT_TIMESTAMP in class OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
          offsetAndMetadata.expireTimestamp.getOrElse(OffsetCommitRequest.DEFAULT_TIMESTAMP))
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1319: value DEFAULT_TIMESTAMP in class OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
        if (expireTimestamp == OffsetCommitRequest.DEFAULT_TIMESTAMP)
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:40: Unused import
import org.apache.kafka.common.metrics.{MetricConfig, Metrics}
                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/MemberMetadata.scala:31: private object MemberMetadata in package group is never used
private object MemberMetadata {
               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:34: Unused import
import org.apache.kafka.common.metrics.{MetricConfig, Metrics}
                                        ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:103: parameter value nn in method body is never used
    def body[T <: AbstractRequest](implicit classTag: ClassTag[T], nn: NotNothing[T]): T = {
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:428: value DEFAULT_TIMESTAMP in class OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
              case OffsetCommitRequest.DEFAULT_TIMESTAMP => currentTimestamp
                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2310: local val alterPartitionReassignmentsRequest in method handleAlterPartitionReassignmentsRequest is never used
    val alterPartitionReassignmentsRequest = request.body[AlterPartitionReassignmentsRequest]
        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2323: local val listPartitionReassignmentsRequest in method handleListPartitionReassignmentsRequest is never used
    val listPartitionReassignmentsRequest = request.body[ListPartitionReassignmentsRequest]
        ^
/mydata/kafka/core/src/main/scala/kafka/Kafka.scala:60: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      props ++= CommandLineUtils.parseKeyValueArgs(options.valuesOf(overrideOpt).asScala)
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val aclBindings = acls.map(acl => new AclBinding(resourcePattern, getAccessControlEntry(acl))).asJavaCollection
                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:142: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
            val filteredResourceToAcls =  resourceToAcls.mapValues(acls =>
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:158: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        adminClient.deleteAcls(List(new AclBindingFilter(filter, AccessControlEntryFilter.ANY)).asJava).all().get()
                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:160: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val aclBindingFilters = acls.map(acl => new AclBindingFilter(filter, getAccessControlEntryFilter(acl))).toList.asJava
                                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        if (filters.isEmpty) adminClient.describeAcls(AclBindingFilter.ANY).values().get().asScala.toList
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            adminClient.describeAcls(new AclBindingFilter(filter, AccessControlEntryFilter.ANY)).values().get().asScala.toList
                                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:192: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val authorizerProperties = opts.options.valuesOf(opts.authorizerPropertiesOpt).asScala
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:193: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          defaultProps ++ CommandLineUtils.parseKeyValueArgs(authorizerProperties, acceptMissingValue = false).asScala
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:205: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        authZ.configure(authorizerProperties.asJava)
                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val operations = opts.options.valuesOf(opts.operationsOpt).asScala.map(operation => Operation.fromString(operation.trim)).toSet
                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:400: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(hostOptionSpec).asScala.map(_.trim).toSet
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:409: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(principalOptionSpec).asScala.map(s => SecurityUtils.parseKafkaPrincipal(s.trim)).toSet
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:419: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(opts.topicOpt).asScala.foreach(topic => resourceFilters += new ResourcePatternFilter(JResourceType.TOPIC, topic.trim, patternType))
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:425: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(opts.groupOpt).asScala.foreach(group => resourceFilters += new ResourcePatternFilter(JResourceType.GROUP, group.trim, patternType))
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:428: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(opts.transactionalIdOpt).asScala.foreach(transactionalId =>
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AclCommand.scala:432: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      opts.options.valuesOf(opts.delegationTokenOpt).asScala.foreach(token => resourceFilters += new ResourcePatternFilter(JResourceType.DELEGATION_TOKEN, token.trim, patternType))
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/AdminUtils.scala:202: method toIterator in trait IterableOnceOps is deprecated (since 2.13.0): Use .iterator instead of .toIterator
      (rack, brokers.toIterator)
                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:122: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          pendingFutures.asScala.foreach { future =>
          ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:166: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      response.apiVersions.asScala.toList
               ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      response.cluster.nodes.asScala.toList
                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:192: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        broker -> Try[NodeApiVersions](new NodeApiVersions(getApiVersions(broker).asJava))
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    class AdminConfig(originals: Map[_,_]) extends AbstractConfig(AdminConfigDef, originals.asJava, false)
                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:263: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def create(props: Properties): AdminClient = create(props.asScala.toMap)
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/BrokerApiVersionsCommand.scala:321: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        metadata.fetch.nodes.asScala.toList)
                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val dynamicBrokerConfigs = configsToBeAdded.asScala.keySet.filterNot(BrokerConfigsUpdatableUsingZooKeeperWhileBrokerRunning.contains)
                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:199: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    passwordEncoderConfigs ++= configsToBeAdded.asScala.filter { case (key, _) => key.startsWith("password.encoder.") }
                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:203: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      passwordEncoderConfigs.asScala.keySet.foreach(configsToBeAdded.remove)
      ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:207: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val passwordConfigs = configsToBeAdded.asScala.keySet.filter(DynamicBrokerConfig.isPasswordConfig)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:216: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val passwordEncoder = createPasswordEncoder(passwordEncoderConfigs.asScala)
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:233: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .format(entity, configs.asScala.map(kv => kv._1 + "=" + kv._2).mkString(",")))
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val configsToBeDeleted = opts.options.valuesOf(opts.deleteConfig).asScala.map(_.trim())
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:282: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val entityTypes = opts.options.valuesOf(opts.entityType).asScala
                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configsToBeAdded = parseConfigsToBeAdded(opts).asScala.map { case (k, v) => (k, new ConfigEntry(k, v)) }
                                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val newConfig = new JConfig(newEntries.asJava.values)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:318: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
      adminClient.alterConfigs(Map(configResource -> newConfig).asJava, alterOptions).all().get(60, TimeUnit.SECONDS)
                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      adminClient.alterConfigs(Map(configResource -> newConfig).asJava, alterOptions).all().get(60, TimeUnit.SECONDS)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:329: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        ++ configsToBeDeleted.map { k => new AlterConfigOp(new ConfigEntry(k, ""), AlterConfigOp.OpType.DELETE) }
        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:332: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      adminClient.incrementalAlterConfigs(Map(configResource -> alterLogLevelEntries).asJava, alterOptions).all().get(60, TimeUnit.SECONDS)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:353: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val synonyms = config.synonyms.asScala.map(synonym => s"${synonym.source}:${synonym.name}=${synonym.value}").mkString(", ")
                            ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:366: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configs.get(configResource).entries.asScala
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:377: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configs.get(configResource).entries.asScala.toSeq
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:447: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val entityTypes = opts.options.valuesOf(opts.entityType).asScala
                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:464: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    opts.options.specs.asScala
                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:470: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val types = opts.options.valuesOf(opts.entityType).asScala
                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:525: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            "For entity-type '" + ConfigType.Broker + "': " + DynamicConfig.Broker.names.asScala.map("\t" + _).mkString(nl, nl, nl) +
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:526: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            "For entity-type '" + ConfigType.User + "': " + DynamicConfig.User.names.asScala.map("\t" + _).mkString(nl, nl, nl) +
                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:527: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            "For entity-type '" + ConfigType.Client + "': " + DynamicConfig.Client.names.asScala.map("\t" + _).mkString(nl, nl, nl) +
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:549: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val entityTypeVals = options.valuesOf(entityType).asScala
                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:180: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val listings = result.all.get.asScala
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:305: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        else opts.options.valuesOf(opts.groupOpt).asScala
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:369: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        else opts.options.valuesOf(opts.groupOpt).asScala
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:372: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        groupIds.asJava,
        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:377: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumerGroups.asScala.foldLeft(immutable.Map[String, Map[TopicPartition, OffsetAndMetadata]]()) {
        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:387: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                  getConsumer(groupId).commitSync(preparedOffsets.asJava)
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ).describedGroups().asScala.map {
                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:399: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        groupIds.asJava,
        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:423: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val rowsWithConsumer = consumerGroup.members.asScala.filter(!_.assignment.topicPartitions.isEmpty).toSeq
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:425: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val topicPartitions = consumerSummary.assignment.topicPartitions.asScala
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val partitionOffsets = consumerSummary.assignment.topicPartitions.asScala
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:435: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
        val rowsWithoutConsumer = committedOffsets.filterKeys(!assignedTopicPartitions.contains(_)).flatMap {
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:460: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val memberAssignmentStates = consumerGroup.members().asScala.map(consumer =>
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:467: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            if (verbose) consumer.assignment.topicPartitions.asScala.toList else List()
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:491: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val offsets = getConsumer(groupId).endOffsets(topicPartitions.asJava)
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:501: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val offsets = getConsumer(groupId).beginningOffsets(topicPartitions.asJava)
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:512: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(topicPartitions.asJava)
                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:515: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.offsetsForTimes(topicPartitions.map(_ -> timestamp).toMap.asJava).asScala.partition(_._2 != null)
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:515: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.offsetsForTimes(topicPartitions.map(_ -> timestamp).toMap.asJava).asScala.partition(_._2 != null)
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:555: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Utils.loadProps(opts.options.valueOf(opts.commandConfigOpt)).asScala.foreach {
                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:573: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case topic => getConsumer(groupId).partitionsFor(topic).asScala
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:581: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val topics = opts.options.valuesOf(opts.topicOpt).asScala
                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:595: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ).partitionsToOffsetAndMetadata.get.asScala
                                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:766: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        else opts.options.valuesOf(opts.groupOpt).asScala
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:771: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ).deletedGroups().asScala
                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:769: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        groupIds.asJava,
        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:773: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      val result = groupsToDelete.mapValues { f =>
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:959: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetToOffsetOpt,   allResetOffsetScenarioOpts - resetToOffsetOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:960: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetToDatetimeOpt, allResetOffsetScenarioOpts - resetToDatetimeOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:961: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetByDurationOpt, allResetOffsetScenarioOpts - resetByDurationOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:962: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetToEarliestOpt, allResetOffsetScenarioOpts - resetToEarliestOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:963: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetToLatestOpt,   allResetOffsetScenarioOpts - resetToLatestOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:964: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetToCurrentOpt,  allResetOffsetScenarioOpts - resetToCurrentOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:965: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetShiftByOpt,    allResetOffsetScenarioOpts - resetShiftByOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:966: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        CommandLineUtils.checkInvalidArgs(parser, options, resetFromFileOpt,   allResetOffsetScenarioOpts - resetFromFileOpt)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:969: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, groupOpt, allGroupSelectionScopeOpts - groupOpt)
                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:970: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, groupOpt, allConsumerGroupLevelOpts - describeOpt - deleteOpt - resetOffsetsOpt)
                                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:970: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, groupOpt, allConsumerGroupLevelOpts - describeOpt - deleteOpt - resetOffsetsOpt)
                                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:970: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, groupOpt, allConsumerGroupLevelOpts - describeOpt - deleteOpt - resetOffsetsOpt)
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:971: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, topicOpt, allConsumerGroupLevelOpts - deleteOpt - resetOffsetsOpt)
                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConsumerGroupCommand.scala:971: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
      CommandLineUtils.checkInvalidArgs(parser, options, topicOpt, allConsumerGroupLevelOpts - deleteOpt - resetOffsetsOpt)
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/DelegationTokenCommand.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Some(opts.options.valuesOf(principalOptionSpec).asScala.map(s => SecurityUtils.parseKafkaPrincipal(s.trim)).toList.asJava)
                                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/DelegationTokenCommand.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Some(opts.options.valuesOf(principalOptionSpec).asScala.map(s => SecurityUtils.parseKafkaPrincipal(s.trim)).toList.asJava)
                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/DelegationTokenCommand.scala:141: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val tokens = describeResult.delegationTokens().get().asScala.toList
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/DeleteRecordsCommand.scala:87: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    }.toMap.asJava
      ^
/mydata/kafka/core/src/main/scala/kafka/admin/DeleteRecordsCommand.scala:93: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleteRecordsResult.lowWatermarks.asScala.foreach { case (tp, partitionResult) => {
                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/LeaderElectionCommand.scala:124: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitions = topicPartitions.map(_.asJava).orNull
                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/LeaderElectionCommand.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      client.electLeaders(electionType, partitions).partitions.get.asScala
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:46: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            case None => adminClient.describeCluster().nodes().get().asScala.map(_.id()).toArray
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:50: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val describeLogDirsResult: DescribeLogDirsResult = adminClient.describeLogDirs(brokerList.map(Integer.valueOf).toSeq.asJava)
                                                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:51: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        val logDirInfosByBroker = describeLogDirsResult.all.get().asScala.mapValues(_.asScala).toMap
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:51: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val logDirInfosByBroker = describeLogDirsResult.all.get().asScala.mapValues(_.asScala).toMap
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:51: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val logDirInfosByBroker = describeLogDirsResult.all.get().asScala.mapValues(_.asScala).toMap
                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:59: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Json.encodeAsString(Map(
                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:61: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            "brokers" -> logDirInfosByBroker.map { case (broker, logDirInfos) =>
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:62: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Map(
                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:64: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                    "logDirs" -> logDirInfos.map { case (logDir, logDirInfo) =>
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:65: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                        Map(
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:70: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                            }.map { case (topicPartition, replicaInfo) =>
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:68: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                            "partitions" -> logDirInfo.replicaInfos.asScala.filter { case (topicPartition, _) =>
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/LogDirsCommand.scala:71: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                                Map(
                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/PreferredReplicaLeaderElectionCommand.scala:216: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        case Some(partitionsFromUser) => partitionsFromUser.asJava
                                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/PreferredReplicaLeaderElectionCommand.scala:222: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        adminClient.electLeaders(ElectionType.PREFERRED, partitions).partitions.get.asScala
                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:237: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsString(Map(
                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      "partitions" -> partitionsToBeReassigned.map { case (tp, replicas) =>
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:240: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Map(
           ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:243: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          "replicas" -> replicas.asJava,
                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:244: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          "log_dirs" -> replicas.map(r => replicaLogDirAssignment.getOrElse(new TopicPartitionReplica(tp.topic, tp.partition, r), AnyLogDir)).asJava
                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:381: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        adminClient.describeReplicaLogDirs(replicaAssignment.keySet.asJava).all().get().asScala
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:381: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        adminClient.describeReplicaLogDirs(replicaAssignment.keySet.asJava).all().get().asScala
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:601: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterReplicaLogDirsResult = adminClient.alterReplicaLogDirs(replicaAssignment.asJava, new AlterReplicaLogDirsOptions().timeoutMs(timeoutMs.toInt))
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ReassignPartitionsCommand.scala:602: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicasAssignedToFutureDir = alterReplicaLogDirsResult.values().asScala.flatMap { case (replica, future) => {
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val configsAsString = config.entries.asScala.filter(!_.isDefault).map { ce => s"${ce.name}=${ce.value}" }.mkString(",")
                                   ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      print("\tReplicas: " + info.replicas.asScala.map(_.id).mkString(","))
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      print("\tIsr: " + info.isr.asScala.map(_.id).mkString(","))
                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:238: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .toMap.asJava
           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:235: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val configsMap = topic.configsToAdd.stringPropertyNames()
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val topicsInfo = adminClient.describeTopics(topics.asJavaCollection).values()
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:267: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        }}.toMap.asJava).all().get()
           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:262: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            new util.ArrayList(replicaMap.map(p => p._2.asJava).asJavaCollection).asInstanceOf[util.List[util.List[Integer]]]
                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:262: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            new util.ArrayList(replicaMap.map(p => p._2.asJava).asJavaCollection).asInstanceOf[util.List[util.List[Integer]]]
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:272: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val allConfigs = adminClient.describeConfigs(topics.map(new ConfigResource(Type.TOPIC, _)).asJavaCollection).values()
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:273: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val liveBrokers = adminClient.describeCluster().nodes().get().asScala.map(_.id())
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val topicDescriptions = adminClient.describeTopics(topics.asJavaCollection).all().get().values().asScala
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val topicDescriptions = adminClient.describeTopics(topics.asJavaCollection).all().get().values().asScala
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:280: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val sortedPartitions = td.partitions.asScala.sortBy(_.partition)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:283: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val hasNonDefault = config.entries().asScala.exists(!_.isDefault)
                                            ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:304: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      adminClient.deleteTopics(topics.asJavaCollection).all().get()
                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      doGetTopics(allTopics.names().get().asScala.toSeq.sorted, topicWhitelist, excludeInternalTopics)
                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              val configs = adminZkClient.fetchEntityConfig(ConfigType.Topic, topic).asScala
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:405: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                val config = new JConfig(configs.map{ case (k, v) => new ConfigEntry(k, v) }.asJavaCollection)
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:426: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                  assignedReplicas.map(asNode).toList.asJava,
                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                  isr.map(asNode).toList.asJava)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:497: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configsToBeAdded = opts.topicConfig.getOrElse(Collections.emptyList()).asScala.map(_.split("""\s*=\s*"""))
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:511: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configsToBeDeleted = opts.configsToDelete.getOrElse(Collections.emptyList()).asScala.map(_.trim())
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:534: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    original.map(f => Integer.valueOf(f._1) -> f._2.map(e => Integer.valueOf(e)).asJava).asJava
                ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:534: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    original.map(f => Integer.valueOf(f._1) -> f._2.map(e => Integer.valueOf(e)).asJava).asJava
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:681: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, configOpt, allTopicLevelOpts -- Set(alterOpt, createOpt))
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:682: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, deleteConfigOpt, allTopicLevelOpts -- Set(alterOpt) ++ Set(bootstrapServerOpt))
                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:683: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, partitionsOpt, allTopicLevelOpts -- Set(alterOpt, createOpt))
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:684: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, replicationFactorOpt, allTopicLevelOpts -- Set(createOpt))
                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:685: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, replicaAssignmentOpt, allTopicLevelOpts -- Set(createOpt,alterOpt))
                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:689: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderReplicatedPartitionsOpt + topicsWithOverridesOpt)
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:689: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderReplicatedPartitionsOpt + topicsWithOverridesOpt)
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:689: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderReplicatedPartitionsOpt + topicsWithOverridesOpt)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:691: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:691: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:691: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:691: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnderMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:693: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportAtMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:693: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportAtMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:693: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportAtMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:693: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportAtMinIsrPartitionsOpt + topicsWithOverridesOpt + zkConnectOpt)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:695: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnavailablePartitionsOpt + topicsWithOverridesOpt)
                                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:695: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnavailablePartitionsOpt + topicsWithOverridesOpt)
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:695: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts - reportUnavailablePartitionsOpt + topicsWithOverridesOpt)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:697: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
        allTopicLevelOpts -- Set(describeOpt) ++ allReplicationReportOpts)
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:698: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, ifExistsOpt, allTopicLevelOpts -- Set(alterOpt, deleteOpt, describeOpt) ++ Set(bootstrapServerOpt))
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:699: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, ifNotExistsOpt, allTopicLevelOpts -- Set(createOpt) ++ Set(bootstrapServerOpt))
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/admin/TopicCommand.scala:700: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      CommandLineUtils.checkInvalidArgs(parser, options, excludeInternalTopicOpt, allTopicLevelOpts -- Set(listOpt, describeOpt))
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    zkSecurityMigratorUtils.currentZooKeeper.setACL(path, zkClient.defaultAcls(path).asJava, -1, SetACLCallback, setPromise)
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:168: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          children.asScala.map { child =>
          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ZkSecurityMigrator.scala:205: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            zkHandle.setACL(path, zkClient.defaultAcls(path).asJava, -1, SetACLCallback, ctx)
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/api/package.scala:30: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        self.data.topicPartitions.asScala.iterator.flatMap { topicPartition =>
                  ^
/mydata/kafka/core/src/main/scala/kafka/api/package.scala:31: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          topicPartition.partitionId.asScala.map { partitionId =>
                         ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:487: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assignment = partitionStateInfo.basePartitionState.replicas.asScala.iterator.map(_.toInt).toSeq,
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:488: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        isr = partitionStateInfo.basePartitionState.isr.asScala.iterator.map(_.toInt).toSet
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:559: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assignment = partitionStateInfo.basePartitionState.replicas.asScala.iterator.map(_.toInt).toSeq,
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/cluster/Partition.scala:633: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val removedReplicas = remoteReplicasMap.keys -- replicaSet
                                                 ^
/mydata/kafka/core/src/main/scala/kafka/common/InterBrokerSendThread.scala:85: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (node <- unsentRequests.nodes.asScala) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/common/InterBrokerSendThread.scala:110: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        for (request <- requests.asScala) {
                        ^
/mydata/kafka/core/src/main/scala/kafka/common/InterBrokerSendThread.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (request <- timedOutRequests.asScala) {
                    ^
/mydata/kafka/core/src/main/scala/kafka/common/InterBrokerSendThread.scala:158: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (requests <- unsent.values.asScala) {
                            ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:141: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Map("broker-id" -> brokerNode.idString).asJava,
           ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:148: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new ManualMetadataUpdater(Seq(brokerNode).asJava),
                                     ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:388: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        leaderIsrAndControllerEpoch.leaderAndIsr.isr.map(Integer.valueOf).asJava,
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:390: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        replicas.map(Integer.valueOf).asJava,
                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:426: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            leaderIsrAndControllerEpoch.leaderAndIsr.isr.map(Integer.valueOf).asJava,
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:428: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            replicas.map(Integer.valueOf).asJava,
                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:429: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            offlineReplicas.map(Integer.valueOf).asJava)
                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:448: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    leaderAndIsrRequestMap.filterKeys(controllerContext.liveOrShuttingDownBrokerIds.contains).foreach {
                           ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:463: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          brokerEpoch, leaderAndIsrPartitionStates.asJava, leaders.asJava)
                       ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:463: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          brokerEpoch, leaderAndIsrPartitionStates.asJava, leaders.asJava)
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:492: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new UpdateMetadataRequest.Broker(broker.id, endPoints.asJava, broker.rack.orNull)
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:499: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new UpdateMetadataRequest.Broker(broker.id, endPoints.asJava, broker.rack.orNull)
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:506: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        brokerEpoch, partitionStates.asJava, liveBrokers.asJava)
                     ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:506: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        brokerEpoch, partitionStates.asJava, liveBrokers.asJava)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:520: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      val partitionErrorsForDeletingTopics = stopReplicaResponse.responses.asScala.filterKeys { partition =>
                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:520: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionErrorsForDeletingTopics = stopReplicaResponse.responses.asScala.filterKeys { partition =>
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:529: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitions = requests.map(_.replica.topicPartition).asJava
                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerChannelManager.scala:534: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    stopReplicaRequestMap.filterKeys(controllerContext.liveOrShuttingDownBrokerIds.contains).foreach { case (brokerId, replicaInfoList) =>
                          ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerContext.scala:120: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
    liveBrokers -= oldMetadata
                ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerContext.scala:121: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
    liveBrokers += newMetadata
                ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerContext.scala:125: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
  def liveBrokerIds: Set[Int] = liveBrokerEpochs.keySet -- shuttingDownBrokerIds
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerContext.scala:219: method - in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.diff
    allTopics -= topic
              ^
/mydata/kafka/core/src/main/scala/kafka/controller/ControllerEventManager.scala:116: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    queue.asScala.foreach(_.preempt(processor))
    ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:371: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val existingBrokers = controllerContext.liveOrShuttingDownBrokerIds -- newBrokers
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:889: method -- in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map.
    val updatedPartitionsBeingReassigned = controllerContext.partitionsBeingReassigned -- partitionsToBeRemoved
                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offlineReplicas = leaderAndIsrResponse.responses.asScala.collect {
                                               ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1129: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val onlineReplicas = leaderAndIsrResponse.responses.asScala.collect {
                                              ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1133: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val currentOfflineReplicas = previousOfflineReplicas -- onlineReplicas ++ offlineReplicas
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1135: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val newOfflineReplicas = currentOfflineReplicas -- previousOfflineReplicas
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1160: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      val deletedReplicas = partitionErrors.keySet -- partitionsInError
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1275: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val newBrokerIds = curBrokerIds -- liveOrShuttingDownBrokerIds
                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1276: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val deadBrokerIds = liveOrShuttingDownBrokerIds -- curBrokerIds
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/KafkaController.scala:1333: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val deletedTopics = controllerContext.allTopics -- topics
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/controller/PartitionStateMachine.scala:431: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      result.right.foreach { leaderAndIsr =>
             ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:320: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      }.right.getOrElse(false)
        ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:318: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      result.right.map { leaderAndIsr =>
             ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:325: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
        result.right.toOption.map { leaderAndIsr =>
               ^
/mydata/kafka/core/src/main/scala/kafka/controller/ReplicaStateMachine.scala:353: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
          result.right.map { leaderAndIsr =>
                 ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:262: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val unseenTopicsForDeletion = topics -- controllerContext.topicsWithDeletionStarted
                                         ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:297: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      val deadReplicasForTopic = replicasForTopicsToBeDeleted -- aliveReplicasForTopic
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/controller/TopicDeletionManager.scala:299: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      val replicasForDeletionRetry = aliveReplicasForTopic -- successfullyDeletedReplicas
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:391: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
              val missing = group.allMembers -- groupAssignment.keySet
                                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:488: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
          groupErrors += groupId -> error
                      ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:493: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
              groupErrors += groupId ->
                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:499: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
                    groupErrors += groupId ->
                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupCoordinator.scala:505: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
                    groupErrors += groupId -> Errors.NON_EMPTY_GROUP
                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadata.scala:407: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      .mapValues(_.size)
       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:222: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(new SimpleRecord(timestamp, key, value)).asJava))
               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:344: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val buffer = ByteBuffer.allocate(AbstractRecords.estimateSizeInBytes(magicValue, compressionType, records.asJava))
                                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:573: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          memRecords.batches.asScala.foreach { batch =>
                     ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:592: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              for (record <- batch.asScala) {
                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:640: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
          .mapValues(_.map { case (groupTopicPartition, offset) => (groupTopicPartition.topicPartition, offset) })
           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:648: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
            .mapValues(_.map { case (groupTopicPartition, offset) => (groupTopicPartition.topicPartition, offset)})
             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/ProducerIdManager.scala:39: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> CurrentVersion,
                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:122: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      val coordinatorEpochAndMetadata = txnManager.getTransactionState(transactionalId).right.flatMap {
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:137: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      val result: ApiResult[(Int, TxnTransitMetadata)] = coordinatorEpochAndMetadata.right.flatMap {
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:239: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      val result: ApiResult[(Int, TxnTransitMetadata)] = txnManager.getTransactionState(transactionalId).right.flatMap {
                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:302: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      val preAppendResult: ApiResult[(Int, TxnTransitMetadata)] = txnManager.getTransactionState(transactionalId).right.flatMap {
                                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:372: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
              val preSendResult: ApiResult[(TransactionMetadata, TxnTransitMetadata)] = txnManager.getTransactionState(transactionalId).right.flatMap {
                                                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionCoordinator.scala:448: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      txnManager.getTransactionState(txnIdAndPidEpoch.transactionalId).right.flatMap {
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:67: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map.empty[String, String].asJava,
               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val markersPerTxnTopicPartition = new ConcurrentHashMap[Int, BlockingQueue[TxnIdAndMarkerEntry]]().asScala
                                            ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:138: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val markersQueuePerBroker: concurrent.Map[Int, TxnMarkerQueue] = new ConcurrentHashMap[Int, TxnMarkerQueue]().asScala
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:192: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    txnLogAppendRetries.asScala.foreach { txnLogAppend =>
    ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:205: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (txnIdAndMarker: TxnIdAndMarkerEntry <- txnIdAndMarkerEntries.asScala) {
                                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:211: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val topicPartitions = txnIdAndMarker.txnMarkerEntry.partitions.asScala.toSet
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val markersToSend = entries.asScala.map(_.txnMarkerEntry).asJava
                                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val markersToSend = entries.asScala.map(_.txnMarkerEntry).asJava
                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:323: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val marker = new TxnMarkerEntry(producerId, producerEpoch, coordinatorEpoch, result, topicPartitions.toList.asJava)
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:374: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (entry: TxnIdAndMarkerEntry <- queue.asScala)
                                         ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerChannelManager.scala:380: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        for (entry: TxnIdAndMarkerEntry <- queue.asScala)
                                           ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerRequestCompletionHandler.scala:42: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (txnIdAndMarker <- txnIdAndMarkerEntries.asScala) {
                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerRequestCompletionHandler.scala:83: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                txnMarker.partitions.asScala.toSet)
                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerRequestCompletionHandler.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (txnIdAndMarker <- txnIdAndMarkerEntries.asScala) {
                             ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionMarkerRequestCompletionHandler.scala:133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                for ((topicPartition, error) <- errors.asScala) {
                                                ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:230: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      .right.map(_.getOrElse(throw new IllegalStateException(s"Unexpected empty transaction metadata returned while putting $txnMetadata")))
       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:340: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            memRecords.batches.asScala.foreach { batch =>
                       ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/transaction/TransactionStateManager.scala:341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              for (record <- batch.asScala) {
                             ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:542: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
        cleanFiles += file
                   ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:553: method + in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set or fall back to Set.union
          swapFiles += file
                    ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:749: method toIterator in trait IterableOnceOps is deprecated (since 2.13.0): Use .iterator instead of .toIterator
      val unflushed = logSegments(this.recoveryPoint, Long.MaxValue).toIterator
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:885: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach { batch =>
            ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1064: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            for (batch <- validRecords.batches.asScala) {
                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1079: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                                                 records.records.asScala.map(_.offset))
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1087: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              case None => records.batches.asScala.head.baseOffset()
                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1094: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              s"First 10 offsets in append: ${records.records.asScala.take(10).map(_.offset)}, last offset in" +
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        validRecords.batches.asScala.foreach { batch =>
                     ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- records.batches.asScala) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:1317: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- records.batches.asScala) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2095: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def logSegments: Iterable[LogSegment] = segments.values.asScala
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      view.values.asScala
           ^
/mydata/kafka/core/src/main/scala/kafka/log/Log.scala:2327: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val firstBatch = sourceRecords.batchesFrom(position).asScala.head
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:119: object DeprecatedDoubleOrdering in object Ordering is deprecated (since 2.13.0): There are multiple ways to order Doubles (Ordering.Double.TotalOrdering, Ordering.Double.IeeeOrdering). Specify one by using a local import, assigning an implicit val, or passing it explicitly. See the documentation for details.
             def value: Int = cleaners.map(_.lastStats).map(100 * _.bufferUtilization).max.toInt
                                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:133: object DeprecatedDoubleOrdering in object Ordering is deprecated (since 2.13.0): There are multiple ways to order Doubles (Ordering.Double.TotalOrdering, Ordering.Double.IeeeOrdering). Specify one by using a local import, assigning an implicit val, or passing it explicitly. See the documentation for details.
             def value: Int = cleaners.map(_.lastStats).map(_.elapsedSecs).max.toInt
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:931: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (batch <- records.batches.asScala) {
                            ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleaner.scala:942: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            for (record <- batch.asScala) {
                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogCleanerManager.scala:407: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
            checkpoint.write(existing + (topicPartition -> offset))
                                      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:91: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  val compact = getList(LogConfig.CleanupPolicyProp).asScala.map(_.toLowerCase(Locale.ROOT)).contains(LogConfig.Compact)
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  val delete = getList(LogConfig.CleanupPolicyProp).asScala.map(_.toLowerCase(Locale.ROOT)).contains(LogConfig.Delete)
                      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:217: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    override def headers = List("Name", "Description", "Type", "Default", "Valid Values", ServerDefaultHeaderName,
                               ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def configNames: Seq[String] = configDef.names.asScala.toSeq.sorted
                                           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    defaults.asScala.foreach { case (k, v) => props.put(k, v) }
    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:309: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val overriddenKeys = overrides.keySet.asScala.map(_.asInstanceOf[String]).toSet
                                   ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for(name <- props.asScala.keys)
                ^
/mydata/kafka/core/src/main/scala/kafka/log/LogConfig.scala:323: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[kafka] def configKeys: Map[String, ConfigKey] = configDef.configKeys.asScala
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:95: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      _liveLogDirs.asScala.toBuffer
      ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    _liveLogDirs.asScala.foreach(logDirsSet -=)
    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:704: method toStream in trait IterableOnceOps is deprecated (since 2.13.0): Use .to(LazyList) instead of .toStream
          .toStream // to prevent actually mapping the whole list, lazy map
           ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:727: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        info(s"Created log for partition $topicPartition in $logDir with properties " + s"{${config.originals.asScala.mkString(", ")}}.")
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:897: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      val logCounts = allLogs.groupBy(_.dir.getParent).mapValues(_.size)
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogManager.scala:898: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val zeros = _liveLogDirs.asScala.map(dir => (dir.getPath, 0)).toMap
                  ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:192: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val nextBatches = records.batchesFrom(position).asScala.iterator
                                         ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:343: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (batch <- log.batches.asScala) {
                        ^
/mydata/kafka/core/src/main/scala/kafka/log/LogSegment.scala:456: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetchData.records.batches.asScala.lastOption
                        ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:163: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val first = records.batches.asScala.head
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:173: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- records.batches.asScala) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (record <- batch.asScala) {
                     ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:210: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- records.batches.asScala) {
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:216: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (record <- batch.asScala) {
                     ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val batches = records.batches.asScala
                          ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:320: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        for (record <- batch.asScala) {
                       ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val first = records.batches.asScala.head
                            ^
/mydata/kafka/core/src/main/scala/kafka/log/LogValidator.scala:396: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      validatedRecords.asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/log/OffsetIndex.scala:150: method + in class Int is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
        require(_entries * entrySize == mmap.position(), entries + " entries but file position in index is " + mmap.position() + ".")
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:596: method retain in trait MapOps is deprecated (since 2.13.0): Use filterInPlace instead
    producers.retain { case (_, lastEntry) =>
              ^
/mydata/kafka/core/src/main/scala/kafka/log/ProducerStateManager.scala:763: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val nextIncompleteTxn = ongoingTxns.values.asScala.find(_.producerId != completedTxn.producerId)
                                        ^
/mydata/kafka/core/src/main/scala/kafka/log/TimeIndex.scala:138: method + in class Int is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
        require(_entries * entrySize == mmap.position(), _entries + " entries but file position in index is " + mmap.position() + ".")
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/network/RequestChannel.scala:288: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def value = processors.values.asScala.foldLeft(0) {(total, processor) =>
                           ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val ioWaitRatioMetricNames = dataPlaneProcessors.values.asScala.map { p =>
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:166: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val expiredConnectionsKilledCountMetricNames = dataPlaneProcessors.values.asScala.map { p =>
                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:199: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    dataPlaneAcceptors.values.asScala.foreach { _.startProcessors(DataPlaneThreadPrefix) }
                       ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:275: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dataPlaneAcceptors.asScala.values.foreach(_.shutdown())
      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:277: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dataPlaneProcessors.asScala.values.foreach(_.shutdown())
      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:289: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dataPlaneAcceptors.asScala.foreach { case (endpoint, acceptor) =>
      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dataPlaneAcceptors.asScala.values.foreach(_.removeProcessors(oldNumNetworkThreads - newNumNetworkThreads, dataPlaneRequestChannel))
      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:335: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dataPlaneAcceptors.asScala.remove(endpoint).foreach(_.shutdown())
      ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:697: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[kafka] val metricTags = mutable.LinkedHashMap(
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:872: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    selector.completedReceives.asScala.foreach { receive =>
             ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:910: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    selector.completedSends.asScala.foreach { send =>
             ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:939: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    selector.disconnected.keySet.asScala.foreach { connectionId =>
                          ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1030: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    selector.channels.asScala.foreach { channel =>
             ^
/mydata/kafka/core/src/main/scala/kafka/network/SocketServer.scala:1240: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      SocketServer.ListenerReconfigurableConfigs.asJava
                   ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/Acl.scala:78: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Map(Acl.VersionKey -> Acl.CurrentVersion, Acl.AclsKey -> acls.map(acl => acl.toMap.asJava).toList.asJava)
                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/Acl.scala:78: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Map(Acl.VersionKey -> Acl.CurrentVersion, Acl.AclsKey -> acls.map(acl => acl.toMap.asJava).toList.asJava)
                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:80: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configs = javaConfigs.asScala
                  ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:247: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
        .filterKeys(resource => resourceName.startsWith(resource.name))
         ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:246: method to in trait SortedOps is deprecated (since 2.13.0): Use rangeTo
        .to(Resource(resourceType, resourceName.take(1), PatternType.PREFIXED))
         ^
/mydata/kafka/core/src/main/scala/kafka/security/auth/SimpleAclAuthorizer.scala:245: method from in trait SortedOps is deprecated (since 2.13.0): Use rangeFrom
        .from(Resource(resourceType, resourceName, PatternType.PREFIXED))
         ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:119: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val fetchStates = partitionStates.partitionStateMap.asScala
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:292: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            partitionsWithError ++= partitionStates.partitionSet.asScala
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:437: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val newStates: Map[TopicPartition, PartitionFetchState] = partitionStates.partitionStates.asScala
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:449: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    partitionStates.set(newStates.asJava)
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/AbstractFetcherThread.scala:646: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    partitionStates.partitionStates.asScala.map { state =>
                    ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        topic.configs.asScala.foreach { entry =>
              ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:115: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          topic.assignments.asScala.foreach {
                ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:117: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              assignment.brokerIds().asScala.map(a => a: Int)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              assignments.map { case (k, v) =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:136: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                (k: java.lang.Integer) -> v.map(i => i: java.lang.Integer).asJava
                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            topic.configs().asScala.foreach(config => javaConfigs.put(config.name(), config.value()))
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val reassignment = Option(newPartition.newAssignments).map(_.asScala.map(_.asScala.map(_.toInt))).map { assignments =>
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val reassignment = Option(newPartition.newAssignments).map(_.asScala.map(_.asScala.map(_.toInt))).map { assignments =>
                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        config.originals.asScala.filter(_._2 != null) ++ config.values.asScala
               ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        config.originals.asScala.filter(_._2 != null) ++ config.values.asScala
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:325: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new DescribeConfigsResponse.Config(ApiError.NONE, configEntries.asJava)
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:360: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                (name, value) => new DescribeConfigsResponse.ConfigEntry(name, value.toString, ConfigSource.DYNAMIC_BROKER_LOGGER_CONFIG, false, false, List.empty.asJava))
                                                                                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:381: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val configEntriesMap = config.entries.asScala.map(entry => (entry.name, entry.value)).toMap
                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        config.entries.asScala.foreach { configEntry =>
               ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:466: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new ConfigResource(resource.`type`(), resource.name), configEntriesMap.asJava))
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:476: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
          .mapValues(_.size).filter(_._2 > 1).keys.toSet
           ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:539: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            val validLevelsStr = LogLevelConfig.VALID_LOG_LEVELS.asScala.mkString(", ")
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:645: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new DescribeConfigsResponse.ConfigEntry(name, valueAsString, source, isSensitive, false, synonyms.asJava)
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:665: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new DescribeConfigsResponse.ConfigEntry(name, valueAsString, source, isSensitive, readOnly, synonyms.asJava)
                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/BrokerMetadataCheckpoint.scala:60: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    Files.deleteIfExists(new File(file + ".tmp").toPath()) // try to delete any existing temp files for cleanliness
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:113: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      (userEntity.toList ++ clientIdEntity.toList).asJava
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:179: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
  private val delayQueueSensor = metrics.sensor(quotaType + "-delayQueue")
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:350: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case _ => quotaCallback.quotaMetricTags(clientQuotaType, session.principal, clientId).asScala.toMap
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    getQuotaMetricConfig(quotaLimit(metricTags.asJava))
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:486: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Option(quotaCallback.quotaLimit(clientQuotaType, metricTags.asJava)).foreach { newQuota =>
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:493: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      allMetrics.asScala.filterKeys(n => n.name == quotaMetricName.name && n.group == quotaMetricName.group).foreach {
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:493: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      allMetrics.asScala.filterKeys(n => n.name == quotaMetricName.name && n.group == quotaMetricName.group).foreach {
      ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:510: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      quotaMetricTags.asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:517: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      quotaMetricTags.asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientQuotaManager.scala:539: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      quotaMetricTags(Sanitizer.sanitize(principal.getName), clientId).asJava
                     ^
/mydata/kafka/core/src/main/scala/kafka/server/ClientRequestQuotaManager.scala:79: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      quotaMetricTags.asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:61: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      topicConfig.asScala.foreach { case (key, value) =>
      ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:65: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      logs.foreach(_.updateConfig(topicConfig.asScala.keySet, logConfig))
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/ConfigHandler.scala:213: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case javaList: java.util.List[_] => check(javaList.asScala)
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DelayedElectLeader.scala:78: method - in trait Map is deprecated (since 2.13.0): Use - or removed on an immutable Map
            waitingPartitions -= tp
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    tokenInfoMap(RenewersKey) = tokenInfo.renewersAsString.asScala.map(e => Sanitizer.sanitize(e)).asJava
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    tokenInfoMap(RenewersKey) = tokenInfo.renewersAsString.asScala.map(e => Sanitizer.sanitize(e)).asJava
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val tokenInfo = new TokenInformation(tokenId, owner, renewers.asJava,
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    tokenCache.updateCache(token, scramCredentialMap.asJava)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:277: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val tokenInfo = new TokenInformation(tokenId, owner, renewers.asJava, issueTimeStamp, maxLifeTimeStamp, expiryTimeStamp)
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:365: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    if (principal.equals(tokenInfo.owner) || tokenInfo.renewers.asScala.toList.contains(principal)) true else false
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/DelegationTokenManager.scala:472: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    tokenCache.tokens.asScala.toList
               ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:77: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] val DynamicSecurityConfigs = SslConfigs.RECONFIGURABLE_CONFIGS.asScala
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:89: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    DynamicListenerConfig.ReconfigurableConfigs -- ClusterLevelListenerConfigs
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:139: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configNames = props.asScala.keySet
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.keySet.intersect(DynamicConfig.Broker.nonDynamicProps)
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:159: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.foreach {
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:167: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    KafkaConfig.configKeys.filterKeys(AllDynamicConfigs.contains).values.foreach { config =>
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:178: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    }.toMap.asJava
      ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:184: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] val staticBrokerConfigs = ConfigDef.convertToStringMapWithPasswordValues(kafkaConfig.originalsFromThisConfig).asScala
                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:185: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] val staticDefaultConfigs = ConfigDef.convertToStringMapWithPasswordValues(KafkaConfig.defaultValues.asJava).asScala
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:185: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] val staticDefaultConfigs = ConfigDef.convertToStringMapWithPasswordValues(KafkaConfig.defaultValues.asJava).asScala
                                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    verifyReconfigurableConfigs(reconfigurable.reconfigurableConfigs.asScala)
                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dynamicBrokerConfigs ++= props.asScala
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:285: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      dynamicDefaultConfigs ++= props.asScala
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:306: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val newConfig = new KafkaConfig(kafkaProps.asJava, false, None)
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:337: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    configProps.asScala.filterKeys(isPasswordConfig).foreach { case (name, value) => encodePassword(name, value) }
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:337: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configProps.asScala.filterKeys(isPasswordConfig).foreach { case (name, value) => encodePassword(name, value) }
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:371: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    props.asScala.filterKeys(isPasswordConfig).foreach { case (name, value) => decodePassword(name, value) }
                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:371: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.filterKeys(isPasswordConfig).foreach { case (name, value) => decodePassword(name, value) }
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:381: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    if (props.asScala.keySet.exists(isPasswordConfig)) {
        ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:383: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
        persistentProps.asScala.filterKeys(isPasswordConfig).foreach { case (configName, value) =>
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:383: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        persistentProps.asScala.filterKeys(isPasswordConfig).foreach { case (configName, value) =>
        ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:413: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      overrideProps(newProps, propsOverride.asScala)
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:415: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      overrideProps(newProps, propsOverride.asScala)
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:429: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      props.asScala
      ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:432: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val invalidProps = props.asScala.filter { case (k, v) =>
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:449: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    if (reconfigurable.reconfigurableConfigs.asScala.exists(key => oldConfig.originals.get(key) != newConfig.get(key)))
                       ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:454: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    newProps.asScala.filter {
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:494: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val newConfig = new KafkaConfig(newProps.asJava, !validateOnly, None)
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:499: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        newConfig.valuesFromThisConfig.keySet.asScala.foreach(customConfigs.remove)
                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:511: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          if (needsReconfiguration(reconfigurable.reconfigurableConfigs.asJava, updatedMap.keySet)) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:530: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    reconfigurableConfigs.asScala.intersect(updatedKeys).nonEmpty
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:554: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    allNewConfigs.asScala.foreach { case (k, v) => newConfigs.put(k, v.asInstanceOf[AnyRef]) }
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:605: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    newConfig.valuesFromThisConfig.asScala.filterKeys(DynamicLogConfig.ReconfigurableConfigs.contains).foreach { case (k, v) =>
                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:605: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    newConfig.valuesFromThisConfig.asScala.filterKeys(DynamicLogConfig.ReconfigurableConfigs.contains).foreach { case (k, v) =>
              ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:617: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      props ++= newBrokerDefaults.asScala
                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:618: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      props ++= log.config.originals.asScala.filterKeys(log.config.overriddenConfigs.contains)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:618: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      props ++= log.config.originals.asScala.filterKeys(log.config.overriddenConfigs.contains)
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:620: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val logConfig = LogConfig(props.asJava)
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:621: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      log.updateConfig(newBrokerDefaults.asScala.keySet, logConfig)
                       ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:645: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    newConfig.values.asScala.filterKeys(DynamicThreadPool.ReconfigurableConfigs.contains).foreach { case (k, v) =>
                             ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:645: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    newConfig.values.asScala.filterKeys(DynamicThreadPool.ReconfigurableConfigs.contains).foreach { case (k, v) =>
              ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:729: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    val deleted = currentReporters.keySet -- updatedMetricsReporters
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:736: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    createReporters(added.asJava, configs)
                    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:742: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    updatedConfigs.asScala.foreach { case (k, v) => props.put(k, v.asInstanceOf[AnyRef]) }
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:745: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    reporters.asScala.foreach { reporter =>
    ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:749: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    server.notifyClusterListeners(reporters.asScala)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:757: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configs.get(KafkaConfig.MetricReporterClassesProp).asInstanceOf[util.List[String]].asScala
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicBrokerConfig.scala:847: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      newConfig.originals.asScala.filter { case (key, _) =>
                ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicConfig.scala:63: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val nonDynamicProps = KafkaConfig.configNames.toSet -- brokerConfigDef.names.asScala
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicConfig.scala:113: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val propKeys = props.keySet.asScala.map(_.asInstanceOf[String])
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/DynamicConfigManager.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val loggableConfig = entityConfig.asScala.map {
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:242: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    fetchData.entrySet.iterator.asScala.foreach(entry => {
                       ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    toForget.iterator.asScala.foreach(p => {
             ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:336: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    fetchData.entrySet.asScala.foreach(entry => fun(entry.getKey, entry.getValue))
              ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:367: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    fetchData.entrySet.asScala.foreach(entry => fun(entry.getKey, entry.getValue))
              ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:377: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updates.entrySet.asScala.foreach(entry => {
              ^
/mydata/kafka/core/src/main/scala/kafka/server/FetchSession.scala:409: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      session.partitionMap.iterator.asScala.foreach(part => {
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:244: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      sendResponseExemptThrottle(request, new StopReplicaResponse(Errors.STALE_BROKER_EPOCH, Map.empty[TopicPartition, Errors].asJava))
                                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:258: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      sendResponseExemptThrottle(request, new StopReplicaResponse(error, result.asJava))
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:281: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        updateMetadataRequest.partitionStates.keySet.asScala.map(_.topic).foreach { topic =>
                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        updateMetadataRequest.partitionStates.asScala.foreach { case (tp, _) =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:311: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
         ControlledShutdownResponse.prepareResponse(Errors.NONE, partitionsRemaining.asJava)
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new OffsetCommitResponse(requestThrottleMs, combinedCommitStatus.asJava))
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:361: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (topicData <- offsetCommitRequest.data().topics().asScala) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        for (partitionData <- topicData.partitions().asScala) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:371: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (topicData <- offsetCommitRequest.data().topics().asScala) {
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:372: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        for (partitionData <- topicData.partitions().asScala) {
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:479: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for ((topicPartition, memoryRecords) <- produceRequest.partitionRecordsOrFail.asScala) {
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:541: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          closeConnection(request, new ProduceResponse(mergedResponseStatus.asJava).errorCounts)
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:548: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        sendResponse(request, Some(new ProduceResponse(mergedResponseStatus.asJava, maxThrottleTimeMs)), None)
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:698: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val abortedTransactions = data.abortedTransactions.map(_.asJava).orNull
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:715: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        unconvertedFetchResponse.responseData().asScala.foreach { case (tp, unconvertedPartitionData) =>
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:725: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        response.responseData.asScala.foreach { case (topicPartition, data) =>
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:735: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            send.recordConversionStats.asScala.toMap.foreach {
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:851: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    sendResponseMaybeThrottle(request, requestThrottleMs => new ListOffsetResponse(requestThrottleMs, mergedResponseMap.asJava))
                                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:859: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (authorizedRequestInfo, unauthorizedRequestInfo) = offsetRequest.partitionTimestamps.asScala.partition {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:863: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val unauthorizedResponseStatus = unauthorizedRequestInfo.mapValues(_ =>
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:864: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
      new ListOffsetResponse.PartitionData(Errors.TOPIC_AUTHORIZATION_FAILED, List[JLong]().asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:864: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new ListOffsetResponse.PartitionData(Errors.TOPIC_AUTHORIZATION_FAILED, List[JLong]().asJava)
                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:872: value maxNumOffsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
          maxNumOffsets = partitionData.maxNumOffsets,
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:875: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
        (topicPartition, new ListOffsetResponse.PartitionData(Errors.NONE, offsets.map(JLong.valueOf).asJava))
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:875: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        (topicPartition, new ListOffsetResponse.PartitionData(Errors.NONE, offsets.map(JLong.valueOf).asJava))
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:884: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:884: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:887: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:887: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                                                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:898: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (authorizedRequestInfo, unauthorizedRequestInfo) = offsetRequest.partitionTimestamps.asScala.partition {
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:902: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val unauthorizedResponseStatus = unauthorizedRequestInfo.mapValues(_ => {
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1045: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
      val nonExistentTopics = topics -- topicResponses.map(_.topic).toSet
                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1073: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      metadataRequest.topics.asScala.toSet
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1087: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
          authorizedTopics --= unauthorizedForCreateTopics
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1142: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
         brokers.flatMap(_.getNode(request.context.listenerName)).asJava,
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
         completeTopicMetadata.asJava,
         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            val (authorizedPartitions, unauthorizedPartitions) = offsetFetchRequest.partitions.asScala
                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1193: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            new OffsetFetchResponse(requestThrottleMs, Errors.NONE, (authorizedPartitionData ++ unauthorizedPartitionData).asJava)
                                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1203: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                new OffsetFetchResponse(requestThrottleMs, Errors.NONE, authorizedPartitionData.asJava)
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1206: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              val (authorizedPartitions, unauthorizedPartitions) = offsetFetchRequest.partitions.asScala
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1214: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                new OffsetFetchResponse(requestThrottleMs, Errors.NONE, (authorizedPartitionData ++ unauthorizedPartitionData).asJava)
                                                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1267: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val coordinatorEndpoint = topicMetadata.partitionMetadata.asScala
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1300: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeRequest.data().groups().asScala.foreach { groupId =>
                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1322: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .setMembers(members.asJava)
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1347: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Utils.to32BitField(authorizedOps.map(operation => operation.toJava.code().asInstanceOf[JByte]).asJava)
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1357: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            .setGroups(groups.map { group => new ListGroupsResponseData.ListedGroup()
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1368: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .setGroups(filteredGroups.map { group => new ListGroupsResponseData.ListedGroup()
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1391: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            .setMembers(joinResult.members.asJava)
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1434: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val protocols = joinGroupRequest.data.protocols.valuesList.asScala.map(protocol =>
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1473: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      syncGroupRequest.data.assignments.asScala.foreach { assignment =>
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1490: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val groups = deleteGroupsRequest.data.groupsNames.asScala.toSet
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1557: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val members = leaveGroupRequest.members().asScala.toList
                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1577: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            memberResponses.asJava,
            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1639: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      createTopicsRequest.data.topics.asScala.foreach { case topic =>
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1645: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      createTopicsRequest.data.topics.asScala.foreach { case topic =>
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1649: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      results.asScala.foreach(topic => {
      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1660: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      createTopicsRequest.data.topics.asScala.foreach { topic =>
                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1685: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val responseBody = new CreatePartitionsResponse(requestThrottleMs, results.asJava)
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1694: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val result = createPartitionsRequest.newPartitions.asScala.map { case (topic, _) =>
                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1700: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val dupes = createPartitionsRequest.duplicates.asScala
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1701: method -- in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map.
      val notDuped = createPartitionsRequest.newPartitions.asScala -- dupes
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1701: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val notDuped = createPartitionsRequest.newPartitions.asScala -- dupes
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1736: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      deleteTopicRequest.data.topicNames.asScala.foreach { case topic =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1744: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      deleteTopicRequest.data.topicNames.asScala.foreach { case topic =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1751: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      deleteTopicRequest.data.topicNames.asScala.foreach { case topic =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1755: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      results.asScala.foreach(topic => {
      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1792: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for ((topicPartition, offset) <- deleteRecordsRequest.partitionOffsets.asScala) {
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1817: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new DeleteRecordsResponse(requestThrottleMs, mergedResponseStatus.asJava))
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1913: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val currentErrors = new ConcurrentHashMap[TopicPartition, Errors](responseStatus.map { case (k, v) => k -> v.error }.asJava)
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1942: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (marker <- markers.asScala) {
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:1947: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      marker.partitions.asScala.foreach { partition =>
             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2000: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionsToAdd = addPartitionsToTxnRequest.partitions.asScala
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2026: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new AddPartitionsToTxnResponse(requestThrottleMs, partitionErrors.asJava))
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2031: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              partitionsToAdd.map{tp => (tp, error)}.toMap.asJava)
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2096: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for ((topicPartition, commitedOffset) <- txnOffsetCommitRequest.offsets.asScala) {
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2116: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new TxnOffsetCommitResponse(requestThrottleMs, combinedCommitStatus.asJava))
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2164: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new DescribeAclsResponse(requestThrottleMs, ApiError.NONE, returnedAcls.asJava))
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2177: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val aclCreationResults = createAclsRequest.aclCreations.asScala.map { aclCreation =>
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2199: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new CreateAclsResponse(requestThrottleMs, aclCreationResults.asJava))
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2212: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val filters = deleteAclsRequest.filters.asScala
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2220: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              case Left(apiError) => filterResponseMap.put(i, new AclFilterResponse(apiError, Seq.empty.asJava))
                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2240: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val deletionResults = acls.flatMap { case (resource, acl) =>
                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val filterResponses = filters.indices.map { i =>
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          filterResponseMap.getOrElse(i, new AclFilterResponse(Seq.empty.asJava))
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val requestInfo = offsetForLeaderEpoch.epochsByTopicPartition.asScala
                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2278: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val endOffsetsForUnauthorizedPartitions = unauthorizedPartitions.mapValues(_ =>
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new OffsetsForLeaderEpochResponse(requestThrottleMs, endOffsetsForAllPartitions.asJava))
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2289: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (authorizedResources, unauthorizedResources) = alterConfigsRequest.configs.asScala.partition { case (resource, _) =>
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2305: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new AlterConfigsResponse(requestThrottleMs, (authorizedResult ++ unauthorizedResult).asJava))
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2346: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configs = alterConfigsRequest.data().resources().iterator().asScala.map { alterConfigResource =>
                                                                 ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      configResource -> alterConfigResource.configs().iterator().asScala.map {
                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2368: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        (authorizedResult ++ unauthorizedResult).asJava)))
                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2373: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (authorizedResources, unauthorizedResources) = describeConfigsRequest.resources.asScala.partition { resource =>
                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2382: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      resource -> Option(describeConfigsRequest.configNames(resource)).map(_.asScala.toSet)
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2390: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new DescribeConfigsResponse(requestThrottleMs, (authorizedConfigs ++ unauthorizedConfigs).asJava))
                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2397: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        replicaManager.alterReplicaLogDirs(alterReplicaDirsRequest.partitionDirs.asScala)
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2399: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        alterReplicaDirsRequest.partitionDirs.asScala.keys.map((_, Errors.CLUSTER_AUTHORIZATION_FAILED)).toMap
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    sendResponseMaybeThrottle(request, requestThrottleMs => new AlterReplicaLogDirsResponse(requestThrottleMs, responseMap.asJava))
                                                                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2412: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            describeLogDirsDirRequest.topicPartitions().asScala
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2419: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    sendResponseMaybeThrottle(request, throttleTimeMs => new DescribeLogDirsResponse(throttleTimeMs, logDirInfos.asJava))
                                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2438: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val renewerList = createTokenRequest.data.renewers.asScala.toList.map(entry =>
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2508: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new DescribeDelegationTokenResponse(requestThrottleMs, error, tokenDetails.asJava))
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2524: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val owners = if (describeTokenRequest.owners == null) None else Some(describeTokenRequest.owners.asScala.toList)
                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2712: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    requestChannel.updateErrorMetrics(request.header.apiKey, errorCounts.asScala)
                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:2720: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    responseOpt.foreach(response => requestChannel.updateErrorMetrics(request.header.apiKey, response.errorCounts.asScala))
                                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  val SslClientAuthenticationValidValues = SslClientAuth.VALUES.asScala.map(v => v.toString().toLowerCase(Locale.ROOT)).asJava.toArray(new Array[String](0))
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  val SslClientAuthenticationValidValues = SslClientAuth.VALUES.asScala.map(v => v.toString().toLowerCase(Locale.ROOT)).asJava.toArray(new Array[String](0))
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:231: value DEFAULT_SASL_ENABLED_MECHANISMS in class SaslConfigs is deprecated: see corresponding Javadoc for more information.
  val SaslEnabledMechanisms = SaslConfigs.DEFAULT_SASL_ENABLED_MECHANISMS
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:696: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    s"${SecurityProtocol.names.asScala.mkString(", ")}. It is an error to set this and $InterBrokerListenerNameProp " +
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:1089: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def configNames() = configDef.names().asScala.toList.sorted
                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:1090: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] def defaultValues: Map[String, _] = configDef.defaultValues.asScala
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:1091: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private[server] def configKeys: Map[String, ConfigKey] = configDef.configKeys.asScala
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:1307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      value.asInstanceOf[util.List[String]].asScala.toSet
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:237: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        notifyClusterListeners(kafkaMetricsReporters ++ metrics.reporters.asScala)
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:351: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    clusterResourceListeners.maybeAddAll(clusterListeners.asJava)
                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:447: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          Map.empty.asJava,
              ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaServer.scala:499: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                    metadataUpdater.setNodes(Seq(node(prevController)).asJava)
                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:81: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val replicas = partitionState.basePartitionState.replicas.asScala
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:83: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val offlineReplicaInfo = getEndpoints(snapshot, partitionState.offlineReplicas.asScala, listenerName, errorUnavailableEndpoints)
                                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:85: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val isr = partitionState.basePartitionState.isr.asScala
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:97: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              Optional.empty(), replicaInfo.asJava, isrInfo.asJava,
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:97: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              Optional.empty(), replicaInfo.asJava, isrInfo.asJava,
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:98: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              offlineReplicaInfo.asJava)
              ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:111: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                  ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:111: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:111: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                Optional.empty(), replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                replicaInfo.asJava, isrInfo.asJava, offlineReplicaInfo.asJava)
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:132: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new MetadataResponse.TopicMetadata(Errors.NONE, topic, Topic.isInternal(topic), partitionMetadata.toBuffer.asJava)
                                                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:158: method -- in trait SetOps is deprecated (since 2.13.0): Consider requiring an immutable Set
    topics -- metadataSnapshot.partitionStates.keySet
           ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:202: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      replicaIds.asScala
      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          state.basePartitionState.replicas.asScala.map(node).toArray,
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:227: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          state.basePartitionState.isr.asScala.map(node).toArray,
                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:228: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          state.offlineReplicas.asScala.map(node).toArray)
                ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val internalTopics = getAllTopics(snapshot).filter(Topic.isInternal).asJava
                                                      ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:232: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new Cluster(clusterId, nodes.values.filter(_ != null).toList.asJava,
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:233: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitions.toList.asJava,
                 ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:249: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.liveBrokers.asScala.foreach { broker =>
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        broker.endPoints.asScala.foreach { ep =>
               ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:260: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        aliveNodes(broker.id) = nodes.asScala
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/MetadataCache.scala:279: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        updateMetadataRequest.partitionStates.asScala.foreach { case (tp, info) =>
                              ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaAlterLogDirsThread.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val abortedTransactions = data.abortedTransactions.map(_.asJava).orNull
                                                               ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaAlterLogDirsThread.scala:89: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      request.fetchData.asScala.toSeq,
              ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherBlockingSend.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map("broker-id" -> sourceBroker.id.toString, "fetcher-id" -> fetcherId.toString).asJava,
         ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:201: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        fetchResponse.responseData.asScala.toSeq
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .setTargetTimes(requestPartitions.asJava)
                      ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:234: value offsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
          responsePartitionData.offsets.get(0)
                                ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:306: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val epochRequest = OffsetsForLeaderEpochRequest.Builder.forFollower(offsetForLeaderEpochRequestVersion, partitions.asJava, brokerConfig.brokerId)
                                                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      responseBody.responses.asScala
                   ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val partitions = stopReplicaRequest.partitions.asScala.toSet
                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:669: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            (absolutePath, new LogDirInfo(Errors.NONE, replicaInfos.asJava))
                                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:671: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            (absolutePath, new LogDirInfo(Errors.NONE, Map.empty[TopicPartition, ReplicaInfo].asJava))
                                                                ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:676: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          (absolutePath, new LogDirInfo(Errors.KAFKA_STORAGE_ERROR, Map.empty[TopicPartition, ReplicaInfo].asJava))
                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:679: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          (absolutePath, new LogDirInfo(Errors.forException(t), Map.empty[TopicPartition, ReplicaInfo].asJava))
                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1098: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            val partitionInfo = new DefaultPartitionView(replicaInfoSet.asJava, leaderReplica)
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    leaderAndIsrRequest.partitionStates.asScala.foreach { case (topicPartition, stateInfo) =>
                        ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        leaderAndIsrRequest.partitionStates.asScala.foreach { case (topicPartition, stateInfo) =>
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1197: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                  s"in assigned replica list ${stateInfo.basePartitionState.replicas.asScala.mkString(",")}")
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1220: method -- in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map.
        val partitionsToBeFollower = partitionState -- partitionsTobeLeader.keys
                                                    ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1247: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        leaderAndIsrRequest.partitionStates.asScala.keys.foreach { topicPartition =>
                            ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaManager.scala:1287: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new LeaderAndIsrResponse(Errors.NONE, responseMap.asJava)
                                              ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:289: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val extraConsumerProps = CommandLineUtils.parseKeyValueArgs(options.valuesOf(consumerPropertyOpt).asScala)
                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val formatterArgs = CommandLineUtils.parseKeyValueArgs(options.valuesOf(messageFormatterArgOpt).asScala)
                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:484: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      keyDeserializer.get.configure(propertiesWithKeyPrefixStripped("key.deserializer.", props).asScala.asJava, true)
                                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:484: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      keyDeserializer.get.configure(propertiesWithKeyPrefixStripped("key.deserializer.", props).asScala.asJava, true)
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:490: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      valueDeserializer.get.configure(propertiesWithKeyPrefixStripped("value.deserializer.", props).asScala.asJava, false)
                                                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:490: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      valueDeserializer.get.configure(propertiesWithKeyPrefixStripped("value.deserializer.", props).asScala.asJava, false)
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:496: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.foreach { case (key, value) =>
    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:573: method checksum in class ConsumerRecord is deprecated: see corresponding Javadoc for more information.
    output.println(topicStr + "checksum:" + consumerRecord.checksum)
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleProducer.scala:234: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val cmdLineProps = CommandLineUtils.parseKeyValueArgs(options.valuesOf(propertyOpt).asScala)
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleProducer.scala:235: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val extraProducerProps = CommandLineUtils.parseKeyValueArgs(options.valuesOf(producerPropertyOpt).asScala)
                                                                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:60: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      metrics = consumer.metrics.asScala
                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:111: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(topics.asJava, new ConsumerRebalanceListener {
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsumerPerformance.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val records = consumer.poll(Duration.ofMillis(100)).asScala
                                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:185: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val batches = partialFileRecords.batches.asScala
                                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:195: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            for (record <- batch.asScala)
                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:296: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val keyString = Json.encodeAsString(Map("metadata" -> groupId).asJava)
                                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val valueString = Json.encodeAsString(Map(
                                               ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:337: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (batch <- fileRecords.batches.asScala) {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/DumpLogSegments.scala:340: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          for (record <- batch.asScala) {
                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:109: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .map(p => new TopicPartition(p.topic(), p.partition())).asJava
          ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicPartitions = consumer.partitionsFor(topic).asScala
                                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assignment().asScala.foreach(consumer.position)
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:144: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val count = 1 + recordIter.asScala.size
                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/EndToEndLatency.scala:150: method + in class Int is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
        println(i + "\t" + elapsed / 1000.0 / 1000.0)
                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case ListOffsetRequest.EARLIEST_TIMESTAMP => consumer.beginningOffsets(topicPartitions.asJava).asScala
                                                                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case ListOffsetRequest.EARLIEST_TIMESTAMP => consumer.beginningOffsets(topicPartitions.asJava).asScala
                                                                             ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case ListOffsetRequest.LATEST_TIMESTAMP => consumer.endOffsets(topicPartitions.asJava).asScala
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case ListOffsetRequest.LATEST_TIMESTAMP => consumer.endOffsets(topicPartitions.asJava).asScala
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val timestampsToSearch = topicPartitions.map(tp => tp -> (listOffsetsTimestamp: java.lang.Long)).toMap.asJava
                                                                                                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.offsetsForTimes(timestampsToSearch).asScala.map { case (k, x) =>
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:146: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    val partitionInfos = consumer.listTopics.asScala.filterKeys(_ == topic).values.flatMap(_.asScala).toBuffer
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionInfos = consumer.listTopics.asScala.filterKeys(_ == topic).values.flatMap(_.asScala).toBuffer
                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/GetOffsetShell.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionInfos = consumer.listTopics.asScala.filterKeys(_ == topic).values.flatMap(_.asScala).toBuffer
                                                                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:164: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        options.valuesOf(objectNameOpt).asScala.map(new ObjectName(_))
                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:181: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        names = queries.flatMap((name: ObjectName) => mbsc.queryNames(name, null).asScala)
                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:202: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            val expectedAttributes = attributes.asScala.asInstanceOf[mutable.Buffer[Attribute]]
                                     ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (attrObj <- mbsc.getAttributes(name, mbean.getAttributes.map(_.getName)).asScala) {
                                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:261: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
              attributes(name + ":" + attr.getName) = attr.getValue
                         ^
/mydata/kafka/core/src/main/scala/kafka/tools/JmxTool.scala:262: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
          case None => attributes(name + ":" + attr.getName) = attr.getValue
                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:141: method retain in trait MapOps is deprecated (since 2.13.0): Use filterInPlace instead
                consumerWrapper.offsets.retain((tp, _) => visibleTopics.containsKey(tp.topic))
                                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:197: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    private def toBaseConsumerRecord(record: ConsumerRecord[Array[Byte], Array[Byte]]): BaseConsumerRecord =
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:198: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
      BaseConsumerRecord(record.topic,
      ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              records.asScala.foreach(producer.send)
              ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.commitSync(offsets.map { case (tp, offset) => (tp, new OffsetAndMetadata(offset)) }.asJava)
                                      ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:417: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    def handle(record: BaseConsumerRecord): util.List[ProducerRecord[Array[Byte], Array[Byte]]]
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:421: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    override def handle(record: BaseConsumerRecord): util.List[ProducerRecord[Array[Byte], Array[Byte]]] = {
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:157: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      topicMetadata.partitions.asScala.flatMap { partitionMetadata =>
                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:158: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        partitionMetadata.replicas.asScala.map { node =>
                          ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      topicMetaData.partitions.asScala.map { partitionMetadata =>
                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:216: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    adminClient.describeTopics(topics).all.get.values.asScala.toBuffer
                                               ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:220: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    adminClient.describeCluster.nodes.get.asScala.map(n => (n.id, n)).toMap
                                      ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:234: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        consumer.endOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                                                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:234: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.endOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:234: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.endOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                            ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:236: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        consumer.beginningOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.beginningOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.beginningOffsets(topicPartitions.asJava).asScala.mapValues(_.longValue).toMap
                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:239: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        consumer.offsetsForTimes(timestampsToSearch.asJava).asScala.mapValues(v => v.offset).toMap
                                                                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.offsetsForTimes(timestampsToSearch.asJava).asScala.mapValues(v => v.offset).toMap
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.offsetsForTimes(timestampsToSearch.asJava).asScala.mapValues(v => v.offset).toMap
                                 ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:363: method + in class Int is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
          debug(expectedReplicasPerTopicPartition(topicPartition) + " replicas match at offset " +
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:419: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetchResponse.responseData.asScala.foreach { case (tp, partitionData) =>
                    ^
/mydata/kafka/core/src/main/scala/kafka/tools/ReplicaVerificationTool.scala:468: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map("broker-id" -> sourceNode.id.toString, "fetcher-id" -> fetcherId.toString).asJava,
         ^
/mydata/kafka/core/src/main/scala/kafka/utils/CoreUtils.scala:266: type Traversable in package collection is deprecated (since 2.13.0): Use Iterable instead of Traversable
  def duplicates[T](s: Traversable[T]): Iterable[T] = {
                       ^
/mydata/kafka/core/src/main/scala/kafka/utils/Implicits.scala:45: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      (properties: util.Hashtable[AnyRef, AnyRef]).putAll(map.asJava)
                                                          ^
/mydata/kafka/core/src/main/scala/kafka/utils/Json.scala:66: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
    try Right(mapper.readTree(input)).right.map(JsonValue(_))
                                      ^
/mydata/kafka/core/src/main/scala/kafka/utils/Log4jController.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    }.toList.asJava
      ^
/mydata/kafka/core/src/main/scala/kafka/utils/Pool.scala:72: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def keys: mutable.Set[K] = pool.keySet.asScala
                                  ^
/mydata/kafka/core/src/main/scala/kafka/utils/Pool.scala:74: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def values: Iterable[V] = pool.values.asScala
                                 ^
/mydata/kafka/core/src/main/scala/kafka/utils/VerifiableProperties.scala:219: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val propNames = Collections.list(props.propertyNames).asScala.map(_.toString).sorted
                                    ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/DecodeJson.scala:87: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
      else decodeJson.decodeEither(node).right.map(Some(_))
                                         ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/DecodeJson.scala:94: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        decodeIterator(node.elements.asScala)(decodeJson.decodeEither)
                            ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/DecodeJson.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        decodeIterator(node.fields.asScala)(e => decodeJson.decodeEither(e.getValue).right.map(v => (e.getKey, v)))
                            ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/DecodeJson.scala:102: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
        decodeIterator(node.fields.asScala)(e => decodeJson.decodeEither(e.getValue).right.map(v => (e.getKey, v)))
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/JsonArray.scala:26: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def iterator: Iterator[JsonValue] = node.elements.asScala.map(JsonValue(_))
                                           ^
/mydata/kafka/core/src/main/scala/kafka/utils/json/JsonObject.scala:38: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def iterator: Iterator[(String, JsonValue)] = node.fields.asScala.map { entry =>
                                                     ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:54: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "brokerid" -> brokerId, "timestamp" -> timestamp.toString).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      EndpointsKey -> advertisedEndpoints.map(_.connectionString).toBuffer.asJava,
                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      }.toMap.asJava)
        ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:137: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(jsonMap.asJava)
                       ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:243: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partition.partition.toString -> replicas.asJava
                                      ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:245: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "partitions" -> assignmentJson.asJava).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:245: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "partitions" -> assignmentJson.asJava).asJava)
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:273: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "leader" -> leaderAndIsr.leader, "leader_epoch" -> leaderAndIsr.leaderEpoch,
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      "controller_epoch" -> controllerEpoch, "isr" -> leaderAndIsr.isr.asJava).asJava)
                                                                   ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:296: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "config" -> config).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Map("version" -> 2, "entity_path" -> sanitizedEntityPath).asJava)
       ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:329: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionsJson = partitions.map(partition => Map("topic" -> partition.topic, "partition" -> partition.partition).asJava)
                                                        ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:330: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> IsrChangeNotificationHandler.Version, "partitions" -> partitionsJson.asJava).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:330: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> IsrChangeNotificationHandler.Version, "partitions" -> partitionsJson.asJava).asJava)
                                                                                              ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:356: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> 1, "broker" -> brokerId, "event" -> LogDirFailureEvent).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:399: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      reassignmentMap.toSeq.map { case (tp, replicas) =>
                                ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:400: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        ReplicaAssignment(tp.topic, tp.partition, replicas.asJava)
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:407: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
    Json.parseBytesAs[PartitionAssignment](bytes).right.map { partitionAssignment =>
                                                  ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:408: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionAssignment.partitions.asScala.iterator.map { replicaAssignment =>
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:409: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new TopicPartition(replicaAssignment.topic, replicaAssignment.partition) -> replicaAssignment.replicas.asScala
                                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:418: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      "partitions" -> partitions.map(tp => Map("topic" -> tp.topic, "partition" -> tp.partition).asJava).asJava)
                                    ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:418: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      "partitions" -> partitions.map(tp => Map("topic" -> tp.topic, "partition" -> tp.partition).asJava).asJava)
                                              ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:419: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(jsonMap.asJava)
                       ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:595: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    val legacyName = resource.resourceType + Resource.Separator + resource.name
                              ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:639: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def encode(acls: Set[Acl]): Array[Byte] = Json.encodeAsBytes(Acl.toJsonCompatibleMap(acls).asJava)
                                                                                      ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:671: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Json.encodeAsBytes(Map("version" -> "1", "id" -> id).asJava)
                          ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:711: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  def encode(token: DelegationToken): Array[Byte] =  Json.encodeAsBytes(DelegationTokenManager.toJsonCompatibleMap(token).asJava)
                                                                                                                  ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:757: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      acls ++= ZooDefs.Ids.CREATOR_ALL_ACL.asScala
                           ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:759: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        acls ++= ZooDefs.Ids.READ_ACL_UNSAFE.asScala
                             ^
/mydata/kafka/core/src/main/scala/kafka/zk/ZkData.scala:761: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    } else ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala
                       ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val zNodeChangeHandlers = new ConcurrentHashMap[String, ZNodeChangeHandler]().asScala
                                    ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:77: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val zNodeChildChangeHandlers = new ConcurrentHashMap[String, ZNodeChildChangeHandler]().asScala
                                         ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:79: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val stateChangeHandlers = new ConcurrentHashMap[String, StateChangeHandler]().asScala
                                    ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      responseQueue.asScala.toBuffer
      ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:201: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              Option(children).map(_.asScala).getOrElse(Seq.empty), stat, responseMetadata(sendTimeMs)))
                                   ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:204: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        zooKeeper.create(path, data, acl.asJava, createMode, new StringCallback {
                                     ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:221: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            callback(GetAclResponse(Code.get(rc), path, Option(ctx), Option(acl).map(_.asScala).getOrElse(Seq.empty),
                                                                                     ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        zooKeeper.setACL(path, acl.asJava, version, new StatCallback {
                               ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:230: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        zooKeeper.multi(zkOps.map(_.toZookeeperOp).asJava, new MultiCallback {
                                 ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                zkOps.zip(opResults.asScala) map { case (zkOp, result) => ZkOpResult(zkOp, result) },
                          ^
/mydata/kafka/core/src/main/scala/kafka/zookeeper/ZooKeeperClient.scala:480: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  override def toZookeeperOp: Op = Op.create(path, data, acl.asJava, createMode)
                                                         ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:444: match may not be exhaustive.
It would fail on the following inputs: APPEND, SUBTRACT
      alterConfigOp.opType() match {
                          ^
1246 warnings found
Note: /mydata/kafka/core/src/main/scala/kafka/tools/StreamsResetter.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

> Task :kafka:core:processResources NO-SOURCE
> Task :kafka:core:classes
> Task :kafka:core:checkstyleMain
> Task :kafka:core:compileTestJava NO-SOURCE

> Task :kafka:core:compileTestScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsAssigned`'s return type
    def onPartitionsAssigned(partitions: java.util.Collection[TopicPartition]) {
                                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsRevoked`'s return type
    def onPartitionsRevoked(partitions: java.util.Collection[TopicPartition]) {
                                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:122: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumeAndVerifyRecords`'s return type
                                        maxPollRecords: Int = Int.MaxValue) {
                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1178: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
          override def run {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:273: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:523: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAuthorizationWithTopicExisting`'s return type
  def testAuthorizationWithTopicExisting() {
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:586: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAuthorizationWithTopicNotExisting`'s return type
  def testAuthorizationWithTopicNotExisting() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:630: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateTopicAuthorizationWithClusterCreate`'s return type
  def testCreateTopicAuthorizationWithClusterCreate() {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:642: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchFollowerRequest`'s return type
  def testFetchFollowerRequest() {
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:699: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceWithNoTopicAccess`'s return type
  def testProduceWithNoTopicAccess() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:710: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceWithTopicDescribe`'s return type
  def testProduceWithTopicDescribe() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:723: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceWithTopicRead`'s return type
  def testProduceWithTopicRead() {
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:736: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceWithTopicWrite`'s return type
  def testProduceWithTopicWrite() {
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:743: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionOnTopicToWriteToNonExistentTopic`'s return type
  def testCreatePermissionOnTopicToWriteToNonExistentTopic() {
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:748: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionOnClusterToWriteToNonExistentTopic`'s return type
  def testCreatePermissionOnClusterToWriteToNonExistentTopic() {
                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:752: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionNeededToWriteToNonExistentTopic`'s return type
  private def testCreatePermissionNeededToWriteToNonExistentTopic(resType: ResourceType) {
                                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:820: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeWithoutTopicDescribeAccess`'s return type
  def testConsumeWithoutTopicDescribeAccess() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:836: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeWithTopicDescribe`'s return type
  def testConsumeWithTopicDescribe() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:855: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeWithTopicWrite`'s return type
  def testConsumeWithTopicWrite() {
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:875: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeWithTopicAndGroupRead`'s return type
  def testConsumeWithTopicAndGroupRead() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:890: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionWithNoTopicAccess`'s return type
  def testPatternSubscriptionWithNoTopicAccess() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:905: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead`'s return type
  def testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead() {
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:924: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionWithTopicAndGroupRead`'s return type
  def testPatternSubscriptionWithTopicAndGroupRead() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:953: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionMatchingInternalTopic`'s return type
  def testPatternSubscriptionMatchingInternalTopic() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:978: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission`'s return type
  def testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission() {
                                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1003: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscriptionNotMatchingInternalTopic`'s return type
  def testPatternSubscriptionNotMatchingInternalTopic() {
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1021: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionOnTopicToReadFromNonExistentTopic`'s return type
  def testCreatePermissionOnTopicToReadFromNonExistentTopic() {
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1028: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionOnClusterToReadFromNonExistentTopic`'s return type
  def testCreatePermissionOnClusterToReadFromNonExistentTopic() {
                                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1034: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionNeededToReadFromNonExistentTopic`'s return type
  private def testCreatePermissionNeededToReadFromNonExistentTopic(newTopic: String, acls: Set[Acl], resType: ResourceType) {
                                                                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1056: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePermissionMetadataRequestAutoCreate`'s return type
  def testCreatePermissionMetadataRequestAutoCreate() {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1081: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithNoAccess`'s return type
  def testCommitWithNoAccess() {
                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1087: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithNoTopicAccess`'s return type
  def testCommitWithNoTopicAccess() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1094: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithTopicWrite`'s return type
  def testCommitWithTopicWrite() {
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1102: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithTopicDescribe`'s return type
  def testCommitWithTopicDescribe() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithNoGroupAccess`'s return type
  def testCommitWithNoGroupAccess() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1117: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitWithTopicAndGroupRead`'s return type
  def testCommitWithTopicAndGroupRead() {
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFetchWithNoAccess`'s return type
  def testOffsetFetchWithNoAccess() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFetchWithNoGroupAccess`'s return type
  def testOffsetFetchWithNoGroupAccess() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1140: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFetchWithNoTopicAccess`'s return type
  def testOffsetFetchWithNoTopicAccess() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1148: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchAllOffsetsTopicAuthorization`'s return type
  def testFetchAllOffsetsTopicAuthorization() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1177: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFetchTopicDescribe`'s return type
  def testOffsetFetchTopicDescribe() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1186: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFetchWithTopicAndGroupRead`'s return type
  def testOffsetFetchWithTopicAndGroupRead() {
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1195: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetadataWithNoTopicAccess`'s return type
  def testMetadataWithNoTopicAccess() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetadataWithTopicDescribe`'s return type
  def testMetadataWithTopicDescribe() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1208: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListOffsetsWithNoTopicAccess`'s return type
  def testListOffsetsWithNoTopicAccess() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1214: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListOffsetsWithTopicDescribe`'s return type
  def testListOffsetsWithTopicDescribe() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1221: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupApiWithNoGroupAcl`'s return type
  def testDescribeGroupApiWithNoGroupAcl() {
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1228: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupApiWithGroupDescribe`'s return type
  def testDescribeGroupApiWithGroupDescribe() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1235: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupCliWithGroupDescribe`'s return type
  def testDescribeGroupCliWithGroupDescribe() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1247: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListGroupApiWithAndWithoutListGroupAcls`'s return type
  def testListGroupApiWithAndWithoutListGroupAcls() {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1291: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteGroupApiWithDeleteGroupAcl`'s return type
  def testDeleteGroupApiWithDeleteGroupAcl() {
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1302: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteGroupApiWithNoDeleteGroupAcl`'s return type
  def testDeleteGroupApiWithNoDeleteGroupAcl() {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1313: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteGroupApiWithNoDeleteGroupAcl2`'s return type
  def testDeleteGroupApiWithNoDeleteGroupAcl2() {
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1319: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedDeleteTopicsWithoutDescribe`'s return type
  def testUnauthorizedDeleteTopicsWithoutDescribe() {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1327: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedDeleteTopicsWithDescribe`'s return type
  def testUnauthorizedDeleteTopicsWithDescribe() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1337: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicsWithWildCardAuth`'s return type
  def testDeleteTopicsWithWildCardAuth() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1347: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedDeleteRecordsWithoutDescribe`'s return type
  def testUnauthorizedDeleteRecordsWithoutDescribe() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1355: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedDeleteRecordsWithDescribe`'s return type
  def testUnauthorizedDeleteRecordsWithDescribe() {
                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1364: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteRecordsWithWildCardAuth`'s return type
  def testDeleteRecordsWithWildCardAuth() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1374: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedCreatePartitions`'s return type
  def testUnauthorizedCreatePartitions() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1382: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreatePartitionsWithWildCardAuth`'s return type
  def testCreatePartitionsWithWildCardAuth() {
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1661: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRecords`'s return type
                          tp: TopicPartition) {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1681: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumeRecords`'s return type
                             part: Int = part) {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseConsumerTest.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSimpleConsumption`'s return type
  def testSimpleConsumption() {
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseConsumerTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCoordinatorFailover`'s return type
  def testCoordinatorFailover() {
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendOffset`'s return type
  def testSendOffset() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompletion`'s return type
      def onCompletion(metadata: RecordMetadata, exception: Exception) {
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:175: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendCompressedMessageWithCreateTime`'s return type
  def testSendCompressedMessageWithCreateTime() {
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendNonCompressedMessageWithCreateTime`'s return type
  def testSendNonCompressedMessageWithCreateTime() {
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendAndVerify`'s return type
                              timeoutMs: Long = 20000L) {
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:215: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendAndVerifyTimestamp`'s return type
  protected def sendAndVerifyTimestamp(producer: KafkaProducer[Array[Byte], Array[Byte]], timestampType: TimestampType) {
                                                                                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:225: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompletion`'s return type
      def onCompletion(metadata: RecordMetadata, exception: Exception) {
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:276: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClose`'s return type
  def testClose() {
                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:309: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendToPartition`'s return type
  def testSendToPartition() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:354: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendBeforeAndAfterPartitionExpansion`'s return type
  def testSendBeforeAndAfterPartitionExpansion() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:420: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFlush`'s return type
  def testFlush() {
                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:441: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCloseWithZeroTimeoutFromCallerThread`'s return type
  def testCloseWithZeroTimeoutFromCallerThread() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:470: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCloseWithZeroTimeoutFromSenderThread`'s return type
  def testCloseWithZeroTimeoutFromSenderThread() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:478: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onCompletion`'s return type
      override def onCompletion(metadata: RecordMetadata, exception: Exception) {
                                                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:69: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testThrottledProducerConsumer`'s return type
  def testThrottledProducerConsumer() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerConsumerOverrideUnthrottled`'s return type
  def testProducerConsumerOverrideUnthrottled() {
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaOverrideDelete`'s return type
  def testQuotaOverrideDelete() {
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testThrottledRequest`'s return type
  def testThrottledRequest() {
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:171: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `overrideQuotas`'s return type
  def overrideQuotas(producerQuota: Long, consumerQuota: Long, requestQuota: Double)
                                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:172: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `removeQuotaOverrides`'s return type
  def removeQuotaOverrides()
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyProducerClientThrottleTimeMetric`'s return type
  def verifyProducerClientThrottleTimeMetric(expectThrottle: Boolean) {
                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConsumerClientThrottleTimeMetric`'s return type
  def verifyConsumerClientThrottleTimeMetric(expectThrottle: Boolean, maxThrottleTime: Option[Double] = None) {
                                                                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:287: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `waitForQuotaUpdate`'s return type
  def waitForQuotaUpdate(producerQuota: Long, consumerQuota: Long, requestQuota: Double, server: KafkaServer = leaderNode) {
                                                                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala:30: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `overrideQuotas`'s return type
      override def overrideQuotas(producerQuota: Long, consumerQuota: Long, requestQuota: Double) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeQuotaOverrides`'s return type
      override def removeQuotaOverrides() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ClientIdQuotaTest.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuotaOverride`'s return type
      private def updateQuotaOverride(clientId: String, properties: Properties) {
                                                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:87: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumeWithBrokerFailures`'s return type
  def consumeWithBrokerFailures(numIters: Int) {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `seekAndCommitWithBrokerFailures`'s return type
  def seekAndCommitWithBrokerFailures(numIters: Int) {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSubscribeWhenTopicUnavailable`'s return type
  def testSubscribeWhenTopicUnavailable() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:175: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRecords`'s return type
    def sendRecords(numRecords: Int, topic: String) {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClose`'s return type
  def testClose() {
                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:228: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCloseGoodPath`'s return type
  private def checkCloseGoodPath(numRecords: Int, groupId: String) {
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:241: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCloseWithCoordinatorFailure`'s return type
  private def checkCloseWithCoordinatorFailure(numRecords: Int, dynamicGroup: String, manualGroup: String) {
                                                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:278: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCloseWithClusterFailure`'s return type
  private def checkCloseWithClusterFailure(numRecords: Int, group1: String, group2: String) {
                                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:374: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCloseDuringRebalance`'s return type
  def testCloseDuringRebalance() {
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:383: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCloseDuringRebalance`'s return type
  private def checkCloseDuringRebalance(groupId: String, topic: String, executor: ExecutorService, brokersAvailableDuringClose: Boolean) {
                                                                                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:388: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsAssigned`'s return type
            def onPartitionsAssigned(partitions: Collection[TopicPartition]) {
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:390: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsRevoked`'s return type
            def onPartitionsRevoked(partitions: Collection[TopicPartition]) {
                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:399: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `waitForRebalance`'s return type
    def waitForRebalance(timeoutMs: Long, future: Future[Any], otherConsumers: KafkaConsumer[Array[Byte], Array[Byte]]*) {
                                                                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:477: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkClosedState`'s return type
  private def checkClosedState(groupId: String, committedRecords: Int) {
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:483: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsAssigned`'s return type
      def onPartitionsAssigned(partitions: Collection[TopicPartition]) {
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:486: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onPartitionsRevoked`'s return type
      def onPartitionsRevoked(partitions: Collection[TopicPartition]) {
                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:521: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRecords`'s return type
                          numPartitions: Option[Int] = None) {
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:88: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCustomQuotaCallback`'s return type
  def testCustomQuotaCallback() {
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:57: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityAfterServersStart`'s return type
  override def configureSecurityAfterServersStart() {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:82: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:182: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:196: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:275: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setWildcardResourceAcls`'s return type
  private def setWildcardResourceAcls() {
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:283: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setPrefixedResourceAcls`'s return type
  private def setPrefixedResourceAcls() {
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:291: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setReadAndWriteAcls`'s return type
  private def setReadAndWriteAcls(tp: TopicPartition) {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:301: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setAclsAndProduce`'s return type
  protected def setAclsAndProduce(tp: TopicPartition) {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:307: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setConsumerGroupAcls`'s return type
  private def setConsumerGroupAcls() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:503: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRecords`'s return type
                                  numRecords: Int, tp: TopicPartition) {
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:521: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumeRecords`'s return type
                                     timeout: Long = 10000) {
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onUpdate`'s return type
    override def onUpdate(clusterMetadata: ClusterResource) {
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:69: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onUpdate`'s return type
    override def onUpdate(clusterMetadata: ClusterResource) {
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onUpdate`'s return type
    override def onUpdate(clusterMetadata: ClusterResource) {
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEndToEnd`'s return type
  def testEndToEnd() {
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:186: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRecords`'s return type
  private def sendRecords(producer: KafkaProducer[Array[Byte], Array[Byte]], numRecords: Int, tp: TopicPartition) {
                                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:203: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `consumeRecords`'s return type
                             part: Int = part) {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/GroupCoordinatorIntegrationTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec`'s return type
  def testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec() {
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/IntegrationTestHarness.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/IntegrationTestHarness.scala:151: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/LogAppendTimeTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/LogAppendTimeTest.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceConsume`'s return type
  def testProduceConsume() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeaders`'s return type
  def testHeaders() {
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:161: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxPollRecords`'s return type
  def testMaxPollRecords() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:175: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxPollIntervalMs`'s return type
  def testMaxPollIntervalMs() {
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:199: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxPollIntervalMsDelayInRevocation`'s return type
  def testMaxPollIntervalMsDelayInRevocation() {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:238: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxPollIntervalMsDelayInAssignment`'s return type
  def testMaxPollIntervalMsDelayInAssignment() {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:262: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCommitOnClose`'s return type
  def testAutoCommitOnClose() {
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:285: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCommitOnCloseAfterWakeup`'s return type
  def testAutoCommitOnCloseAfterWakeup() {
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:312: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoOffsetReset`'s return type
  def testAutoOffsetReset() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:322: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGroupConsumption`'s return type
  def testGroupConsumption() {
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:341: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternSubscription`'s return type
  def testPatternSubscription() {
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:398: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSubsequentPatternSubscription`'s return type
  def testSubsequentPatternSubscription() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:449: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternUnsubscription`'s return type
  def testPatternUnsubscription() {
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:475: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitMetadata`'s return type
  def testCommitMetadata() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:496: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAsyncCommit`'s return type
  def testAsyncCommit() {
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:515: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExpandingTopicSubscriptions`'s return type
  def testExpandingTopicSubscriptions() {
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:529: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testShrinkingTopicSubscriptions`'s return type
  def testShrinkingTopicSubscriptions() {
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:543: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionsFor`'s return type
  def testPartitionsFor() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:553: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionsForAutoCreate`'s return type
  def testPartitionsForAutoCreate() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:560: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionsForInvalidTopic`'s return type
  def testPartitionsForInvalidTopic() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:566: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSeek`'s return type
  def testSeek() {
                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:608: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendCompressedMessages`'s return type
  private def sendCompressedMessages(numRecords: Int, tp: TopicPartition) {
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:620: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPositionAndCommit`'s return type
  def testPositionAndCommit() {
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:652: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionPauseAndResume`'s return type
  def testPartitionPauseAndResume() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:668: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchInvalidOffset`'s return type
  def testFetchInvalidOffset() {
                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:696: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchRecordLargerThanFetchMaxBytes`'s return type
  def testFetchRecordLargerThanFetchMaxBytes() {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:764: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchRecordLargerThanMaxPartitionFetchBytes`'s return type
  def testFetchRecordLargerThanMaxPartitionFetchBytes() {
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:815: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRoundRobinAssignment`'s return type
  def testRoundRobinAssignment() {
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:851: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultiConsumerRoundRobinAssignment`'s return type
  def testMultiConsumerRoundRobinAssignment() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:888: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultiConsumerStickyAssignment`'s return type
  def testMultiConsumerStickyAssignment() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:934: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultiConsumerDefaultAssignment`'s return type
  def testMultiConsumerDefaultAssignment() {
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:979: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInterceptors`'s return type
  def testInterceptors() {
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1043: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCommitIntercept`'s return type
  def testAutoCommitIntercept() {
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1093: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInterceptorsWithWrongKeyValue`'s return type
  def testInterceptorsWithWrongKeyValue() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1119: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeMessagesWithCreateTime`'s return type
  def testConsumeMessagesWithCreateTime() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1137: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumeMessagesWithLogAppendTime`'s return type
  def testConsumeMessagesWithLogAppendTime() {
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1165: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListTopics`'s return type
  def testListTopics() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1185: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetsForTimes`'s return type
  def testOffsetsForTimes() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1248: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEarliestOrLatestOffsets`'s return type
  def testEarliestOrLatestOffsets() {
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1276: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnsubscribeTopic`'s return type
  def testUnsubscribeTopic() {
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1292: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPauseStateNotPreservedByRebalance`'s return type
  def testPauseStateNotPreservedByRebalance() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1312: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitSpecifiedOffsets`'s return type
  def testCommitSpecifiedOffsets() {
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1339: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCommitOnRebalance`'s return type
  def testAutoCommitOnRebalance() {
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1378: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLeadMetricsCleanUpWithSubscribe`'s return type
  def testPerPartitionLeadMetricsCleanUpWithSubscribe() {
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1417: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLagMetricsCleanUpWithSubscribe`'s return type
  def testPerPartitionLagMetricsCleanUpWithSubscribe() {
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1457: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLeadMetricsCleanUpWithAssign`'s return type
  def testPerPartitionLeadMetricsCleanUpWithAssign() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1486: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLagMetricsCleanUpWithAssign`'s return type
  def testPerPartitionLagMetricsCleanUpWithAssign() {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1517: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLagMetricsWhenReadCommitted`'s return type
  def testPerPartitionLagMetricsWhenReadCommitted() {
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1540: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLeadWithMaxPollRecords`'s return type
  def testPerPartitionLeadWithMaxPollRecords() {
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1562: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPerPartitionLagWithMaxPollRecords`'s return type
  def testPerPartitionLagWithMaxPollRecords() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1585: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaMetricsNotCreatedIfNoQuotasConfigured`'s return type
  def testQuotaMetricsNotCreatedIfNoQuotasConfigured() {
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1595: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertNoMetric`'s return type
    def assertNoMetric(broker: KafkaServer, name: String, quotaType: QuotaType, clientId: String) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1613: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertNoExemptRequestMetric`'s return type
    def assertNoExemptRequestMetric(broker: KafkaServer) {
                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextEndToEndAuthorizationTest.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextEndToEndAuthorizationTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListenerName`'s return type
  def testListenerName() {
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testWrongSerializer`'s return type
  def testWrongSerializer() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBatchSizeZero`'s return type
  def testBatchSizeZero() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendCompressedMessageWithLogAppendTime`'s return type
  def testSendCompressedMessageWithLogAppendTime() {
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendNonCompressedMessageWithLogAppendTime`'s return type
  def testSendNonCompressedMessageWithLogAppendTime() {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCreateTopic`'s return type
  def testAutoCreateTopic() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextProducerSendTest.scala:90: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendWithInvalidCreateTime`'s return type
  def testSendWithInvalidCreateTime() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerCompressionTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerCompressionTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerCompressionTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCompression`'s return type
  def testCompression() {
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:76: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTooLargeRecordWithAckZero`'s return type
  def testTooLargeRecordWithAckZero() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTooLargeRecordWithAckOne`'s return type
  def testTooLargeRecordWithAckOne() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:117: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkTooLargeRecordForReplicationWithAckAll`'s return type
  private def checkTooLargeRecordForReplicationWithAckAll(maxFetchSize: Int) {
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:137: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionTooLargeForReplicationWithAckAll`'s return type
  def testPartitionTooLargeForReplicationWithAckAll() {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:143: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResponseTooLargeForReplicationWithAckAll`'s return type
  def testResponseTooLargeForReplicationWithAckAll() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:151: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNonExistentTopic`'s return type
  def testNonExistentTopic() {
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:170: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testWrongBrokerList`'s return type
  def testWrongBrokerList() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:189: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidPartition`'s return type
  def testInvalidPartition() {
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:207: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendAfterClosed`'s return type
  def testSendAfterClosed() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:233: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCannotSendToInternalTopic`'s return type
  def testCannotSendToInternalTopic() {
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:242: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNotEnoughReplicas`'s return type
  def testNotEnoughReplicas() {
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerFailureHandlingTest.scala:262: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNotEnoughReplicasAfterBrokerShutdown`'s return type
  def testNotEnoughReplicasAfterBrokerShutdown() {
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/RackAwareAutoTopicCreationTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoCreateTopic`'s return type
  def testAutoCreateTopic() {
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerWithAuthenticationFailure`'s return type
  def testProducerWithAuthenticationFailure() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:85: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTransactionalProducerWithAuthenticationFailure`'s return type
  def testTransactionalProducerWithAuthenticationFailure() {
                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:99: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumerWithAuthenticationFailure`'s return type
  def testConsumerWithAuthenticationFailure() {
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testManualAssignmentConsumerWithAuthenticationFailure`'s return type
  def testManualAssignmentConsumerWithAuthenticationFailure() {
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:113: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure`'s return type
  def testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure() {
                                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:121: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConsumerWithAuthenticationFailure`'s return type
  private def verifyConsumerWithAuthenticationFailure(consumer: KafkaConsumer[Array[Byte], Array[Byte]]) {
                                                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testKafkaAdminClientWithAuthenticationFailure`'s return type
  def testKafkaAdminClientWithAuthenticationFailure() {
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumerGroupServiceWithAuthenticationFailure`'s return type
  def testConsumerGroupServiceWithAuthenticationFailure() {
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:171: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsumerGroupServiceWithAuthenticationSuccess`'s return type
  def testConsumerGroupServiceWithAuthenticationSuccess() {
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslEndToEndAuthorizationTest.scala:38: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultipleBrokerMechanisms`'s return type
  def testMultipleBrokerMechanisms() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainPlaintextConsumerTest.scala:62: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testZkAclsDisabled`'s return type
  def testZkAclsDisabled() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:62: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configure`'s return type
    def configure(configs: java.util.Map[String, _], saslMechanism: String, jaasConfigEntries: java.util.List[AppConfigurationEntry]) {}
                                                                                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handle`'s return type
    def handle(callbacks: Array[Callback]) {
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {}
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:79: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configure`'s return type
    def configure(configs: java.util.Map[String, _], saslMechanism: String, jaasConfigEntries: java.util.List[AppConfigurationEntry]) {}
                                                                                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `handle`'s return type
    def handle(callbacks: Array[Callback]) {
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:93: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {}
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslPlainSslEndToEndAuthorizationTest.scala:139: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAcls`'s return type
  def testAcls() {
                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala:33: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSetup.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startSasl`'s return type
  def startSasl(jaasSections: Seq[JaasSection]) {
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSetup.scala:111: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeJaasConfigurationToFile`'s return type
  private def writeJaasConfigurationToFile(jaasSections: Seq[JaasSection]) {
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSetup.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `closeSasl`'s return type
  def closeSasl() {
                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:40: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SslEndToEndAuthorizationTest.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsBounceTest.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerFailure`'s return type
  def testBrokerFailure() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsBounceTest.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
    override def shutdown(){
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:396: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFencingOnSend`'s return type
  def testFencingOnSend() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserClientIdQuotaTest.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserClientIdQuotaTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `overrideQuotas`'s return type
      override def overrideQuotas(producerQuota: Long, consumerQuota: Long, requestQuota: Double) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserClientIdQuotaTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeQuotaOverrides`'s return type
      override def removeQuotaOverrides() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserClientIdQuotaTest.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuotaOverride`'s return type
      private def updateQuotaOverride(userPrincipal: String, clientId: String, properties: Properties) {
                                                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserQuotaTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserQuotaTest.scala:62: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `overrideQuotas`'s return type
      override def overrideQuotas(producerQuota: Long, consumerQuota: Long, requestQuota: Double) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserQuotaTest.scala:67: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `removeQuotaOverrides`'s return type
      override def removeQuotaOverrides() {
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/UserQuotaTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateQuotaOverride`'s return type
      private def updateQuotaOverride(properties: Properties) {
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDynamicConnectionQuota`'s return type
  def testDynamicConnectionQuota() {
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala:76: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `connectAndVerify`'s return type
    def connectAndVerify() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `connectAndVerify`'s return type
    def connectAndVerify() {
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1366: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      def run() {
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1378: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      def run() {
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/GssapiAuthenticationTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/MultipleListenersWithSameSecurityProtocolBaseTest.scala:151: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/ScramServerStartupTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  override def configureSecurityBeforeServersStart() {
                                                     ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `start`'s return type
  def start() {
              ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:126: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initDirectoryService`'s return type
  private def initDirectoryService() {
                                     ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:190: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `initKdcServer`'s return type
  private def initKdcServer() {
                              ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:192: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addInitialEntriesToDirectoryService`'s return type
    def addInitialEntriesToDirectoryService(bindAddress: String) {
                                                                 ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:248: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeKrb5Conf`'s return type
  private def writeKrb5Conf() {
                              ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:271: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `stop`'s return type
  def stop() {
             ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:294: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createPrincipal`'s return type
  private def createPrincipal(principal: String, password: String) {
                                                                   ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:319: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createPrincipal`'s return type
  def createPrincipal(keytabFile: File, principals: String*) {
                                                             ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:350: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:373: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `start`'s return type
  private def start(workDir: File, config: Properties, keytabFile: File, principals: Seq[String]) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/kafka/tools/CustomDeserializerTest.scala:44: Lowercase el for long is not recommended because it is easy to confuse with numeral 1; use uppercase L instead
    formatter.writeTo(new ConsumerRecord("topic_test", 1, 1l, "key".getBytes, "value".getBytes),
                                                           ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:61: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateOutput`'s return type
  def validateOutput(producedDataFile: File, consumedDataFile: File) {
                                                                     ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:195: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `require`'s return type
  def require(requirement: Boolean, message: => Any) {
                                                     ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:245: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      override def run() {
                         ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:77: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
  def run(config: ExperimentDef, journal: Journal, displayChartsOnScreen: Boolean) {
                                                                                   ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startBrokers`'s return type
    def startBrokers(brokerIds: Seq[Int]) {
                                          ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
    override def tearDown() {
                            ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:115: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
    def run(config: ExperimentDef, journal: Journal, displayChartsOnScreen: Boolean) {
                                                                                     ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:190: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `waitForReassignmentToComplete`'s return type
    def waitForReassignmentToComplete() {
                                        ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `printRateMetrics`'s return type
    def printRateMetrics() {
                           ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
    override def run() {
                       ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:93: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `work`'s return type
    def work()
              ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:111: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkProgress`'s return type
    def checkProgress() {
                        ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:122: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `work`'s return type
    override def work() {
                        ^
/mydata/kafka/core/src/test/scala/other/kafka/StressTestLog.scala:132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `work`'s return type
    override def work() {
                        ^
/mydata/kafka/core/src/test/scala/other/kafka/TestLinearWriteSpeed.scala:177: procedure syntax is deprecated: instead, add `: Unit` to explicitly declare `close`'s return type
    def close()
               ^
/mydata/kafka/core/src/test/scala/other/kafka/TestLinearWriteSpeed.scala:190: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/test/scala/other/kafka/TestLinearWriteSpeed.scala:205: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/test/scala/other/kafka/TestLinearWriteSpeed.scala:219: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:109: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:131: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAclCli`'s return type
  private def testAclCli(cmdArgs: Array[String]) {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:159: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerConsumerCli`'s return type
  private def testProducerConsumerCli(cmdArgs: Array[String]) {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:206: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidAuthorizerProperty`'s return type
  def testInvalidAuthorizerProperty() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPatternTypes`'s return type
  def testPatternTypes() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:241: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRemove`'s return type
  private def testRemove(cmdArgs: Array[String], resources: Set[Resource], resourceCmd: Array[String]) {
                                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AclCommandTest.scala:261: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `withAuthorizer`'s return type
  private def withAuthorizer()(f: Authorizer => Unit) {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:30: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetRackAlternatedBrokerListAndAssignReplicasToBrokers`'s return type
  def testGetRackAlternatedBrokerListAndAssignReplicasToBrokers() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWithRackAware`'s return type
  def testAssignmentWithRackAware() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWithRackAwareWithRandomStartIndex`'s return type
  def testAssignmentWithRackAwareWithRandomStartIndex() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWithRackAwareWithUnevenReplicas`'s return type
  def testAssignmentWithRackAwareWithUnevenReplicas() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:81: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWithRackAwareWithUnevenRacks`'s return type
  def testAssignmentWithRackAwareWithUnevenRacks() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:92: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWith2ReplicasRackAware`'s return type
  def testAssignmentWith2ReplicasRackAware() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRackAwareExpansion`'s return type
  def testRackAwareExpansion() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWith2ReplicasRackAwareWith6Partitions`'s return type
  def testAssignmentWith2ReplicasRackAwareWith6Partitions() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers`'s return type
  def testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers() {
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:134: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLargeNumberPartitionsAssignment`'s return type
  def testLargeNumberPartitionsAssignment() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:146: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMoreReplicasThanRacks`'s return type
  def testMoreReplicasThanRacks() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:158: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLessReplicasThanRacks`'s return type
  def testLessReplicasThanRacks() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:171: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSingleRack`'s return type
  def testSingleRack() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:185: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSkipBrokerWithReplicaAlreadyAssigned`'s return type
  def testSkipBrokerWithReplicaAlreadyAssigned() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:199: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReplicaAssignment`'s return type
  def testReplicaAssignment() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:90: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseArgumentsForClientsEntityType`'s return type
  def shouldParseArgumentsForClientsEntityType() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseArgumentsForTopicsEntityType`'s return type
  def shouldParseArgumentsForTopicsEntityType() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:100: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseArgumentsForBrokersEntityType`'s return type
  def shouldParseArgumentsForBrokersEntityType() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:105: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseArgumentsForBrokerLoggersEntityType`'s return type
  def shouldParseArgumentsForBrokerLoggersEntityType() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:649: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaConfigEntity`'s return type
  def testQuotaConfigEntity() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:661: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEntity`'s return type
    def checkEntity(entityType: String, entityName: Option[String], expectedEntityName: String, otherArgs: Array[String]) {
                                                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:669: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkInvalidEntity`'s return type
    def checkInvalidEntity(entityType: String, entityName: Option[String], otherArgs: Array[String]) {
                                                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:721: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserClientQuotaOpts`'s return type
  def testUserClientQuotaOpts() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:722: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEntity`'s return type
    def checkEntity(expectedEntityType: String, expectedEntityName: String, args: String*) {
                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:763: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaDescribeEntities`'s return type
  def testQuotaDescribeEntities() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:766: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEntities`'s return type
    def checkEntities(opts: Array[String], expectedFetches: Map[String, Seq[String]], expectedEntityNames: Seq[String]) {
                                                                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
    def run() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:145: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
    def shutdown() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:175: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `submit`'s return type
    def submit(consumerThread: AbstractConsumerRunnable) {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
    def shutdown() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:29: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteWithTopicOption`'s return type
  def testDeleteWithTopicOption() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteCmdNonExistingGroup`'s return type
  def testDeleteCmdNonExistingGroup() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteNonExistingGroup`'s return type
  def testDeleteNonExistingGroup() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteCmdNonEmptyGroup`'s return type
  def testDeleteCmdNonEmptyGroup() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:82: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteNonEmptyGroup`'s return type
  def testDeleteNonEmptyGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:101: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteCmdEmptyGroup`'s return type
  def testDeleteCmdEmptyGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteCmdAllGroups`'s return type
  def testDeleteCmdAllGroups() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteEmptyGroup`'s return type
  def testDeleteEmptyGroup() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:186: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteCmdWithMixOfSuccessAndError`'s return type
  def testDeleteCmdWithMixOfSuccessAndError() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteWithMixOfSuccessAndError`'s return type
  def testDeleteWithMixOfSuccessAndError() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteConsumerGroupsTest.scala:243: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteWithUnrecognizedNewConsumerOption`'s return type
  def testDeleteWithUnrecognizedNewConsumerOption() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicWithAllAliveReplicas`'s return type
  def testDeleteTopicWithAllAliveReplicas() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResumeDeleteTopicWithRecoveredFollower`'s return type
  def testResumeDeleteTopicWithRecoveredFollower() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResumeDeleteTopicOnControllerFailover`'s return type
  def testResumeDeleteTopicOnControllerFailover() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:109: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionReassignmentDuringDeleteTopic`'s return type
  def testPartitionReassignmentDuringDeleteTopic() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIncreasePartitionCountDuringDeleteTopic`'s return type
  def testIncreasePartitionCountDuringDeleteTopic() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:237: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicDuringAddPartition`'s return type
  def testDeleteTopicDuringAddPartition() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:265: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAddPartitionDuringDeleteTopic`'s return type
  def testAddPartitionDuringDeleteTopic() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:283: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecreateTopicAfterDeletion`'s return type
  def testRecreateTopicAfterDeletion() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:299: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteNonExistingTopic`'s return type
  def testDeleteNonExistingTopic() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:322: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicWithCleaner`'s return type
  def testDeleteTopicWithCleaner() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:352: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicAlreadyMarkedAsDeleted`'s return type
  def testDeleteTopicAlreadyMarkedAsDeleted() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:400: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDisableDeleteTopic`'s return type
  def testDisableDeleteTopic() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DeleteTopicTest.scala:418: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeletingPartiallyDeletedTopic`'s return type
  def testDeletingPartiallyDeletedTopic() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:40: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeNonExistingGroup`'s return type
  def testDescribeNonExistingGroup() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeWithMultipleSubActions`'s return type
  def testDescribeWithMultipleSubActions() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeOffsetsOfNonExistingGroup`'s return type
  def testDescribeOffsetsOfNonExistingGroup() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:79: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeMembersOfNonExistingGroup`'s return type
  def testDescribeMembersOfNonExistingGroup() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:99: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateOfNonExistingGroup`'s return type
  def testDescribeStateOfNonExistingGroup() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:117: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeExistingGroup`'s return type
  def testDescribeExistingGroup() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeExistingGroups`'s return type
  def testDescribeExistingGroups() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeAllExistingGroups`'s return type
  def testDescribeAllExistingGroups() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeOffsetsOfExistingGroup`'s return type
  def testDescribeOffsetsOfExistingGroup() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:205: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeMembersOfExistingGroup`'s return type
  def testDescribeMembersOfExistingGroup() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:239: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateOfExistingGroup`'s return type
  def testDescribeStateOfExistingGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:258: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateOfExistingGroupWithRoundRobinAssignor`'s return type
  def testDescribeStateOfExistingGroupWithRoundRobinAssignor() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:277: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeExistingGroupWithNoMembers`'s return type
  def testDescribeExistingGroupWithNoMembers() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:301: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeOffsetsOfExistingGroupWithNoMembers`'s return type
  def testDescribeOffsetsOfExistingGroupWithNoMembers() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:334: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeMembersOfExistingGroupWithNoMembers`'s return type
  def testDescribeMembersOfExistingGroupWithNoMembers() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:358: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateOfExistingGroupWithNoMembers`'s return type
  def testDescribeStateOfExistingGroupWithNoMembers() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:385: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeWithConsumersWithoutAssignedPartitions`'s return type
  def testDescribeWithConsumersWithoutAssignedPartitions() {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:404: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeOffsetsWithConsumersWithoutAssignedPartitions`'s return type
  def testDescribeOffsetsWithConsumersWithoutAssignedPartitions() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:423: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeMembersWithConsumersWithoutAssignedPartitions`'s return type
  def testDescribeMembersWithConsumersWithoutAssignedPartitions() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:448: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateWithConsumersWithoutAssignedPartitions`'s return type
  def testDescribeStateWithConsumersWithoutAssignedPartitions() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:464: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeWithMultiPartitionTopicAndMultipleConsumers`'s return type
  def testDescribeWithMultiPartitionTopicAndMultipleConsumers() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:485: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers`'s return type
  def testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers() {
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:507: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers`'s return type
  def testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers() {
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:533: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeStateWithMultiPartitionTopicAndMultipleConsumers`'s return type
  def testDescribeStateWithMultiPartitionTopicAndMultipleConsumers() {
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:551: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeSimpleConsumerGroup`'s return type
  def testDescribeSimpleConsumerGroup() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:569: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupWithShortInitializationTimeout`'s return type
  def testDescribeGroupWithShortInitializationTimeout() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:590: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupOffsetsWithShortInitializationTimeout`'s return type
  def testDescribeGroupOffsetsWithShortInitializationTimeout() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:610: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupMembersWithShortInitializationTimeout`'s return type
  def testDescribeGroupMembersWithShortInitializationTimeout() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:636: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupStateWithShortInitializationTimeout`'s return type
  def testDescribeGroupStateWithShortInitializationTimeout() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:656: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeWithUnrecognizedNewConsumerOption`'s return type
  def testDescribeWithUnrecognizedNewConsumerOption() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DescribeConsumerGroupTest.scala:663: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeNonOffsetCommitGroup`'s return type
  def testDescribeNonOffsetCommitGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ListConsumerGroupTest.scala:26: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListConsumerGroups`'s return type
  def testListConsumerGroups() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ListConsumerGroupTest.scala:43: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListWithUnrecognizedNewConsumerOption`'s return type
  def testListWithUnrecognizedNewConsumerOption() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createTestTopicAndCluster`'s return type
                                        authorizer: Option[String] = None) {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createTestTopicAndCluster`'s return type
                                        brokerConfigs: Seq[Properties]) {
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `bounceServer`'s return type
  private def bounceServer(targetServer: Int, partition: TopicPartition) {
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:123: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultipleBrokersGiven`'s return type
  def testMultipleBrokersGiven() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidBrokerGiven`'s return type
  def testInvalidBrokerGiven() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:150: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoPartitionsGiven`'s return type
  def testNoPartitionsGiven() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSingletonPartitionGiven`'s return type
  def testSingletonPartitionGiven() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicDoesNotExist`'s return type
  def testTopicDoesNotExist() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:216: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultiplePartitionsSameAssignment`'s return type
  def testMultiplePartitionsSameAssignment() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:243: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoopElection`'s return type
  def testNoopElection() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:262: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testWithOfflinePreferredReplica`'s return type
  def testWithOfflinePreferredReplica() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:292: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTimeout`'s return type
  def testTimeout() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:320: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAuthzFailure`'s return type
  def testAuthzFailure() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:346: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreferredReplicaJsonData`'s return type
  def testPreferredReplicaJsonData() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:357: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBasicPreferredReplicaElection`'s return type
  def testBasicPreferredReplicaElection() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/RackAwareTest.scala:31: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkReplicaDistribution`'s return type
                               verifyReplicasDistribution: Boolean = true) {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startBrokers`'s return type
  def startBrokers(brokerIds: Seq[Int]) {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldMoveSinglePartitionWithinBroker`'s return type
  def shouldMoveSinglePartitionWithinBroker() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldExpandCluster`'s return type
  def shouldExpandCluster() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:195: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldShrinkCluster`'s return type
  def shouldShrinkCluster() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:217: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldMoveSubsetOfPartitions`'s return type
  def shouldMoveSubsetOfPartitions() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:268: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldExecuteThrottledReassignment`'s return type
  def shouldExecuteThrottledReassignment() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:312: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldOnlyThrottleMovingReplicas`'s return type
  def shouldOnlyThrottleMovingReplicas() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:357: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldChangeThrottleOnRerunAndRemoveOnVerify`'s return type
  def shouldChangeThrottleOnRerunAndRemoveOnVerify() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:408: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailIfProposedDoesNotMatchExisting`'s return type
  def shouldFailIfProposedDoesNotMatchExisting() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:419: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailIfProposedHasEmptyReplicaList`'s return type
  def shouldFailIfProposedHasEmptyReplicaList() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:430: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailIfProposedHasInvalidBrokerID`'s return type
  def shouldFailIfProposedHasInvalidBrokerID() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:441: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailIfProposedHasInvalidLogDir`'s return type
  def shouldFailIfProposedHasInvalidLogDir() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:453: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailIfProposedHasInconsistentReplicasAndLogDirs`'s return type
  def shouldFailIfProposedHasInconsistentReplicasAndLogDirs() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:466: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldPerformThrottledReassignmentOverVariousTopics`'s return type
  def shouldPerformThrottledReassignmentOverVariousTopics() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:511: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldPerformMultipleReassignmentOperationsOverVariousTopics`'s return type
  def shouldPerformMultipleReassignmentOperationsOverVariousTopics() {
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:630: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `waitForReassignmentToComplete`'s return type
  def waitForReassignmentToComplete(pause: Long = 100L) {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandArgsTest.scala:26: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandArgsTest.scala:31: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindMovingReplicas`'s return type
  def shouldFindMovingReplicas() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:76: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindMovingReplicasWhenProposedIsSubsetOfExisting`'s return type
  def shouldFindMovingReplicasWhenProposedIsSubsetOfExisting() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:111: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindMovingReplicasMultiplePartitions`'s return type
  def shouldFindMovingReplicasMultiplePartitions() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindMovingReplicasMultipleTopics`'s return type
  def shouldFindMovingReplicasMultipleTopics() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:168: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindMovingReplicasMultipleTopicsAndPartitions`'s return type
  def shouldFindMovingReplicasMultipleTopicsAndPartitions() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:211: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFindTwoMovingReplicasInSamePartition`'s return type
  def shouldFindTwoMovingReplicasInSamePartition() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:429: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionReassignmentWithLeaderInNewReplicas`'s return type
  def testPartitionReassignmentWithLeaderInNewReplicas() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:458: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionReassignmentWithLeaderNotInNewReplicas`'s return type
  def testPartitionReassignmentWithLeaderNotInNewReplicas() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:486: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPartitionReassignmentNonOverlappingReplicas`'s return type
  def testPartitionReassignmentNonOverlappingReplicas() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:514: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReassigningNonExistingPartition`'s return type
  def testReassigningNonExistingPartition() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:529: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResumePartitionReassignmentThatWasCompleted`'s return type
  def testResumePartitionReassignmentThatWasCompleted() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDateTimeFormats`'s return type
  def testDateTimeFormats() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `invokeGetDateTimeMethod`'s return type
  private def invokeGetDateTimeMethod(format: SimpleDateFormat) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:107: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsNotExistingGroup`'s return type
  def testResetOffsetsNotExistingGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:181: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToLocalDateTime`'s return type
  def testResetOffsetsToLocalDateTime() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToZonedDateTime`'s return type
  def testResetOffsetsToZonedDateTime() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsByDuration`'s return type
  def testResetOffsetsByDuration() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:220: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsByDurationToEarliest`'s return type
  def testResetOffsetsByDurationToEarliest() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:227: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToEarliest`'s return type
  def testResetOffsetsToEarliest() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:234: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToLatest`'s return type
  def testResetOffsetsToLatest() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:242: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToCurrentOffset`'s return type
  def testResetOffsetsToCurrentOffset() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:250: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToSpecificOffset`'s return type
  def testResetOffsetsToSpecificOffset() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:257: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsShiftPlus`'s return type
  def testResetOffsetsShiftPlus() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:265: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsShiftMinus`'s return type
  def testResetOffsetsShiftMinus() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:273: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsShiftByLowerThanEarliest`'s return type
  def testResetOffsetsShiftByLowerThanEarliest() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:281: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsShiftByHigherThanLatest`'s return type
  def testResetOffsetsShiftByHigherThanLatest() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:289: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToEarliestOnOneTopic`'s return type
  def testResetOffsetsToEarliestOnOneTopic() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:296: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToEarliestOnOneTopicAndPartition`'s return type
  def testResetOffsetsToEarliestOnOneTopicAndPartition() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:315: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToEarliestOnTopics`'s return type
  def testResetOffsetsToEarliestOnTopics() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:340: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsToEarliestOnTopicsAndPartitions`'s return type
  def testResetOffsetsToEarliestOnTopicsAndPartitions() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:370: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsExportImportPlanSingleGroupArg`'s return type
  def testResetOffsetsExportImportPlanSingleGroupArg() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:401: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetOffsetsExportImportPlan`'s return type
  def testResetOffsetsExportImportPlan() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:446: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResetWithUnrecognizedNewConsumerOption`'s return type
  def testResetWithUnrecognizedNewConsumerOption() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:458: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `produceConsumeAndShutdown`'s return type
  private def produceConsumeAndShutdown(topic: String, group: String, totalMessages: Int, numConsumers: Int = 1) {
                                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:79: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateIfNotExists`'s return type
  def testCreateIfNotExists() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateWithInvalidReplicationFactor`'s return type
  def testCreateWithInvalidReplicationFactor() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:263: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAlterIfExists`'s return type
  def testAlterIfExists() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:280: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAlterConfigs`'s return type
  def testAlterConfigs() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:304: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConfigPreservationAcrossPartitionAlteration`'s return type
  def testConfigPreservationAcrossPartitionAlteration() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:334: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicDeletion`'s return type
  def testTopicDeletion() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:372: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteIfExists`'s return type
  def testDeleteIfExists() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:408: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeIfTopicNotExists`'s return type
  def testDescribeIfTopicNotExists() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:431: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateAlterTopicWithRackAware`'s return type
  def testCreateAlterTopicWithRackAware() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:488: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeAndListTopicsMarkedForDeletion`'s return type
  def testDescribeAndListTopicsMarkedForDeletion() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:502: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `describeTopicsWithConfig`'s return type
    def describeTopicsWithConfig() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:508: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `describeTopicsNoConfig`'s return type
    def describeTopicsNoConfig() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:515: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `listTopics`'s return type
    def listTopics() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandTest.scala:523: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeAndListTopicsWithoutInternalTopics`'s return type
  def testDescribeAndListTopicsWithoutInternalTopics() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertExitCode`'s return type
  def assertExitCode(expected: Int, method: () => Unit) {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertCheckArgsExitCode`'s return type
  def assertCheckArgsExitCode(expected: Int, options: TopicCommandOptions) {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setup`'s return type
  def setup() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:257: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateWithInvalidReplicationFactor`'s return type
  def testCreateWithInvalidReplicationFactor() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/api/ApiUtilsTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testShortStringNonASCII`'s return type
  def testShortStringNonASCII() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/api/ApiUtilsTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testShortStringASCII`'s return type
  def testShortStringASCII() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/common/ZkNodeChangeNotificationListenerTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProcessNotification`'s return type
  def testProcessNotification() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerFailoverTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerFailoverTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHandleIllegalStateException`'s return type
  def testHandleIllegalStateException() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:443: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlledShutdown`'s return type
  def testControlledShutdown() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConcurrentOperations`'s return type
  def verifyConcurrentOperations(createMembers: String => Set[M], operations: Seq[Operation]) {
                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:81: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConcurrentRandomSequences`'s return type
  def verifyConcurrentRandomSequences(createMembers: String => Set[M], operations: Seq[Operation]) {
                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:92: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConcurrentActions`'s return type
  def verifyConcurrentActions(actions: Set[Action]) {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendRecords`'s return type
                               processingStatsCallback: Map[TopicPartition, RecordConversionStats] => Unit = _ => ()) {
                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
        override def onComplete() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala:93: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala:109: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConcurrentGoodPathSequence`'s return type
  def testConcurrentGoodPathSequence() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConcurrentTxnGoodPathSequence`'s return type
  def testConcurrentTxnGoodPathSequence() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorConcurrencyTest.scala:119: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConcurrentRandomSequence`'s return type
  def testConcurrentRandomSequence() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:124: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:192: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetsRetentionMsIntegerOverflow`'s return type
  def testOffsetsRetentionMsIntegerOverflow() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupWrongCoordinator`'s return type
  def testJoinGroupWrongCoordinator() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupShouldReceiveErrorIfGroupOverMaxSize`'s return type
  def testJoinGroupShouldReceiveErrorIfGroupOverMaxSize() {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:235: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupSessionTimeoutTooSmall`'s return type
  def testJoinGroupSessionTimeoutTooSmall() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:244: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupSessionTimeoutTooLarge`'s return type
  def testJoinGroupSessionTimeoutTooLarge() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:253: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupUnknownConsumerNewGroup`'s return type
  def testJoinGroupUnknownConsumerNewGroup() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:263: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidGroupId`'s return type
  def testInvalidGroupId() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:272: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidJoinGroup`'s return type
  def testValidJoinGroup() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:281: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupInconsistentProtocolType`'s return type
  def testJoinGroupInconsistentProtocolType() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:294: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupWithEmptyProtocolType`'s return type
  def testJoinGroupWithEmptyProtocolType() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:306: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupWithEmptyGroupProtocol`'s return type
  def testJoinGroupWithEmptyGroupProtocol() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:355: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupInconsistentGroupProtocol`'s return type
  def testJoinGroupInconsistentGroupProtocol() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:372: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupUnknownConsumerExistingGroup`'s return type
  def testJoinGroupUnknownConsumerExistingGroup() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:385: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupUnknownConsumerNewDeadGroup`'s return type
  def testJoinGroupUnknownConsumerNewDeadGroup() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:396: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncDeadGroup`'s return type
  def testSyncDeadGroup() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:407: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupSecondJoinInconsistentProtocol`'s return type
  def testJoinGroupSecondJoinInconsistentProtocol() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:428: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberJoinAsFirstMember`'s return type
  def staticMemberJoinAsFirstMember() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:434: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberReJoinWithExplicitUnknownMemberId`'s return type
  def staticMemberReJoinWithExplicitUnknownMemberId() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:445: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberFenceDuplicateRejoinedFollower`'s return type
  def staticMemberFenceDuplicateRejoinedFollower() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:479: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged`'s return type
  def staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged() {
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:542: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged`'s return type
  def staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged() {
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:590: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithKnownMemberId`'s return type
  def staticMemberRejoinWithKnownMemberId() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:612: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithLeaderIdAndUnknownMemberId`'s return type
  def staticMemberRejoinWithLeaderIdAndUnknownMemberId() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:643: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithLeaderIdAndKnownMemberId`'s return type
  def staticMemberRejoinWithLeaderIdAndKnownMemberId() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:662: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup`'s return type
  def staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:673: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup`'s return type
  def staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:685: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithFollowerIdAndChangeOfProtocol`'s return type
  def staticMemberRejoinWithFollowerIdAndChangeOfProtocol() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:708: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol`'s return type
  def staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:742: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol`'s return type
  def staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol() {
                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:791: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinAsFollowerWithUnknownMemberId`'s return type
  def staticMemberRejoinAsFollowerWithUnknownMemberId() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:816: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange`'s return type
  def staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange() {
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:836: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinAsFollowerWithMismatchedMemberId`'s return type
  def staticMemberRejoinAsFollowerWithMismatchedMemberId() {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:845: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberRejoinAsLeaderWithMismatchedMemberId`'s return type
  def staticMemberRejoinAsLeaderWithMismatchedMemberId() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:854: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberSyncAsLeaderWithInvalidMemberId`'s return type
  def staticMemberSyncAsLeaderWithInvalidMemberId() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:863: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberHeartbeatLeaderWithInvalidMemberId`'s return type
  def staticMemberHeartbeatLeaderWithInvalidMemberId() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:897: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetCommitDeadGroup`'s return type
  def testOffsetCommitDeadGroup() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:910: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberCommitOffsetWithInvalidMemberId`'s return type
  def staticMemberCommitOffsetWithInvalidMemberId() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:929: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberJoinWithUnknownInstanceIdAndKnownMemberId`'s return type
  def staticMemberJoinWithUnknownInstanceIdAndKnownMemberId() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:939: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberJoinWithIllegalStateAsPendingMember`'s return type
  def staticMemberJoinWithIllegalStateAsPendingMember() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:957: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberLeaveWithIllegalStateAsPendingMember`'s return type
  def staticMemberLeaveWithIllegalStateAsPendingMember() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:975: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberReJoinWithIllegalStateAsUnknownMember`'s return type
  def staticMemberReJoinWithIllegalStateAsUnknownMember() {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:994: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `staticMemberReJoinWithIllegalArgumentAsMissingOldMember`'s return type
  def staticMemberReJoinWithIllegalArgumentAsMissingOldMember() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1011: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout`'s return type
  def testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout() {
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1023: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout`'s return type
  def testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout() {
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1041: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `groupStuckInRebalanceTimeoutDueToNonjoinedStaticMember`'s return type
  def groupStuckInRebalanceTimeoutDueToNonjoinedStaticMember() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1073: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout`'s return type
  def testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1108: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout`'s return type
  def testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1206: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkJoinGroupResult`'s return type
                                   expectedMemberId: String = JoinGroupRequest.UNKNOWN_MEMBER_ID) {
                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1223: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatWrongCoordinator`'s return type
  def testHeartbeatWrongCoordinator() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1229: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatUnknownGroup`'s return type
  def testHeartbeatUnknownGroup() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1235: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testheartbeatDeadGroup`'s return type
  def testheartbeatDeadGroup() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1246: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testheartbeatEmptyGroup`'s return type
  def testheartbeatEmptyGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1261: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatUnknownConsumerExistingGroup`'s return type
  def testHeartbeatUnknownConsumerExistingGroup() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1281: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatRebalanceInProgress`'s return type
  def testHeartbeatRebalanceInProgress() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1295: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatIllegalGeneration`'s return type
  def testHeartbeatIllegalGeneration() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1314: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidHeartbeat`'s return type
  def testValidHeartbeat() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1334: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSessionTimeout`'s return type
  def testSessionTimeout() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1361: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatMaintainsSession`'s return type
  def testHeartbeatMaintainsSession() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1390: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitMaintainsSession`'s return type
  def testCommitMaintainsSession() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1421: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSessionTimeoutDuringRebalance`'s return type
  def testSessionTimeoutDuringRebalance() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1457: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRebalanceCompletesBeforeMemberJoins`'s return type
  def testRebalanceCompletesBeforeMemberJoins() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1530: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupEmptyAssignment`'s return type
  def testSyncGroupEmptyAssignment() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1551: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupNotCoordinator`'s return type
  def testSyncGroupNotCoordinator() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1559: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupFromUnknownGroup`'s return type
  def testSyncGroupFromUnknownGroup() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1565: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupFromUnknownMember`'s return type
  def testSyncGroupFromUnknownMember() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1585: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupFromIllegalGeneration`'s return type
  def testSyncGroupFromIllegalGeneration() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1600: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupFromUnchangedFollowerDoesNotRebalance`'s return type
  def testJoinGroupFromUnchangedFollowerDoesNotRebalance() {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1641: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupFromUnchangedLeaderShouldRebalance`'s return type
  def testJoinGroupFromUnchangedLeaderShouldRebalance() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1669: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSecondMemberPartiallyJoinAndTimeout`'s return type
  def testSecondMemberPartiallyJoinAndTimeout() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1776: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupCompletionWhenPendingMemberJoins`'s return type
  def testJoinGroupCompletionWhenPendingMemberJoins() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1794: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJoinGroupCompletionWhenPendingMemberTimesOut`'s return type
  def testJoinGroupCompletionWhenPendingMemberTimesOut() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1850: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaderFailureInSyncGroup`'s return type
  def testLeaderFailureInSyncGroup() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1894: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupFollowerAfterLeader`'s return type
  def testSyncGroupFollowerAfterLeader() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1943: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSyncGroupLeaderAfterFollower`'s return type
  def testSyncGroupLeaderAfterFollower() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:1995: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetFromUnknownGroup`'s return type
  def testCommitOffsetFromUnknownGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2005: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetWithDefaultGeneration`'s return type
  def testCommitOffsetWithDefaultGeneration() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2067: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitAndFetchOffsetsWithEmptyGroup`'s return type
  def testCommitAndFetchOffsetsWithEmptyGroup() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2105: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBasicFetchTxnOffsets`'s return type
  def testBasicFetchTxnOffsets() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchTxnOffsetsWithAbort`'s return type
  def testFetchTxnOffsetsWithAbort() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2156: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchTxnOffsetsIgnoreSpuriousCommit`'s return type
  def testFetchTxnOffsetsIgnoreSpuriousCommit() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2185: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchTxnOffsetsOneProducerMultipleGroups`'s return type
  def testFetchTxnOffsetsOneProducerMultipleGroups() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchTxnOffsetsMultipleProducersOneGroup`'s return type
  def testFetchTxnOffsetsMultipleProducersOneGroup() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2338: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchAllOffsets`'s return type
  def testFetchAllOffsets() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2364: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetInCompletingRebalance`'s return type
  def testCommitOffsetInCompletingRebalance() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2381: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetInCompletingRebalanceFromUnknownMemberId`'s return type
  def testCommitOffsetInCompletingRebalanceFromUnknownMemberId() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2397: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetInCompletingRebalanceFromIllegalGeneration`'s return type
  def testCommitOffsetInCompletingRebalanceFromIllegalGeneration() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2414: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeartbeatDuringRebalanceCausesRebalanceInProgress`'s return type
  def testHeartbeatDuringRebalanceCausesRebalanceInProgress() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2433: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGenerationIdIncrementsOnRebalance`'s return type
  def testGenerationIdIncrementsOnRebalance() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2457: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaveGroupWrongCoordinator`'s return type
  def testLeaveGroupWrongCoordinator() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2465: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaveGroupUnknownGroup`'s return type
  def testLeaveGroupUnknownGroup() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2471: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaveGroupUnknownConsumerExistingGroup`'s return type
  def testLeaveGroupUnknownConsumerExistingGroup() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2485: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSingleLeaveDeadGroup`'s return type
  def testSingleLeaveDeadGroup() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2494: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBatchLeaveDeadGroup`'s return type
  def testBatchLeaveDeadGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2504: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidLeaveGroup`'s return type
  def testValidLeaveGroup() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2518: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaveGroupWithFencedInstanceId`'s return type
  def testLeaveGroupWithFencedInstanceId() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2528: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaveGroupStaticMemberWithUnknownMemberId`'s return type
  def testLeaveGroupStaticMemberWithUnknownMemberId() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2539: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMembersValidBatchLeaveGroup`'s return type
  def testStaticMembersValidBatchLeaveGroup() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2550: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMembersWrongCoordinatorBatchLeaveGroup`'s return type
  def testStaticMembersWrongCoordinatorBatchLeaveGroup() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2561: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMembersUnknownGroupBatchLeaveGroup`'s return type
  def testStaticMembersUnknownGroupBatchLeaveGroup() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2569: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMembersFencedInstanceBatchLeaveGroup`'s return type
  def testStaticMembersFencedInstanceBatchLeaveGroup() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2582: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStaticMembersUnknownInstanceBatchLeaveGroup`'s return type
  def testStaticMembersUnknownInstanceBatchLeaveGroup() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2594: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPendingMemberBatchLeaveGroup`'s return type
  def testPendingMemberBatchLeaveGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2606: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup`'s return type
  def testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2626: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListGroupsIncludesStableGroups`'s return type
  def testListGroupsIncludesStableGroups() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2645: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListGroupsIncludesRebalancingGroups`'s return type
  def testListGroupsIncludesRebalancingGroups() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2657: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupWrongCoordinator`'s return type
  def testDescribeGroupWrongCoordinator() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2664: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupInactiveGroup`'s return type
  def testDescribeGroupInactiveGroup() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2672: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupStableForDynamicMember`'s return type
  def testDescribeGroupStableForDynamicMember() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2694: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupStableForStaticMember`'s return type
  def testDescribeGroupStableForStaticMember() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2717: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDescribeGroupRebalancing`'s return type
  def testDescribeGroupRebalancing() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2735: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteNonEmptyGroup`'s return type
  def testDeleteNonEmptyGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2744: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteGroupWithInvalidGroupId`'s return type
  def testDeleteGroupWithInvalidGroupId() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2751: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteGroupWithWrongCoordinator`'s return type
  def testDeleteGroupWithWrongCoordinator() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2757: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteEmptyGroup`'s return type
  def testDeleteEmptyGroup() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2779: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteEmptyGroupWithStoredOffsets`'s return type
  def testDeleteEmptyGroupWithStoredOffsets() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2822: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup`'s return type
  def shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup() {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2841: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance`'s return type
  def shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance() {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:2865: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldDelayRebalanceUptoRebalanceTimeout`'s return type
  def shouldDelayRebalanceUptoRebalanceTimeout() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupCoordinatorTest.scala:3165: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyLeaveGroupResult`'s return type
                             expectedMemberLevelErrors: List[Errors] = List.empty) {
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:72: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:101: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadOffsetsWithoutGroup`'s return type
  def testLoadOffsetsWithoutGroup() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:129: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadEmptyGroupWithOffsets`'s return type
  def testLoadEmptyGroupWithOffsets() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:164: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadTransactionalOffsetsWithoutGroup`'s return type
  def testLoadTransactionalOffsetsWithoutGroup() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:198: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDoNotLoadAbortedTransactionalOffsetCommits`'s return type
  def testDoNotLoadAbortedTransactionalOffsetCommits() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:262: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadWithCommittedAndAbortedTransactionalOffsetCommits`'s return type
  def testLoadWithCommittedAndAbortedTransactionalOffsetCommits() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:308: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits`'s return type
  def testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits() {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:512: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGroupNotExists`'s return type
  def testGroupNotExists() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:560: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadOffsetsWithTombstones`'s return type
  def testLoadOffsetsWithTombstones() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:595: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadOffsetsAndGroup`'s return type
  def testLoadOffsetsAndGroup() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:635: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadGroupWithTombstone`'s return type
  def testLoadGroupWithTombstone() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:655: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadGroupWithLargeGroupMetadataRecord`'s return type
  def testLoadGroupWithLargeGroupMetadataRecord() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:775: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAddGroup`'s return type
  def testAddGroup() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:782: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testloadGroupWithStaticMember`'s return type
  def testloadGroupWithStaticMember() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:808: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadFromOldGroupMetadata`'s return type
  def testReadFromOldGroupMetadata() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:829: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStoreEmptyGroup`'s return type
  def testStoreEmptyGroup() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:840: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(error: Errors) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:859: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStoreEmptySimpleGroup`'s return type
  def testStoreEmptySimpleGroup() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:867: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(error: Errors) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:888: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStoreGroupErrorMapping`'s return type
  def testStoreGroupErrorMapping() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:900: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertStoreGroupErrorMapping`'s return type
  private def assertStoreGroupErrorMapping(appendError: Errors, expectedError: Errors) {
                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:910: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(error: Errors) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:921: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStoreNonEmptyGroup`'s return type
  def testStoreNonEmptyGroup() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:939: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(error: Errors) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:950: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStoreNonEmptyGroupWhenCoordinatorHasMoved`'s return type
  def testStoreNonEmptyGroupWhenCoordinatorHasMoved() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:967: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(error: Errors) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:978: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffset`'s return type
  def testCommitOffset() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:994: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1018: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTransactionalCommitOffsetCommitted`'s return type
  def testTransactionalCommitOffsetCommitted() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1037: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1059: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTransactionalCommitOffsetAppendFailure`'s return type
  def testTransactionalCommitOffsetAppendFailure() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1077: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1098: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTransactionalCommitOffsetAborted`'s return type
  def testTransactionalCommitOffsetAborted() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1137: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetWhenCoordinatorHasMoved`'s return type
  def testCommitOffsetWhenCoordinatorHasMoved() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1167: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCommitOffsetFailure`'s return type
  def testCommitOffsetFailure() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1196: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1217: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExpireOffset`'s return type
  def testExpireOffset() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1239: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1272: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGroupMetadataRemoval`'s return type
  def testGroupMetadataRemoval() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1320: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGroupMetadataRemovalWithLogAppendTime`'s return type
  def testGroupMetadataRemovalWithLogAppendTime() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1369: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExpireGroupWithOffsetsOnly`'s return type
  def testExpireGroupWithOffsetsOnly() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1394: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1441: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetExpirationSemantics`'s return type
  def testOffsetExpirationSemantics() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1479: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1603: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetExpirationOfSimpleConsumer`'s return type
  def testOffsetExpirationOfSimpleConsumer() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1627: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
    def callback(errors: immutable.Map[TopicPartition, Errors]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1850: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadOffsetsWithEmptyControlBatch`'s return type
  def testLoadOffsetsWithEmptyControlBatch() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:2047: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetrics`'s return type
  def testMetrics() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCanRebalanceWhenStable`'s return type
  def testCanRebalanceWhenStable() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCanRebalanceWhenCompletingRebalance`'s return type
  def testCanRebalanceWhenCompletingRebalance() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCannotRebalanceWhenPreparingRebalance`'s return type
  def testCannotRebalanceWhenPreparingRebalance() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:69: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCannotRebalanceWhenDead`'s return type
  def testCannotRebalanceWhenDead() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:77: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStableToPreparingRebalanceTransition`'s return type
  def testStableToPreparingRebalanceTransition() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStableToDeadTransition`'s return type
  def testStableToDeadTransition() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAwaitingRebalanceToPreparingRebalanceTransition`'s return type
  def testAwaitingRebalanceToPreparingRebalanceTransition() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:97: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreparingRebalanceToDeadTransition`'s return type
  def testPreparingRebalanceToDeadTransition() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreparingRebalanceToEmptyTransition`'s return type
  def testPreparingRebalanceToEmptyTransition() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:111: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEmptyToDeadTransition`'s return type
  def testEmptyToDeadTransition() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:119: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAwaitingRebalanceToStableTransition`'s return type
  def testAwaitingRebalanceToStableTransition() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:127: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEmptyToStableIllegalTransition`'s return type
  def testEmptyToStableIllegalTransition() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testStableToStableIllegalTransition`'s return type
  def testStableToStableIllegalTransition() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:145: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEmptyToAwaitingRebalanceIllegalTransition`'s return type
  def testEmptyToAwaitingRebalanceIllegalTransition() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:150: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreparingRebalanceToPreparingRebalanceIllegalTransition`'s return type
  def testPreparingRebalanceToPreparingRebalanceIllegalTransition() {
                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:156: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreparingRebalanceToStableIllegalTransition`'s return type
  def testPreparingRebalanceToStableIllegalTransition() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAwaitingRebalanceToAwaitingRebalanceIllegalTransition`'s return type
  def testAwaitingRebalanceToAwaitingRebalanceIllegalTransition() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:168: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeadToDeadIllegalTransition`'s return type
  def testDeadToDeadIllegalTransition() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:176: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeadToStableIllegalTransition`'s return type
  def testDeadToStableIllegalTransition() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:183: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeadToPreparingRebalanceIllegalTransition`'s return type
  def testDeadToPreparingRebalanceIllegalTransition() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:190: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeadToAwaitingRebalanceIllegalTransition`'s return type
  def testDeadToAwaitingRebalanceIllegalTransition() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSelectProtocol`'s return type
  def testSelectProtocol() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:223: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSelectProtocolRaisesIfNoMembers`'s return type
  def testSelectProtocolRaisesIfNoMembers() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:229: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSelectProtocolChoosesCompatibleProtocol`'s return type
  def testSelectProtocolChoosesCompatibleProtocol() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:244: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSupportsProtocols`'s return type
  def testSupportsProtocols() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:266: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInitNextGeneration`'s return type
  def testInitNextGeneration() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:282: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInitNextGenerationEmptyGroup`'s return type
  def testInitNextGenerationEmptyGroup() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataTest.scala:549: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertState`'s return type
  private def assertState(group: GroupMetadata, targetState: GroupState) {
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMatchesSupportedProtocols`'s return type
  def testMatchesSupportedProtocols() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testVoteForPreferredProtocol`'s return type
  def testVoteForPreferredProtocol() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetadata`'s return type
  def testMetadata() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetadataRaisesOnUnsupportedProtocol`'s return type
  def testMetadataRaisesOnUnsupportedProtocol() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testVoteRaisesOnNoSupportedProtocols`'s return type
  def testVoteRaisesOnNoSupportedProtocols() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/MemberMetadataTest.scala:88: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHasValidGroupInstanceId`'s return type
  def testHasValidGroupInstanceId() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/ProducerIdManagerTest.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetProducerId`'s return type
  def testGetProducerId() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/ProducerIdManagerTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExceedProducerIdLimit`'s return type
  def testExceedProducerIdLimit() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionLogTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldThrowExceptionWriteInvalidTxn`'s return type
  def shouldThrowExceptionWriteInvalidTxn() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionLogTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReadWriteMessages`'s return type
  def shouldReadWriteMessages() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:81: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:88: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:94: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidateTransactionTimeout`'s return type
  def testValidateTransactionTimeout() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAddGetPids`'s return type
  def testAddGetPids() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadAndRemoveTransactionsForPartition`'s return type
  def testLoadAndRemoveTransactionsForPartition() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:313: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendFailToUnknownError`'s return type
  def testAppendFailToUnknownError() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:333: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPendingStateNotResetOnRetryAppend`'s return type
  def testPendingStateNotResetOnRetryAppend() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityBeforeServersStart`'s return type
  def configureSecurityBeforeServersStart() {}
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configureSecurityAfterServersStart`'s return type
  def configureSecurityAfterServersStart() {}
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:90: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:146: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `killBroker`'s return type
  def killBroker(index: Int) {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/KafkaServerTestHarness.scala:157: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `restartDeadBrokers`'s return type
  def restartDeadBrokers() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetricsDuringTopicCreateDelete`'s return type
  def testMetricsDuringTopicCreateDelete() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      def run() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:134: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createDeleteTopics`'s return type
  private def createDeleteTopics() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MinIsrConfigTest.scala:33: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultKafkaConfig`'s return type
  def testDefaultKafkaConfig() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/UncleanLeaderElectionTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/UncleanLeaderElectionTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/UncleanLeaderElectionTest.scala:94: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startBrokers`'s return type
  private def startBrokers(cluster: Seq[Properties]) {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/BrokerCompressionTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/BrokerCompressionTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerSideCompression`'s return type
  def testBrokerSideCompression() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerIntegrationTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics`'s return type
  def testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanerTest`'s return type
  def cleanerTest() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala:229: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanerConfigUpdateTest`'s return type
  def cleanerConfigUpdateTest() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala:278: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLastCleaned`'s return type
  private def checkLastCleaned(topic: String, partitionId: Int, firstDirty: Long) {
                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala:288: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLogAfterAppendingDups`'s return type
  private def checkLogAfterAppendingDups(log: Log, startSize: Long, appends: Seq[(Int, String, Long)]) {
                                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:685: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLargeMessage`'s return type
  def testLargeMessage() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:716: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMessageLargerThanMaxMessageSize`'s return type
  def testMessageLargerThanMaxMessageSize() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:730: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMessageLargerThanMaxMessageSizeWithCorruptHeader`'s return type
  def testMessageLargerThanMaxMessageSizeWithCorruptHeader() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:748: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCorruptMessageSizeLargerThanBytesAvailable`'s return type
  def testCorruptMessageSizeLargerThanBytesAvailable() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1250: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkRange`'s return type
    def checkRange(map: FakeOffsetMap, start: Int, end: Int) {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1470: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanCorruptMessageSet`'s return type
  def testCleanCorruptMessageSet() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `ensureNoStaticInitializationOrderDependency`'s return type
  def ensureNoStaticInitializationOrderDependency() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testKafkaConfigToProps`'s return type
  def testKafkaConfigToProps() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFromPropsEmpty`'s return type
  def testFromPropsEmpty() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFromPropsInvalid`'s return type
  def testFromPropsInvalid() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:97: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldValidateThrottledReplicasConfig`'s return type
  def shouldValidateThrottledReplicasConfig() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogConfigTest.scala:167: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertPropertyInvalid`'s return type
  private def assertPropertyInvalid(name: String, values: AnyRef*) {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateLog`'s return type
  def testCreateLog() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateLogWithInvalidLogDir`'s return type
  def testCreateLogWithInvalidLogDir() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateLogWithLogDirFallback`'s return type
  def testCreateLogWithLogDirFallback() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:150: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetNonExistentLog`'s return type
  def testGetNonExistentLog() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:161: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanupExpiredSegments`'s return type
  def testCleanupExpiredSegments() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanupSegmentsToMaintainSize`'s return type
  def testCleanupSegmentsToMaintainSize() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDoesntCleanLogsWithCompactDeletePolicy`'s return type
  def testDoesntCleanLogsWithCompactDeletePolicy() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:260: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDoesntCleanLogsWithCompactPolicy`'s return type
  def testDoesntCleanLogsWithCompactPolicy() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDoesntCleanLogs`'s return type
  private def testDoesntCleanLogs(policy: String) {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:288: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTimeBasedFlush`'s return type
  def testTimeBasedFlush() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:310: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeastLoadedAssignment`'s return type
  def testLeastLoadedAssignment() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:331: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTwoLogManagersUsingSameDirFails`'s return type
  def testTwoLogManagersUsingSameDirFails() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:344: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCheckpointRecoveryPoints`'s return type
  def testCheckpointRecoveryPoints() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:352: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecoveryDirectoryMappingWithTrailingSlash`'s return type
  def testRecoveryDirectoryMappingWithTrailingSlash() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:363: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecoveryDirectoryMappingWithRelativeDirectory`'s return type
  def testRecoveryDirectoryMappingWithRelativeDirectory() {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:370: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyCheckpointRecovery`'s return type
  private def verifyCheckpointRecovery(topicPartitions: Seq[TopicPartition], logManager: LogManager, logDir: File) {
                                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:396: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFileReferencesAfterAsyncDelete`'s return type
  def testFileReferencesAfterAsyncDelete() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogManagerTest.scala:439: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCheckpointForOnlyAffectedLogs`'s return type
  def testCheckpointForOnlyAffectedLogs() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `teardown`'s return type
  def teardown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadOnEmptySegment`'s return type
  def testReadOnEmptySegment() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:79: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadBeforeFirstOffset`'s return type
  def testReadBeforeFirstOffset() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadAfterLast`'s return type
  def testReadAfterLast() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadFromGap`'s return type
  def testReadFromGap() {
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:119: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTruncate`'s return type
  def testTruncate() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:140: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTruncateEmptySegment`'s return type
  def testTruncateEmptySegment() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:178: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReloadLargestTimestampAndNextOffsetAfterTruncation`'s return type
  def testReloadLargestTimestampAndNextOffsetAfterTruncation() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTruncateFull`'s return type
  def testTruncateFull() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:224: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFindOffsetByTimestamp`'s return type
  def testFindOffsetByTimestamp() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:250: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNextOffsetCalculation`'s return type
  def testNextOffsetCalculation() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:261: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testChangeFileSuffixes`'s return type
  def testChangeFileSuffixes() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:277: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecoveryFixesCorruptIndex`'s return type
  def testRecoveryFixesCorruptIndex() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:368: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecoveryFixesCorruptTimeIndex`'s return type
  def testRecoveryFixesCorruptTimeIndex() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:386: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRecoveryWithCorruptMessage`'s return type
  def testRecoveryWithCorruptMessage() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:420: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateWithInitFileSizeAppendMessage`'s return type
  def testCreateWithInitFileSizeAppendMessage() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:432: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateWithInitFileSizeClearShutdown`'s return type
  def testCreateWithInitFileSizeClearShutdown() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:472: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldTruncateEvenIfOffsetPointsToAGapInTheLog`'s return type
  def shouldTruncateEvenIfOffsetPointsToAGapInTheLog() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `createEmptyLogs`'s return type
  def createEmptyLogs(dir: File, offsets: Int*) {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:272: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetFromFile`'s return type
  def testOffsetFromFile() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:293: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTimeBasedLogRoll`'s return type
  def testTimeBasedLogRoll() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:341: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRollSegmentThatAlreadyExists`'s return type
  def testRollSegmentThatAlreadyExists() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:644: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerIdMapOffsetUpdatedForNonIdempotentData`'s return type
  def testProducerIdMapOffsetUpdatedForNonIdempotentData() {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:852: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRebuildProducerIdMapWithCompactedData`'s return type
  def testRebuildProducerIdMapWithCompactedData() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:895: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRebuildProducerStateWithEmptyCompactedBatch`'s return type
  def testRebuildProducerStateWithEmptyCompactedBatch() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:936: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUpdateProducerIdMapWithCompactedData`'s return type
  def testUpdateProducerIdMapWithCompactedData() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:969: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerIdMapTruncateTo`'s return type
  def testProducerIdMapTruncateTo() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:993: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerIdMapTruncateToWithNoSnapshots`'s return type
  def testProducerIdMapTruncateToWithNoSnapshots() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1083: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerIdMapTruncateFullyAndStartAt`'s return type
  def testProducerIdMapTruncateFullyAndStartAt() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1105: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducerIdExpirationOnSegmentDeletion`'s return type
  def testProducerIdExpirationOnSegmentDeletion() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1131: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint`'s return type
  def testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint() {
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1235: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPeriodicProducerIdExpiration`'s return type
  def testPeriodicProducerIdExpiration() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1468: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTimeBasedLogRollJitter`'s return type
  def testTimeBasedLogRollJitter() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1491: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSizeBasedLogRoll`'s return type
  def testSizeBasedLogRoll() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1511: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadEmptyLog`'s return type
  def testLoadEmptyLog() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1521: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendAndReadWithSequentialOffsets`'s return type
  def testAppendAndReadWithSequentialOffsets() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1545: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendAndReadWithNonSequentialOffsets`'s return type
  def testAppendAndReadWithNonSequentialOffsets() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1569: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadAtLogGap`'s return type
  def testReadAtLogGap() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1585: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRollAfterLogHandlerClosed`'s return type
  def testLogRollAfterLogHandlerClosed() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1593: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadWithMinMessage`'s return type
  def testReadWithMinMessage() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1618: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadWithTooSmallMaxLength`'s return type
  def testReadWithTooSmallMaxLength() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1650: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadOutOfRange`'s return type
  def testReadOutOfRange() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1680: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRolls`'s return type
  def testLogRolls() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1717: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCompressedMessages`'s return type
  def testCompressedMessages() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1739: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testThatGarbageCollectingSegmentsDoesntChangeOffset`'s return type
  def testThatGarbageCollectingSegmentsDoesntChangeOffset() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1773: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMessageSetSizeCheck`'s return type
  def testMessageSetSizeCheck() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1789: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCompactedTopicConstraints`'s return type
  def testCompactedTopicConstraints() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1835: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMessageSizeCheck`'s return type
  def testMessageSizeCheck() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1860: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRecoversToCorrectOffset`'s return type
  def testLogRecoversToCorrectOffset() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1883: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyRecoveredLog`'s return type
    def verifyRecoveredLog(log: Log, expectedRecoveryPoint: Long) {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1907: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBuildTimeIndexWhenNotAssigningOffsets`'s return type
  def testBuildTimeIndexWhenNotAssigningOffsets() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1926: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIndexRebuild`'s return type
  def testIndexRebuild() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1999: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRebuildTimeIndexForOldMessages`'s return type
  def testRebuildTimeIndexForOldMessages() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2025: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCorruptIndexRebuild`'s return type
  def testCorruptIndexRebuild() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2067: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTruncateTo`'s return type
  def testTruncateTo() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2122: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIndexResizingAtTruncation`'s return type
  def testIndexResizingAtTruncation() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2158: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBogusIndexSegmentsAreRemoved`'s return type
  def testBogusIndexSegmentsAreRemoved() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2193: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReopenThenTruncate`'s return type
  def testReopenThenTruncate() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAsyncDelete`'s return type
  def testAsyncDelete() {
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2248: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOpenDeletesObsoleteFiles`'s return type
  def testOpenDeletesObsoleteFiles() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2266: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendMessageWithNullPayload`'s return type
  def testAppendMessageWithNullPayload() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2275: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendWithOutOfOrderOffsetsThrowsException`'s return type
  def testAppendWithOutOfOrderOffsetsThrowsException() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2296: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendBelowExpectedOffsetThrowsException`'s return type
  def testAppendBelowExpectedOffsetThrowsException() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2314: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppendEmptyLogBelowLogStartOffsetThrowsException`'s return type
  def testAppendEmptyLogBelowLogStartOffsetThrowsException() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2350: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCorruptLog`'s return type
  def testCorruptLog() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2818: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanShutdownFile`'s return type
  def testCleanShutdownFile() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2841: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionName`'s return type
  def testParseTopicPartitionName() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2855: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameWithPeriodForDeletedTopic`'s return type
  def testParseTopicPartitionNameWithPeriodForDeletedTopic() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2865: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForEmptyName`'s return type
  def testParseTopicPartitionNameForEmptyName() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2876: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForNull`'s return type
  def testParseTopicPartitionNameForNull() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2887: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForMissingSeparator`'s return type
  def testParseTopicPartitionNameForMissingSeparator() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2908: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForMissingTopic`'s return type
  def testParseTopicPartitionNameForMissingTopic() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2930: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForMissingPartition`'s return type
  def testParseTopicPartitionNameForMissingPartition() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2951: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForInvalidPartition`'s return type
  def testParseTopicPartitionNameForInvalidPartition() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2972: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseTopicPartitionNameForExistingInvalidDir`'s return type
  def testParseTopicPartitionNameForExistingInvalidDir() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2993: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteOldSegments`'s return type
  def testDeleteOldSegments() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3043: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogDeletionAfterClose`'s return type
  def testLogDeletionAfterClose() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3061: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogDeletionAfterDeleteRecords`'s return type
  def testLogDeletionAfterDeleteRecords() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3093: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldDeleteSizeBasedSegments`'s return type
  def shouldDeleteSizeBasedSegments() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3108: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize`'s return type
  def shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3123: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldDeleteTimeBasedSegmentsReadyToBeDeleted`'s return type
  def shouldDeleteTimeBasedSegmentsReadyToBeDeleted() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3138: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted`'s return type
  def shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete`'s return type
  def shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete`'s return type
  def shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete() {
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldApplyEpochToMessageOnAppendIfLeader`'s return type
  def shouldApplyEpochToMessageOnAppendIfLeader() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3236: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache`'s return type
  def followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache() {
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3260: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldTruncateLeaderEpochsWhenDeletingSegments`'s return type
  def shouldTruncateLeaderEpochsWhenDeletingSegments() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3285: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments`'s return type
  def shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3310: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog`'s return type
  def shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3362: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRecoversForLeaderEpoch`'s return type
  def testLogRecoversForLeaderEpoch() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3413: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFirstUnstableOffsetNoTransactionalData`'s return type
  def testFirstUnstableOffsetNoTransactionalData() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3427: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFirstUnstableOffsetWithTransactionalData`'s return type
  def testFirstUnstableOffsetWithTransactionalData() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3901: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetSnapshot`'s return type
  def testOffsetSnapshot() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3923: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLastStableOffsetWithMixedProducerData`'s return type
  def testLastStableOffsetWithMixedProducerData() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3975: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAbortedTransactionSpanningMultipleSegments`'s return type
  def testAbortedTransactionSpanningMultipleSegments() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4018: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadPartitionDirWithNoSegmentsShouldNotThrow`'s return type
  def testLoadPartitionDirWithNoSegmentsShouldNotThrow() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkOnlyOneBatch`'s return type
  private def checkOnlyOneBatch(magic: Byte, sourceCompressionType: CompressionType, targetCompressionType: CompressionType) {
                                                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkAllowMultiBatch`'s return type
  private def checkAllowMultiBatch(magic: Byte, sourceCompressionType: CompressionType, targetCompressionType: CompressionType) {
                                                                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:99: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeNonCompressedV1`'s return type
  def testLogAppendTimeNonCompressedV1() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLogAppendTimeNonCompressed`'s return type
  private def checkLogAppendTimeNonCompressed(magic: Byte) {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:131: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeNonCompressedV2`'s return type
  def testLogAppendTimeNonCompressedV2() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeWithRecompressionV1`'s return type
  def testLogAppendTimeWithRecompressionV1() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:140: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLogAppendTimeWithRecompression`'s return type
  private def checkLogAppendTimeWithRecompression(targetMagic: Byte) {
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:173: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeWithRecompressionV2`'s return type
  def testLogAppendTimeWithRecompressionV2() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:178: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeWithoutRecompressionV1`'s return type
  def testLogAppendTimeWithoutRecompressionV1() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:182: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLogAppendTimeWithoutRecompression`'s return type
  private def checkLogAppendTimeWithoutRecompression(magic: Byte) {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:240: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateRecordBatchWithCountOverrides`'s return type
  private def validateRecordBatchWithCountOverrides(lastOffsetDelta: Int, count: Int) {
                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:261: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogAppendTimeWithoutRecompressionV2`'s return type
  def testLogAppendTimeWithoutRecompressionV2() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:266: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNonCompressedV1`'s return type
  def testNonCompressedV1() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:270: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkNonCompressed`'s return type
  private def checkNonCompressed(magic: Byte) {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:328: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNonCompressedV2`'s return type
  def testNonCompressedV2() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:403: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCreateTimeUpConversionFromV0`'s return type
  private def checkCreateTimeUpConversionFromV0(toMagic: Byte) {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:439: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateTimeUpConversionV0ToV2`'s return type
  def testCreateTimeUpConversionV0ToV2() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:444: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateTimeUpConversionV1ToV2`'s return type
  def testCreateTimeUpConversionV1ToV2() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:481: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCompressedV1`'s return type
  def testCompressedV1() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:485: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkCompressed`'s return type
  private def checkCompressed(magic: Byte) {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:543: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCompressedV2`'s return type
  def testCompressedV2() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:548: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCreateTimeNonCompressedV1`'s return type
  def testInvalidCreateTimeNonCompressedV1() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:569: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCreateTimeNonCompressedV2`'s return type
  def testInvalidCreateTimeNonCompressedV2() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:590: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCreateTimeCompressedV1`'s return type
  def testInvalidCreateTimeCompressedV1() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:611: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCreateTimeCompressedV2`'s return type
  def testInvalidCreateTimeCompressedV2() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:632: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAbsoluteOffsetAssignmentNonCompressed`'s return type
  def testAbsoluteOffsetAssignmentNonCompressed() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:652: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAbsoluteOffsetAssignmentCompressed`'s return type
  def testAbsoluteOffsetAssignmentCompressed() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:672: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRelativeOffsetAssignmentNonCompressedV1`'s return type
  def testRelativeOffsetAssignmentNonCompressedV1() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:694: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRelativeOffsetAssignmentNonCompressedV2`'s return type
  def testRelativeOffsetAssignmentNonCompressedV2() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:716: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRelativeOffsetAssignmentCompressedV1`'s return type
  def testRelativeOffsetAssignmentCompressedV1() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:739: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRelativeOffsetAssignmentCompressedV2`'s return type
  def testRelativeOffsetAssignmentCompressedV2() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:762: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed`'s return type
  def testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:785: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed`'s return type
  def testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:808: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV0ToV1Compressed`'s return type
  def testOffsetAssignmentAfterUpConversionV0ToV1Compressed() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:831: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV0ToV2Compressed`'s return type
  def testOffsetAssignmentAfterUpConversionV0ToV2Compressed() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:854: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlRecordsNotAllowedFromClients`'s return type
  def testControlRecordsNotAllowedFromClients() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:874: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlRecordsNotCompressed`'s return type
  def testControlRecordsNotCompressed() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:898: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed`'s return type
  def testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:919: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV1ToV0Compressed`'s return type
  def testOffsetAssignmentAfterDownConversionV1ToV0Compressed() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:940: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed`'s return type
  def testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed() {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:960: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterUpConversionV1ToV2Compressed`'s return type
  def testOffsetAssignmentAfterUpConversionV1ToV2Compressed() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:980: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed`'s return type
  def testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1001: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV2ToV1Compressed`'s return type
  def testOffsetAssignmentAfterDownConversionV2ToV1Compressed() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1022: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDownConversionOfTransactionalRecordsNotPermitted`'s return type
  def testDownConversionOfTransactionalRecordsNotPermitted() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1045: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDownConversionOfIdempotentRecordsNotPermitted`'s return type
  def testDownConversionOfIdempotentRecordsNotPermitted() {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1068: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed`'s return type
  def testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed() {
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1089: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testOffsetAssignmentAfterDownConversionV2ToV0Compressed`'s return type
  def testOffsetAssignmentAfterDownConversionV2ToV0Compressed() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkOffsets`'s return type
  def checkOffsets(records: MemoryRecords, baseOffset: Long) {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1239: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateLogAppendTime`'s return type
  def validateLogAppendTime(expectedLogAppendTime: Long, expectedBaseTimestamp: Long, batch: RecordBatch) {
                                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setup`'s return type
  def setup() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `teardown`'s return type
  def teardown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `randomLookupTest`'s return type
  def randomLookupTest() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `lookupExtremeCases`'s return type
  def lookupExtremeCases() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendTooMany`'s return type
  def appendTooMany() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendOutOfOrder`'s return type
  def appendOutOfOrder() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchUpperBoundOffset`'s return type
  def testFetchUpperBoundOffset() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:140: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReopen`'s return type
  def testReopen() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:155: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `truncate`'s return type
  def truncate() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:204: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertWriteFails`'s return type
  def assertWriteFails[T](message: String, idx: OffsetIndex, offset: Int, klass: Class[T]) {
                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetMapTest.scala:29: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBasicValidation`'s return type
  def testBasicValidation() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetMapTest.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClear`'s return type
  def testClear() {
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetMapTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetWhenFull`'s return type
  def testGetWhenFull() {
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetMapTest.scala:74: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `main`'s return type
  def main(args: Array[String]) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/ProducerStateManagerTest.scala:662: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPidExpirationTimeout`'s return type
  def testPidExpirationTimeout() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/ProducerStateManagerTest.scala:672: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFirstUnstableOffset`'s return type
  def testFirstUnstableOffset() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/ProducerStateManagerTest.scala:706: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProducersWithOngoingTransactionsDontExpire`'s return type
  def testProducersWithOngoingTransactionsDontExpire() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setup`'s return type
  def setup() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `teardown`'s return type
  def teardown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLookUp`'s return type
  def testLookUp() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTruncate`'s return type
  def testTruncate() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAppend`'s return type
  def testAppend() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/TimeIndexTest.scala:100: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendEntries`'s return type
  private def appendEntries(numEntries: Int) {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/KafkaTimerTest.scala:28: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testKafkaTimer`'s return type
  def testKafkaTimer() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/KafkaTimerTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addMillis`'s return type
    def addMillis(millis: Long) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMetricsReporterAfterDeletingTopic`'s return type
  def testMetricsReporterAfterDeletingTopic() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerTopicMetricsUnregisteredAfterDeletingTopic`'s return type
  def testBrokerTopicMetricsUnregisteredAfterDeletingTopic() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:88: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRequest`'s return type
  def sendRequest(socket: Socket, request: Array[Byte], id: Option[Short] = None, flush: Boolean = true) {
                                                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:126: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processRequest`'s return type
  def processRequest(channel: RequestChannel) {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:130: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `processRequest`'s return type
  def processRequest(channel: RequestChannel, request: RequestChannel.Request) {
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:182: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `simpleRequest`'s return type
  def simpleRequest() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:209: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tooBigRequestIsRejected`'s return type
  def tooBigRequestIsRejected() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:227: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGracefulClose`'s return type
  def testGracefulClose() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:256: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConnectionId`'s return type
  def testConnectionId() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:273: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIdleConnection`'s return type
  def testIdleConnection() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:318: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConnectionIdReuse`'s return type
  def testConnectionIdReuse() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:452: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendActionResponseWithThrottledChannelWhereThrottlingInProgress`'s return type
  def testSendActionResponseWithThrottledChannelWhereThrottlingInProgress() {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:466: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone`'s return type
  def testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone() {
                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:481: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress`'s return type
  def testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress() {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:493: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone`'s return type
  def testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone() {
                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:506: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSocketsCloseOnShutdown`'s return type
  def testSocketsCloseOnShutdown() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:533: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxConnectionsPerIp`'s return type
  def testMaxConnectionsPerIp() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:555: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testZeroMaxConnectionsPerIp`'s return type
  def testZeroMaxConnectionsPerIp() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:592: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxConnectionsPerIpOverrides`'s return type
  def testMaxConnectionsPerIpOverrides() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:619: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSslSocketServer`'s return type
  def testSslSocketServer() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:659: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSessionPrincipal`'s return type
  def testSessionPrincipal() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:668: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClientDisconnectionUpdatesRequestMetrics`'s return type
  def testClientDisconnectionUpdatesRequestMetrics() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:678: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendResponse`'s return type
          override protected[network] def sendResponse(response: RequestChannel.Response, responseSend: Send) {
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:714: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClientDisconnectionWithStagedReceivesFullyProcessed`'s return type
  def testClientDisconnectionWithStagedReceivesFullyProcessed() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:767: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerSendAfterChannelClosedUpdatesRequestMetrics`'s return type
  def testBrokerSendAfterChannelClosedUpdatesRequestMetrics() {
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1291: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `addFailure`'s return type
    def addFailure(operation: SelectorOperation, exception: Option[Throwable] = None) {
                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAuthorizeThrowsOnNoneLiteralResource`'s return type
  def testAuthorizeThrowsOnNoneLiteralResource() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:109: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicAcl`'s return type
  def testTopicAcl() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:164: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAllowAccessWithCustomPrincipal`'s return type
  def testAllowAccessWithCustomPrincipal() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:184: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDenyTakesPrecedence`'s return type
  def testDenyTakesPrecedence() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:199: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAllowAllAccess`'s return type
  def testAllowAllAccess() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:209: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSuperUserHasAccess`'s return type
  def testSuperUserHasAccess() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:259: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoAclFound`'s return type
  def testNoAclFound() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:264: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoAclFoundOverride`'s return type
  def testNoAclFoundOverride() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:279: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAclManagementAPIs`'s return type
  def testAclManagementAPIs() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:325: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLoadCache`'s return type
  def testLoadCache() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:355: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testChangeListenerTiming`'s return type
  def testChangeListenerTiming() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:384: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLocalConcurrentModificationOfResourceAcls`'s return type
  def testLocalConcurrentModificationOfResourceAcls() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:400: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDistributedConcurrentModificationOfResourceAcls`'s return type
  def testDistributedConcurrentModificationOfResourceAcls() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:430: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighConcurrencyModificationOfResourceAcls`'s return type
  def testHighConcurrencyModificationOfResourceAcls() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:515: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighConcurrencyDeletionOfResourceAcls`'s return type
  def testHighConcurrencyDeletionOfResourceAcls() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/SimpleAclAuthorizerTest.scala:724: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `givenAuthorizerWithProtocolVersion`'s return type
  private def givenAuthorizerWithProtocolVersion(protocolVersion: Option[ApiVersion]) {
                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/ZkAuthorizationTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/ZkAuthorizationTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/token/delegation/DelegationTokenManagerTest.scala:61: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ApiVersionsRequestTest.scala:29: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `validateApiVersionsResponse`'s return type
  def validateApiVersionsResponse(apiVersionsResponse: ApiVersionsResponse) {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ApiVersionsRequestTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testApiVersionsRequest`'s return type
  def testApiVersionsRequest() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ApiVersionsRequestTest.scala:52: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testApiVersionsRequestWithUnsupportedVersion`'s return type
  def testApiVersionsRequestWithUnsupportedVersion() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BaseRequestTest.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `brokerPropertyOverrides`'s return type
  protected def brokerPropertyOverrides(properties: Properties) {}
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BaseRequestTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRequest`'s return type
  private def sendRequest(socket: Socket, request: Array[Byte]) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlRequestWithCorrectBrokerEpoch`'s return type
  def testControlRequestWithCorrectBrokerEpoch() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:100: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlRequestWithStaleBrokerEpoch`'s return type
  def testControlRequestWithStaleBrokerEpoch() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControlRequestWithBrokerEpoch`'s return type
  private def testControlRequestWithBrokerEpoch(isEpochInRequestStale: Boolean) {
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `callback`'s return type
  def callback (response: RequestChannel.Response) {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `beforeMethod`'s return type
  def beforeMethod() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `throttle`'s return type
                       channelThrottlingCallback: (RequestChannel.Response) => Unit) {
                                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaParsing`'s return type
  private def testQuotaParsing(config: ClientQuotaManagerConfig, client1: UserClient, client2: UserClient, randomClient: UserClient, defaultConfigClient: UserClient) {
                                                                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClientIdQuotaParsing`'s return type
  def testClientIdQuotaParsing() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:146: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserQuotaParsing`'s return type
  def testUserQuotaParsing() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserClientIdQuotaParsing`'s return type
  def testUserClientIdQuotaParsing() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:173: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserQuotaParsingWithDefaultClientIdQuota`'s return type
  def testUserQuotaParsingWithDefaultClientIdQuota() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:185: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserClientQuotaParsingIdWithDefaultClientIdQuota`'s return type
  def testUserClientQuotaParsingIdWithDefaultClientIdQuota() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaConfigPrecedence`'s return type
  def testQuotaConfigPrecedence() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:198: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkQuota`'s return type
    def checkQuota(user: String, clientId: String, expectedBound: Int, value: Int, expectThrottle: Boolean) {
                                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:267: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaViolation`'s return type
  def testQuotaViolation() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:315: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRequestPercentageQuotaViolation`'s return type
  def testRequestPercentageQuotaViolation() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:378: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExpireThrottleTimeSensor`'s return type
  def testExpireThrottleTimeSensor() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:398: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExpireQuotaSensors`'s return type
  def testExpireQuotaSensors() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ClientQuotaManagerTest.scala:422: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClientIdNotSanitized`'s return type
  def testClientIdNotSanitized() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestTest.scala:27: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidCreateTopicsRequests`'s return type
  def testValidCreateTopicsRequests() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testErrorCreateTopicsRequests`'s return type
  def testErrorCreateTopicsRequests() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestTest.scala:116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCreateTopicsRequests`'s return type
  def testInvalidCreateTopicsRequests() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestTest.scala:130: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNotController`'s return type
  def testNotController() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestWithPolicyTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidCreateTopicsRequests`'s return type
  def testValidCreateTopicsRequests() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestWithPolicyTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testErrorCreateTopicsRequests`'s return type
  def testErrorCreateTopicsRequests() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRequestSatisfaction`'s return type
  def testRequestSatisfaction() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRequestExpiry`'s return type
  def testRequestExpiry() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:81: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRequestPurge`'s return type
  def testRequestPurge() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:113: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldCancelForKeyReturningCancelledOperations`'s return type
  def shouldCancelForKeyReturningCancelledOperations() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist`'s return type
  def shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:219: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDelayedOperationLock`'s return type
  def testDelayedOperationLock() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:224: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDelayedOperationLockOverride`'s return type
  def testDelayedOperationLockOverride() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:235: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyDelayedOperationLock`'s return type
  def verifyDelayedOperationLock(mockDelayedOperation: => MockDelayedOperation, mismatchedLocks: Boolean) {
                                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:330: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `awaitExpiration`'s return type
    def awaitExpiration() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:343: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onExpiration`'s return type
    override def onExpiration() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelayedOperationTest.scala:347: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onComplete`'s return type
    override def onComplete() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidDeleteTopicRequests`'s return type
  def testValidDeleteTopicRequests() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:62: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testErrorDeleteTopicRequests`'s return type
  def testErrorDeleteTopicRequests() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:115: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNotController`'s return type
  def testNotController() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestWithDeletionDisabledTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteRecordsRequest`'s return type
  def testDeleteRecordsRequest() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyConfigUpdate`'s return type
  private def verifyConfigUpdate(name: String, value: Object, perBrokerConfig: Boolean, expectFailure: Boolean) {
                                                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConfigChange`'s return type
  def testConfigChange() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDynamicTopicConfigChange`'s return type
  def testDynamicTopicConfigChange() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaConfigChange`'s return type
  private def testQuotaConfigChange(user: String, clientId: String, rootEntityType: String, configEntityName: String) {
                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:132: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClientIdQuotaConfigChange`'s return type
  def testClientIdQuotaConfigChange() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:137: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserQuotaConfigChange`'s return type
  def testUserQuotaConfigChange() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:142: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserClientIdQuotaChange`'s return type
  def testUserClientIdQuotaChange() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultClientIdQuotaConfigChange`'s return type
  def testDefaultClientIdQuotaConfigChange() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:152: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultUserQuotaConfigChange`'s return type
  def testDefaultUserQuotaConfigChange() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:157: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultUserClientIdQuotaConfigChange`'s return type
  def testDefaultUserClientIdQuotaConfigChange() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testQuotaInitialization`'s return type
  def testQuotaInitialization() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:193: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConfigChangeOnNonExistingTopic`'s return type
  def testConfigChangeOnNonExistingTopic() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:305: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseRegardlessOfWhitespaceAroundValues`'s return type
  def shouldParseRegardlessOfWhitespaceAroundValues() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigTest.scala:29: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailWhenChangingClientIdUnknownConfig`'s return type
  def shouldFailWhenChangingClientIdUnknownConfig() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigTest.scala:34: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailWhenChangingUserUnknownConfig`'s return type
  def shouldFailWhenChangingUserUnknownConfig() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigTest.scala:39: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailLeaderConfigsWithInvalidValues`'s return type
  def shouldFailLeaderConfigsWithInvalidValues() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldFailFollowerConfigsWithInvalidValues`'s return type
  def shouldFailFollowerConfigsWithInvalidValues() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendRequest`'s return type
  private def sendRequest(socket: Socket, request: Array[Byte], id: Option[Short] = None) {
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:101: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyDisconnect`'s return type
  private def verifyDisconnect(request: Array[Byte]) {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceRequestWithNullClientId`'s return type
  def testProduceRequestWithNullClientId() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:146: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHeaderOnlyRequest`'s return type
  def testHeaderOnlyRequest() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:151: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidApiKeyRequest`'s return type
  def testInvalidApiKeyRequest() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:156: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidApiVersionRequest`'s return type
  def testInvalidApiVersionRequest() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:161: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMalformedHeaderRequest`'s return type
  def testMalformedHeaderRequest() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/HighwatermarkPersistenceTest.scala:51: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `teardown`'s return type
  def teardown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/HighwatermarkPersistenceTest.scala:57: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighWatermarkPersistenceSinglePartition`'s return type
  def testHighWatermarkPersistenceSinglePartition() {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/HighwatermarkPersistenceTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighWatermarkPersistenceMultiplePartitions`'s return type
  def testHighWatermarkPersistenceMultiplePartitions() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:75: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIsrExpirationForStuckFollowers`'s return type
  def testIsrExpirationForStuckFollowers() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:105: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIsrExpirationIfNoFetchRequestMade`'s return type
  def testIsrExpirationIfNoFetchRequestMade() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIsrExpirationForSlowFollowers`'s return type
  def testIsrExpirationForSlowFollowers() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/IsrExpirationTest.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIsrExpirationForCaughtUpFollowers`'s return type
  def testIsrExpirationForCaughtUpFollowers() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:86: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:551: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `rejectJoinGroupRequestWhenStaticMembershipNotSupported`'s return type
  def rejectJoinGroupRequestWhenStaticMembershipNotSupported() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:571: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `rejectSyncGroupRequestWhenStaticMembershipNotSupported`'s return type
  def rejectSyncGroupRequestWhenStaticMembershipNotSupported() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:590: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `rejectHeartbeatRequestWhenStaticMembershipNotSupported`'s return type
  def rejectHeartbeatRequestWhenStaticMembershipNotSupported() {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:609: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `rejectOffsetCommitRequestWhenStaticMembershipNotSupported`'s return type
  def rejectOffsetCommitRequestWhenStaticMembershipNotSupported() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:648: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultipleLeaveGroup`'s return type
  def testMultipleLeaveGroup() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:678: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSingleLeaveGroup`'s return type
  def testSingleLeaveGroup() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:38: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeHoursProvided`'s return type
  def testLogRetentionTimeHoursProvided() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeMinutesProvided`'s return type
  def testLogRetentionTimeMinutesProvided() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeMsProvided`'s return type
  def testLogRetentionTimeMsProvided() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeNoConfigProvided`'s return type
  def testLogRetentionTimeNoConfigProvided() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeBothMinutesAndHoursProvided`'s return type
  def testLogRetentionTimeBothMinutesAndHoursProvided() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionTimeBothMinutesAndMsProvided`'s return type
  def testLogRetentionTimeBothMinutesAndMsProvided() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:93: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRetentionUnlimited`'s return type
  def testLogRetentionUnlimited() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAdvertiseDefaults`'s return type
  def testAdvertiseDefaults() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:163: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAdvertiseConfigured`'s return type
  def testAdvertiseConfigured() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:180: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAdvertisePortDefault`'s return type
  def testAdvertisePortDefault() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAdvertiseHostNameDefault`'s return type
  def testAdvertiseHostNameDefault() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:214: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDuplicateListeners`'s return type
  def testDuplicateListeners() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:258: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBadListenerProtocol`'s return type
  def testBadListenerProtocol() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:357: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCaseInsensitiveListenerProtocol`'s return type
  def testCaseInsensitiveListenerProtocol() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:372: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testListenerDefaults`'s return type
  def testListenerDefaults() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:401: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testVersionConfiguration`'s return type
  def testVersionConfiguration() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:435: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUncleanLeaderElectionDefault`'s return type
  def testUncleanLeaderElectionDefault() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:443: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUncleanElectionDisabled`'s return type
  def testUncleanElectionDisabled() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:452: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUncleanElectionEnabled`'s return type
  def testUncleanElectionEnabled() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:461: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUncleanElectionInvalid`'s return type
  def testUncleanElectionInvalid() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:471: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRollTimeMsProvided`'s return type
  def testLogRollTimeMsProvided() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:480: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRollTimeBothMsAndHoursProvided`'s return type
  def testLogRollTimeBothMsAndHoursProvided() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:490: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLogRollTimeNoConfigProvided`'s return type
  def testLogRollTimeNoConfigProvided() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:498: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultCompressionType`'s return type
  def testDefaultCompressionType() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:506: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidCompressionType`'s return type
  def testValidCompressionType() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:515: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidCompressionType`'s return type
  def testInvalidCompressionType() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:524: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidInterBrokerSecurityProtocol`'s return type
  def testInvalidInterBrokerSecurityProtocol() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:534: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEqualAdvertisedListenersProtocol`'s return type
  def testEqualAdvertisedListenersProtocol() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:542: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidAdvertisedListenersProtocol`'s return type
  def testInvalidAdvertisedListenersProtocol() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:576: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFromPropsInvalid`'s return type
  def testFromPropsInvalid() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:816: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNonroutableAdvertisedListeners`'s return type
  def testNonroutableAdvertisedListeners() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:824: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMaxConnectionsPerIpProp`'s return type
  def testMaxConnectionsPerIpProp() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaConfigTest.scala:834: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertPropertyInvalid`'s return type
  private def assertPropertyInvalid(validRequiredProps: => Properties, name: String, values: Any*) {
                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterClusterIdTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `onUpdate`'s return type
    override def onUpdate(clusterMetadata: ClusterResource) {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterClusterIdTest.scala:83: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterClusterIdTest.scala:96: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClusterIdPresent`'s return type
  def testClusterIdPresent() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterClusterIdTest.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:57: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:65: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBothReportersAreInvoked`'s return type
  def testBothReportersAreInvoked() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `configure`'s return type
    def configure(configs: java.util.Map[String, _]) {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:94: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `init`'s return type
    def init(metrics: java.util.List[KafkaMetric]) {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:97: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `metricChange`'s return type
    def metricChange(metric: KafkaMetric) {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:103: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `metricRemoval`'s return type
    def metricRemoval(metric: KafkaMetric) {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `close`'s return type
    def close() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaMetricReporterExceptionHandlingTest.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `metricChange`'s return type
    override def metricChange(metric: KafkaMetric) {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaServerTest.scala:28: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAlreadyRegisteredAdvertisedListeners`'s return type
  def testAlreadyRegisteredAdvertisedListeners() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLeaderElectionWithStaleControllerEpoch`'s return type
  def testLeaderElectionWithStaleControllerEpoch() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:60: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIOExceptionDuringLogRoll`'s return type
  def testIOExceptionDuringLogRoll() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure`'s return type
  def brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIOExceptionDuringCheckpoint`'s return type
  def testIOExceptionDuringCheckpoint() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:100: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReplicaFetcherThreadAfterLogDirFailureOnFollower`'s return type
  def testReplicaFetcherThreadAfterLogDirFailureOnFollower() {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:130: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceAfterLogDirFailureOnLeader`'s return type
  def testProduceAfterLogDirFailureOnLeader(failureType: LogDirFailureType) {
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:203: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `subscribeAndWaitForAssignment`'s return type
  private def subscribeAndWaitForAssignment(topic: String, consumer: KafkaConsumer[Array[Byte], Array[Byte]]) {
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetOffsetsForUnknownTopic`'s return type
  def testGetOffsetsForUnknownTopic() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetOffsetsAfterDeleteRecords`'s return type
  def testGetOffsetsAfterDeleteRecords() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:98: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetOffsetsBeforeLatestTime`'s return type
  def testGetOffsetsBeforeLatestTime() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:133: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEmptyLogsGetOffsets`'s return type
  def testEmptyLogsGetOffsets() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:158: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetOffsetsBeforeNow`'s return type
  def testGetOffsetsBeforeNow() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:188: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetOffsetsBeforeEarliestTime`'s return type
  def testGetOffsetsBeforeEarliestTime() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:217: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchOffsetsBeforeWithChangingSegmentSize`'s return type
  def testFetchOffsetsBeforeWithChangingSegmentSize() {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:234: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchOffsetsBeforeWithChangingSegments`'s return type
  def testFetchOffsetsBeforeWithChangingSegments() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:38: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getTopicMetadataNonExistingTopics`'s return type
  def getTopicMetadataNonExistingTopics() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getTopicMetadata`'s return type
  def getTopicMetadata() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:191: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getTopicMetadataReplicaNotAvailable`'s return type
  def getTopicMetadataReplicaNotAvailable() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getTopicMetadataIsrNotAvailable`'s return type
  def getTopicMetadataIsrNotAvailable() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:311: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getTopicMetadataWithNonSupportedSecurityProtocol`'s return type
  def getTopicMetadataWithNonSupportedSecurityProtocol() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:336: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `getAliveBrokersShouldNotBeMutatedByUpdateCache`'s return type
  def getAliveBrokersShouldNotBeMutatedByUpdateCache() {
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:340: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `updateCache`'s return type
    def updateCache(brokerIds: Set[Int]) {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:38: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `brokerPropertyOverrides`'s return type
  override def brokerPropertyOverrides(properties: Properties) {
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClusterIdWithRequestVersion1`'s return type
  def testClusterIdWithRequestVersion1() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClusterIdIsValid`'s return type
  def testClusterIdIsValid() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:62: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testControllerId`'s return type
  def testControllerId() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:84: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRack`'s return type
  def testRack() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:93: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIsInternal`'s return type
  def testIsInternal() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNoTopicsRequest`'s return type
  def testNoTopicsRequest() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:200: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAllTopicsRequest`'s return type
  def testAllTopicsRequest() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:253: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReplicaDownResponse`'s return type
  def testReplicaDownResponse() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSimpleProduceRequest`'s return type
  def testSimpleProduceRequest() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testProduceToNonReplica`'s return type
  def testProduceToNonReplica() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:99: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCorruptLz4ProduceRequest`'s return type
  def testCorruptLz4ProduceRequest() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetchTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetchTest.scala:43: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetchTest.scala:49: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReplicaFetcherThread`'s return type
  def testReplicaFetcherThread() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:85: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighWaterMarkDirectoryMapping`'s return type
  def testHighWaterMarkDirectoryMapping() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testHighwaterMarkRelativeDirectoryMapping`'s return type
  def testHighwaterMarkRelativeDirectoryMapping() {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:124: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testIllegalRequiredAcks`'s return type
  def testIllegalRequiredAcks() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:151: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClearPurgatoryOnBecomingFollower`'s return type
  def testClearPurgatoryOnBecomingFollower() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:417: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchBeyondHighWatermarkReturnEmptyResponse`'s return type
  def testFetchBeyondHighWatermarkReturnEmptyResponse() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:555: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testFetchMessagesWhenNotFollowerForOnePartition`'s return type
  def testFetchMessagesWhenNotFollowerForOnePartition() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:640: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate`'s return type
  def testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate() {
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:97: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:141: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResponseThrottleTime`'s return type
  def testResponseThrottleTime() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:149: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated`'s return type
  def testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated() {
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:156: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated`'s return type
  def testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated() {
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:163: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnthrottledClient`'s return type
  def testUnthrottledClient() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:171: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testExemptRequestTime`'s return type
  def testExemptRequestTime() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:179: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUnauthorizedThrottle`'s return type
  def testUnauthorizedThrottle() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:514: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `submitTest`'s return type
  private def submitTest(apiKey: ApiKeys, test: () => Unit) {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:516: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `run`'s return type
      def run() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:523: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `waitAndCheckResults`'s return type
  private def waitAndCheckResults() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:589: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkRequestThrottleTime`'s return type
  private def checkRequestThrottleTime(apiKey: ApiKeys) {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:604: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkSmallQuotaProducerRequestThrottleTime`'s return type
  private def checkSmallQuotaProducerRequestThrottleTime(apiKey: ApiKeys) {
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:617: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkSmallQuotaConsumerRequestThrottleTime`'s return type
  private def checkSmallQuotaConsumerRequestThrottleTime(apiKey: ApiKeys) {
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:630: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkUnthrottledClient`'s return type
  private def checkUnthrottledClient(apiKey: ApiKeys) {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:639: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkExemptRequestMetric`'s return type
  private def checkExemptRequestMetric(apiKey: ApiKeys) {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:649: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkUnauthorizedRequestThrottle`'s return type
  private def checkUnauthorizedRequestThrottle(apiKey: ApiKeys) {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SaslApiVersionsRequestTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testApiVersionsRequestBeforeSaslHandshakeRequest`'s return type
  def testApiVersionsRequestBeforeSaslHandshakeRequest() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SaslApiVersionsRequestTest.scala:66: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testApiVersionsRequestAfterSaslHandshakeRequest`'s return type
  def testApiVersionsRequestAfterSaslHandshakeRequest() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SaslApiVersionsRequestTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testApiVersionsRequestWithUnsupportedVersion`'s return type
  def testApiVersionsRequestWithUnsupportedVersion() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SaslApiVersionsRequestTest.scala:98: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendSaslHandshakeRequestValidateResponse`'s return type
  private def sendSaslHandshakeRequestValidateResponse(socket: Socket) {
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:41: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoGenerateBrokerId`'s return type
  def testAutoGenerateBrokerId() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUserConfigAndGeneratedBrokerId`'s return type
  def testUserConfigAndGeneratedBrokerId() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDisableGeneratedBrokerId`'s return type
  def testDisableGeneratedBrokerId() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:106: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMultipleLogDirsMetaProps`'s return type
  def testMultipleLogDirsMetaProps() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:130: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsistentBrokerIdFromUserConfigAndMetaProps`'s return type
  def testConsistentBrokerIdFromUserConfigAndMetaProps() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateBrokerIdTest.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerMetadataOnIdCollision`'s return type
  def testBrokerMetadataOnIdCollision() {
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:43: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoGenerateClusterId`'s return type
  def testAutoGenerateClusterId() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:84: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoGenerateClusterIdForKafkaClusterSequential`'s return type
  def testAutoGenerateClusterIdForKafkaClusterSequential() {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerGenerateClusterIdTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAutoGenerateClusterIdForKafkaClusterParallel`'s return type
  def testAutoGenerateClusterIdForKafkaClusterParallel() {
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:61: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanShutdown`'s return type
  def testCleanShutdown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:125: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanShutdownWithDeleteTopicEnabled`'s return type
  def testCleanShutdownWithDeleteTopicEnabled() {
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:138: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanShutdownAfterFailedStartup`'s return type
  def testCleanShutdownAfterFailedStartup() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:147: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCleanShutdownAfterFailedStartupDueToCorruptLogs`'s return type
  def testCleanShutdownAfterFailedStartupDueToCorruptLogs() {
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:160: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyCleanShutdownAfterFailedStartup`'s return type
  private def verifyCleanShutdownAfterFailedStartup[E <: Exception](config: KafkaConfig)(implicit exceptionClassTag: ClassTag[E]) {
                                                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:187: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyNonDaemonThreadsStatus`'s return type
  def verifyNonDaemonThreadsStatus() {
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:194: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConsecutiveShutdown`'s return type
  def testConsecutiveShutdown(){
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerStartupTest.scala:33: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SimpleFetchTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SimpleFetchTest.scala:146: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/SimpleFetchTest.scala:168: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadFromLog`'s return type
  def testReadFromLog() {
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ThrottledChannelExpirationTest.scala:71: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `beforeMethod`'s return type
  def beforeMethod() {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ThrottledChannelExpirationTest.scala:77: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCallbackInvocationAfterExpiration`'s return type
  def testCallbackInvocationAfterExpiration() {
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ThrottledChannelExpirationTest.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testThrottledChannelDelay`'s return type
  def testThrottledChannelDelay() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/EpochDrivenReplicationProtocolAcceptanceTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/EpochDrivenReplicationProtocolAcceptanceTest.scala:68: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochFileCacheTest.scala:123: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReturnUnsupportedIfNoEpochRecorded`'s return type
  def shouldReturnUnsupportedIfNoEpochRecorded(){
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochFileCacheTest.scala:129: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested`'s return type
  def shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested(){
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochFileCacheTest.scala:141: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch`'s return type
  def shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch(){
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochFileCacheTest.scala:182: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested`'s return type
  def shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested(){
                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochFileCacheTest.scala:229: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldPersistEpochsBetweenInstances`'s return type
  def shouldPersistEpochsBetweenInstances(){
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:63: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader`'s return type
  def shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader() {
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/util/ReplicaFetcherMockBlockingSend.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setEpochRequestCallback`'s return type
  def setEpochRequestCallback(postEpochFunction: () => Unit){
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldResetUnConsumedOffsetsBeforeExit`'s return type
  def shouldResetUnConsumedOffsetsBeforeExit() {
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:78: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldLimitReadsToMaxMessageLimit`'s return type
  def shouldLimitReadsToMaxMessageLimit() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:95: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldStopWhenOutputCheckErrorFails`'s return type
  def shouldStopWhenOutputCheckErrorFails() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:116: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidConsumerValidConfig`'s return type
  def shouldParseValidConsumerValidConfig() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:173: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidSimpleConsumerValidConfigWithStringOffset`'s return type
  def shouldParseValidSimpleConsumerValidConfigWithStringOffset() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:195: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidConsumerConfigWithAutoOffsetResetLatest`'s return type
  def shouldParseValidConsumerConfigWithAutoOffsetResetLatest() {
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:214: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidConsumerConfigWithAutoOffsetResetEarliest`'s return type
  def shouldParseValidConsumerConfigWithAutoOffsetResetEarliest() {
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:233: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning`'s return type
  def shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning() {
                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:253: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseValidConsumerConfigWithNoOffsetReset`'s return type
  def shouldParseValidConsumerConfigWithNoOffsetReset() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:271: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning`'s return type
  def shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning() {
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:290: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseConfigsFromFile`'s return type
  def shouldParseConfigsFromFile() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:309: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `groupIdsProvidedInDifferentPlacesMustMatch`'s return type
  def groupIdsProvidedInDifferentPlacesMustMatch() {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:436: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldParseGroupIdFromBeginningGivenTogether`'s return type
  def shouldParseGroupIdFromBeginningGivenTogether() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:465: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldExitOnGroupIdAndPartitionGivenTogether`'s return type
  def shouldExitOnGroupIdAndPartitionGivenTogether() {
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:483: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldExitOnOffsetWithoutPartition`'s return type
  def shouldExitOnOffsetWithoutPartition() {
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleProducerTest.scala:47: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testValidConfigs`'s return type
  def testValidConfigs() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleProducerTest.scala:55: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInvalidConfigs`'s return type
  def testInvalidConfigs() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:29: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultMirrorMakerMessageHandler`'s return type
  def testDefaultMirrorMakerMessageHandler() {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage`'s return type
  def testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage() {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:61: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDefaultMirrorMakerMessageHandlerWithHeaders`'s return type
  def testDefaultMirrorMakerMessageHandlerWithHeaders() {
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:30: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseEmptyArg`'s return type
  def testParseEmptyArg() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseEmptyArgWithNoDelimiter`'s return type
  def testParseEmptyArgWithNoDelimiter() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseEmptyArgAsValid`'s return type
  def testParseEmptyArgAsValid() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:53: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseSingleArg`'s return type
  def testParseSingleArg() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:61: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseArgs`'s return type
  def testParseArgs() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CommandLineUtilsTest.scala:70: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testParseArgsWithMultipleDelimiters`'s return type
  def testParseArgsWithMultipleDelimiters() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSwallow`'s return type
  def testSwallow() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:99: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCircularIterator`'s return type
  def testCircularIterator() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:118: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadBytes`'s return type
  def testReadBytes() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:126: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAbs`'s return type
  def testAbs() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:135: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReplaceSuffix`'s return type
  def testReplaceSuffix() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:143: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReadInt`'s return type
  def testReadInt() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:153: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCsvList`'s return type
  def testCsvList() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:166: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCsvMap`'s return type
  def testCsvMap() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:201: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testInLock`'s return type
  def testInLock() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:212: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUrlSafeBase64EncodeUUID`'s return type
  def testUrlSafeBase64EncodeUUID() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:230: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGenerateUuidAsBase64`'s return type
  def testGenerateUuidAsBase64() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JaasTestUtils.scala:273: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeToFile`'s return type
  private def writeToFile(file: File, jaasSections: Seq[JaasSection]) {
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:40: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testJsonParse`'s return type
  def testJsonParse() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:69: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testLegacyEncodeAsString`'s return type
  def testLegacyEncodeAsString() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:91: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEncodeAsString`'s return type
  def testEncodeAsString() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:114: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEncodeAsBytes`'s return type
  def testEncodeAsBytes() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockScheduler.scala:44: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `startup`'s return type
  def startup() {}
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockScheduler.scala:46: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdown`'s return type
  def shutdown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockScheduler.scala:58: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tick`'s return type
  def tick() {
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockScheduler.scala:110: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `get`'s return type
  def get() {
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockScheduler.scala:113: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `get`'s return type
  def get(timeout: Long, unit: TimeUnit){
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/MockTime.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sleep`'s return type
  override def sleep(ms: Long) {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/ReplicationUtilsTest.scala:40: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/ReplicationUtilsTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testUpdateLeaderAndIsr`'s return type
  def testUpdateLeaderAndIsr() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:35: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setup`'s return type
  def setup() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:40: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `teardown`'s return type
  def teardown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:45: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMockSchedulerNonPeriodicTask`'s return type
  def testMockSchedulerNonPeriodicTask() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:59: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMockSchedulerPeriodicTask`'s return type
  def testMockSchedulerPeriodicTask() {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:73: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testReentrantTaskInMockScheduler`'s return type
  def testReentrantTaskInMockScheduler() {
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:80: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testNonPeriodicTask`'s return type
  def testNonPeriodicTask() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:90: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPeriodicTask`'s return type
  def testPeriodicTask() {
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/SchedulerTest.scala:98: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testRestart`'s return type
  def testRestart() {
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:210: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shutdownServers`'s return type
  def shutdownServers(servers: Seq[KafkaServer]) {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:447: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEquals`'s return type
  def checkEquals(b1: ByteBuffer, b2: ByteBuffer) {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:457: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEquals`'s return type
  def checkEquals[T](expected: Iterator[T], actual: Iterator[T]) {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:489: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkLength`'s return type
  def checkLength[T](s1: Iterator[T], expectedLength:Int) {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:502: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkEquals`'s return type
  def checkEquals[T](s1: java.util.Iterator[T], s2: java.util.Iterator[T]) {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:675: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `makeLeaderForPartition`'s return type
                             controllerEpoch: Int) {
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:746: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `retry`'s return type
  def retry(maxWaitMs: Long)(block: => Unit) {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:965: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `writeNonsenseToFile`'s return type
  def writeNonsenseToFile(fileName: File, position: Long, size: Int) {
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:973: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `appendNonsenseToFile`'s return type
  def appendNonsenseToFile(file: File, size: Int) {
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:981: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkForPhantomInSyncReplicas`'s return type
  def checkForPhantomInSyncReplicas(zkClient: KafkaZkClient, topic: String, partitionToBeReassigned: Int, assignedReplicas: Seq[Int]) {
                                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:990: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `ensureNoUnderReplicatedPartitions`'s return type
                                                servers: Seq[KafkaServer]) {
                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1010: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyNonDaemonThreadsStatus`'s return type
  def verifyNonDaemonThreadsStatus(threadNamePrefix: String) {
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1074: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `produceMessage`'s return type
                     deliveryTimeoutMs: Int = 30 * 1000, requestTimeoutMs: Int = 20 * 1000) {
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1084: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyTopicDeletion`'s return type
  def verifyTopicDeletion(zkClient: KafkaZkClient, topic: String, numPartitions: Int, servers: Seq[KafkaServer]) {
                                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1162: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkClientTrusted`'s return type
      override def checkClientTrusted(certs: Array[X509Certificate], authType: String) {
                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1164: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkServerTrusted`'s return type
      override def checkServerTrusted(certs: Array[X509Certificate], authType: String) {
                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1216: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifySecureZkAcls`'s return type
  def verifySecureZkAcls(zkClient: KafkaZkClient, usersWithAccess: Int) {
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1234: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyUnsecureZkAcls`'s return type
  def verifyUnsecureZkAcls(zkClient: KafkaZkClient) {
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1249: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `assertConcurrent`'s return type
  def assertConcurrent(message: String, functions: Seq[() => Any], timeoutMs: Int) {
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1251: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `failWithTimeout`'s return type
    def failWithTimeout() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/ThrottlerTest.scala:28: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testThrottleDesiredRate`'s return type
  def testThrottleDesiredRate() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TopicFilterTest.scala:27: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testWhitelists`'s return type
  def testWhitelists() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/timer/MockTimer.scala:28: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `add`'s return type
  def add(timerTask: TimerTask) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/timer/TimerTaskListTest.scala:36: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAll`'s return type
  def testAll() {
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/timer/TimerTest.scala:42: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setup`'s return type
  def setup() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:54: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testManualReplicaAssignment`'s return type
  def testManualReplicaAssignment() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:94: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicCreationInZK`'s return type
  def testTopicCreationInZK() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:142: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicCreationWithCollision`'s return type
  def testTopicCreationWithCollision() {
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:156: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testMockedConcurrentTopicCreation`'s return type
  def testMockedConcurrentTopicCreation() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:172: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConcurrentTopicCreation`'s return type
  def testConcurrentTopicCreation() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:198: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicConfigChange`'s return type
  def testTopicConfigChange() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:213: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkConfig`'s return type
    def checkConfig(messageSize: Int, retentionMs: Long, throttledLeaders: String, throttledFollowers: String, quotaManagerIsThrottled: Boolean) {
                                                                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:271: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `shouldPropagateDynamicBrokerConfigs`'s return type
  def shouldPropagateDynamicBrokerConfigs() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:275: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkConfig`'s return type
    def checkConfig(limit: Long) {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:316: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBootstrapClientIdConfig`'s return type
  def testBootstrapClientIdConfig() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:337: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetBrokerMetadatas`'s return type
  def testGetBrokerMetadatas() {
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:89: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSetAndGetConsumerOffset`'s return type
  def testSetAndGetConsumerOffset() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:102: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetConsumerOffsetNoData`'s return type
  def testGetConsumerOffsetNoData() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:108: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteRecursive`'s return type
  def testDeleteRecursive() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:136: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateRecursive`'s return type
  def testCreateRecursive() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:148: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testTopicAssignmentMethods`'s return type
  def testTopicAssignmentMethods() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:197: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetDataAndVersion`'s return type
  def testGetDataAndVersion() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:221: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testConditionalUpdatePath`'s return type
  def testConditionalUpdatePath() {
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:392: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testSetGetAndDeletePartitionReassignment`'s return type
  def testSetGetAndDeletePartitionReassignment() {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:422: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetDataAndStat`'s return type
  def testGetDataAndStat() {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:446: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testGetChildren`'s return type
  def testGetChildren() {
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:464: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testAclManagementMethods`'s return type
  def testAclManagementMethods() {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:568: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDeleteTopicPathMethods`'s return type
  def testDeleteTopicPathMethods() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:602: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEntityConfigManagementMethods`'s return type
  def testEntityConfigManagementMethods() {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1060: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testClusterIdMethods`'s return type
  def testClusterIdMethods() {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1068: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testBrokerSequenceIdMethods`'s return type
  def testBrokerSequenceIdMethods() {
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1074: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testCreateTopLevelPaths`'s return type
  def testCreateTopLevelPaths() {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1081: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testPreferredReplicaElectionMethods`'s return type
  def testPreferredReplicaElectionMethods() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1108: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDelegationTokenMethods`'s return type
  def testDelegationTokenMethods() {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:37: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testEncode`'s return type
  def testEncode() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:43: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDecodeInvalidJson`'s return type
  def testDecodeInvalidJson() {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:50: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testDecodeValidJson`'s return type
  def testDecodeValidJson() {
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZkFourLetterWords.scala:31: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `sendStat`'s return type
  def sendStat(host: String, port: Int, timeout: Int) {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:56: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  def setUp() {
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:64: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  def tearDown() {
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:104: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUpClass`'s return type
  def setUpClass() {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:112: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDownClass`'s return type
  def tearDownClass() {
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:120: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `verifyNoUnexpectedThreads`'s return type
  def verifyNoUnexpectedThreads(context: String) {
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:48: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `setUp`'s return type
  override def setUp() {
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:57: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `tearDown`'s return type
  override def tearDown() {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:617: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `testZooKeeperStateChangeRateMetrics`'s return type
  def testZooKeeperStateChangeRateMetrics() {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:618: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `checkMeterCount`'s return type
    def checkMeterCount(name: String, expected: Long) {
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:656: procedure syntax is deprecated: instead, add `: Unit =` to explicitly declare `cleanMetricsRegistry`'s return type
  private def cleanMetricsRegistry() {
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:395: value DEFAULT_TIMESTAMP in class OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
                  .setCommitTimestamp(OffsetCommitRequest.DEFAULT_TIMESTAMP)
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1074: a pure expression does nothing in statement position
    TestUtils.retry(JTestUtils.DEFAULT_MAX_WAIT_MS)(() => {
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:24: Unused import
import org.apache.kafka.clients.admin.{Admin, AdminClient, AdminClientConfig}
                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:21: Unused import
import org.apache.kafka.clients.admin.{Admin, AdminClient, AdminClientConfig}
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:281: local val node in method testEntityDefaultOptionWithDescribeBrokerLoggerIsNotAllowed is never used
    val node = new Node(1, "localhost", 9092)
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:293: local val node in method testEntityDefaultOptionWithAlterBrokerLoggerIsNotAllowed is never used
    val node = new Node(1, "localhost", 9092)
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:29: Unused import
import org.apache.kafka.clients.admin.{Admin, AdminClient, AdminClientConfig}
                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertTrue(polledRecords.asScala.size <= maxPollRecords)
                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:153: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records ++= polledRecords.asScala
                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        case Some(offsets) => consumer.commitAsync(offsets.asJava, callback)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        partitionAssignment = collection.immutable.Set(consumer.assignment().asScala.toArray: _*)
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:350: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.subscribe(topicsToSubscribe.asJava, rebalanceListener)
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:352: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(partitionAssignment.asJava)
                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:391: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        consumer.subscribe(topicsSubscription.asJava, rebalanceListener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:425: method /: in trait IterableOnceOps is deprecated (since 2.13.0): Use foldLeft instead of /:
    val totalPartitionsInAssignments = (0 /: assignments) (_ + _.size)
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:435: method /: in trait IterableOnceOps is deprecated (since 2.13.0): Use foldLeft instead of /:
    val uniqueAssignedPartitions = (Set[TopicPartition]() /: assignments) (_ ++ _)
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:151: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val nodes = client.describeCluster().nodes().get().asScala
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new NewTopic("mytopic", Map((0: Integer) -> Seq[Integer](1, 2).asJava, (1: Integer) -> Seq[Integer](2, 0).asJava).asJava),
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new NewTopic("mytopic", Map((0: Integer) -> Seq[Integer](1, 2).asJava, (1: Integer) -> Seq[Integer](2, 0).asJava).asJava),
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new NewTopic("mytopic", Map((0: Integer) -> Seq[Integer](1, 2).asJava, (1: Integer) -> Seq[Integer](2, 0).asJava).asJava),
                                                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:166: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createTopics(newTopics.asJava, new CreateTopicsOptions().validateOnly(true)).all.get()
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:169: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createTopics(newTopics.asJava).all.get()
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createTopics(newTopics.asJava).values()
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:180: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicToDescription = client.describeTopics(topics.asJava).all.get()
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:181: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(topics.toSet, topicToDescription.keySet.asScala)
                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(1, 2), topic0Partition0.isr.asScala.map(_.id))
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:191: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(1, 2), topic0Partition0.replicas.asScala.map(_.id))
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:195: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(2, 0), topic0Partition1.isr.asScala.map(_.id))
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:196: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(2, 0), topic0Partition1.replicas.asScala.map(_.id))
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:206: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partition.replicas.asScala.foreach { replica =>
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:210: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals("No duplicate replica ids", partition.replicas.size, partition.replicas.asScala.map(_.id).distinct.size)
                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:222: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.deleteTopics(topics.asJava).all.get()
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createTopics(newTopics.asJava).all.get()
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:237: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicDesc = client.describeTopics(topics.asJava).all.get()
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:238: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(topics.toSet, topicDesc.keySet.asScala)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:247: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set().asJava, result.authorizedOperations().get())
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:251: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var expectedOperations = configuredClusterPermissions.asJava
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createTopics(newTopics.asJava).all.get()
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:260: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicResult = client.describeTopics(Seq(topic).asJava).values
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set().asJava, topicResult.get(topic).get().authorizedOperations())
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicResult = client.describeTopics(Seq(topic).asJava,
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:267: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .map(operation => operation.toJava).asJava
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:283: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createTopics(Seq(existingTopic).map(new NewTopic(_, 1, 1.toShort)).asJava).all.get()
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:287: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.describeTopics(Seq(nonExistingTopic, existingTopic).asJava).values
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:305: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (node <- nodes.asScala) {
                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:316: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val partitionsByBroker = leaderByPartition.groupBy { case (partitionId, leaderId) => leaderId }.mapValues(_.keys.toSeq)
                                                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val logDirInfosByBroker = client.describeLogDirs(brokers.asJava).all.get
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:324: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      val replicaInfos = logDirInfos.asScala.flatMap { case (logDir, logDirInfo) => logDirInfo.replicaInfos.asScala }.filterKeys(_.topic == topic)
                                                                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:324: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val replicaInfos = logDirInfos.asScala.flatMap { case (logDir, logDirInfo) => logDirInfo.replicaInfos.asScala }.filterKeys(_.topic == topic)
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:324: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val replicaInfos = logDirInfos.asScala.flatMap { case (logDir, logDirInfo) => logDirInfo.replicaInfos.asScala }.filterKeys(_.topic == topic)
                                                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:327: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      logDirInfos.asScala.foreach { case (logDir, logDirInfo) =>
      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:328: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        logDirInfo.replicaInfos.asScala.keys.foreach(tp =>
                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:344: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicaDirInfos = client.describeReplicaLogDirs(replicas.asJavaCollection).all.get
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:345: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    replicaDirInfos.asScala.foreach { case (topicPartitionReplica, replicaDirInfo) =>
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:371: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new AlterReplicaLogDirsOptions).values.asScala.values
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:370: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val futures = client.alterReplicaLogDirs(firstReplicaAssignment.asJava,
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.alterReplicaLogDirs(secondReplicaAssignment.asJava, new AlterReplicaLogDirsOptions).all.get
                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:417: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      client.alterReplicaLogDirs(firstReplicaAssignment.asJava, new AlterReplicaLogDirsOptions).all.get
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:460: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeResult = client.describeConfigs(configResources.asJava)
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:523: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(1, client.describeTopics(Set(topic1).asJava).values.get(topic1).get.partitions.size)
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:524: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(1, client.describeTopics(Set(topic2).asJava).values.get(topic2).get.partitions.size)
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:530: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      client.describeTopics(Set(topic).asJava).values.get(topic).get.partitions
                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:536: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.createPartitions(Map(topic1 ->
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:542: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.createPartitions(Map(topic1 ->
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:549: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.createPartitions(Map(topic2 ->
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:555: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.createPartitions(Map(topic2 ->
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:560: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(0, 1), actualPartitions2.get(1).replicas.asScala.map(_.id).toList)
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:561: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(1, 2), actualPartitions2.get(2).replicas.asScala.map(_.id).toList)
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:568: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:581: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic2 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:594: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic2 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:606: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic2 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:607: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        NewPartitions.increaseTo(3, newPartition2Assignments.asScala.reverse.toList.asJava)).asJava, option)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:607: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        NewPartitions.increaseTo(3, newPartition2Assignments.asScala.reverse.toList.asJava)).asJava, option)
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:619: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(unknownTopic ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:631: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:645: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:660: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:673: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:686: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:700: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:714: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:727: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterResult = client.createPartitions(Map(topic1 ->
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:741: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.createPartitions(Map(
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:760: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.createPartitions(Map(topic1 ->
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:786: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(5L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:796: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(DeleteRecordsRequest.HIGH_WATERMARK)).asJava).all.get
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:812: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(5L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:827: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(0L)).asJava)
                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:853: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(3L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:887: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(3L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:902: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result1 = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(117L)).asJava)
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:917: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(3L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:930: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.alterReplicaLogDirs(Map(futureReplica -> futureLogDir).asJava).all.get
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:951: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(0L, consumer.offsetsForTimes(Map(topicPartition -> JLong.valueOf(0L)).asJava).get(topicPartition).offset())
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:953: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(5L)).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:955: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(5L, consumer.offsetsForTimes(Map(topicPartition -> JLong.valueOf(0L)).asJava).get(topicPartition).offset())
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:957: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    result = client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(DeleteRecordsRequest.HIGH_WATERMARK)).asJava)
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:959: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertNull(consumer.offsetsForTimes(Map(topicPartition -> JLong.valueOf(0L)).asJava).get(topicPartition))
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:974: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(3L)).asJava).all.get
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:979: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(8L)).asJava).all.get
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:995: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(5L, client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(5L)).asJava)
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1000: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      client.deleteRecords(Map(topicPartition -> RecordsToDelete.beforeOffset(20L)).asJava).lowWatermarks.get(topicPartition).get
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1007: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      client.deleteRecords(Map(nonExistPartition -> RecordsToDelete.beforeOffset(20L)).asJava).lowWatermarks.get(nonExistPartition).get
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1081: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future = client.createTopics(newTopics.asJava, new CreateTopicsOptions().validateOnly(true)).all()
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1083: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future2 = client.createTopics(newTopics.asJava, new CreateTopicsOptions().validateOnly(true)).all()
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future = client.createTopics(Seq("mytopic", "mytopic2").map(new NewTopic(_, 1, 1.toShort)).asJava,
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1117: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future = client.createTopics(Seq("mytopic", "mytopic2").map(new NewTopic(_, 1, 1.toShort)).asJava,
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future = client.createTopics(Seq("mytopic", "mytopic2").map(new NewTopic(_, 1, 1.toShort)).asJava,
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1136: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val future2 = client.createTopics(Seq("mytopic3", "mytopic4").map(new NewTopic(_, 1, 1.toShort)).asJava,
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1198: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            val matching = client.listConsumerGroups.all.get().asScala.filter(_.groupId == testGroupId)
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1202: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val result = client.describeConsumerGroups(Seq(testGroupId, fakeGroupId).asJava,
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1217: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(testNumPartitions, topicPartitions.asScala.
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1220: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            .map(operation => operation.toJava).asJava
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1244: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val deleteResult = client.deleteConsumerGroups(Seq(testGroupId, fakeGroupId).asJava)
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1314: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var electResult = client.electLeaders(ElectionType.PREFERRED, Set(partition1).asJava)
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1330: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    electResult = client.electLeaders(ElectionType.PREFERRED, Set(partition1).asJava)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1331: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(partition1).asJava, electResult.partitions.get.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(partition2), electResult.partitions.get.keySet.asScala)
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1347: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    electResult = client.electLeaders(ElectionType.PREFERRED, Set(unknownPartition).asJava)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(unknownPartition).asJava, electResult.partitions.get.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1359: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    electResult = client.electLeaders(ElectionType.PREFERRED, Set(unknownPartition, partition1).asJava)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1360: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(unknownPartition, partition1).asJava, electResult.partitions.get.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1368: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    electResult = client.electLeaders(ElectionType.PREFERRED, Set(partition2).asJava)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1369: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(partition2).asJava, electResult.partitions.get.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1381: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    electResult = client.electLeaders(ElectionType.PREFERRED, Set(partition1).asJava, shortTimeout)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1382: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(partition1).asJava, electResult.partitions.get.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1426: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(partition1).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1462: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(partition1, partition2).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1530: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(unknownPartition, unknownTopic).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1561: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(partition1).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1590: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(partition1).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1626: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val electResult = client.electLeaders(ElectionType.UNCLEAN, Set(partition1, partition2).asJava)
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1650: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topic1AlterConfigs = Seq(
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1656: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topic2AlterConfigs = Seq(
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1661: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.incrementalAlterConfigs(Map(
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1666: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic1Resource, topic2Resource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1670: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var describeResult = client.describeConfigs(Seq(topic1Resource, topic2Resource).asJava)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1683: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic1AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1687: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
   alterResult = client.incrementalAlterConfigs(Map(
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1693: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeResult = client.describeConfigs(Seq(topic1Resource).asJava)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1700: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic1AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1704: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.incrementalAlterConfigs(Map(
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1710: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeResult = client.describeConfigs(Seq(topic1Resource).asJava)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1716: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic1AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1720: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.incrementalAlterConfigs(Map(
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1742: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topic1AlterConfigs = Seq(
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1749: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topic2AlterConfigs = Seq(
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1753: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.incrementalAlterConfigs(Map(
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1757: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic1Resource, topic2Resource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1767: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeResult = client.describeConfigs(Seq(topic1Resource, topic2Resource).asJava)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1776: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic1AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1780: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic2AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1784: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.incrementalAlterConfigs(Map(
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1788: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic1Resource, topic2Resource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1798: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topic1AlterConfigs = Seq(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1802: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.incrementalAlterConfigs(Map(
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1805: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic1Resource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1818: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createTopics(newTopics2.asJava).values()
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1824: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(new TopicPartitionReplica(longTopicName, 0, 0) -> servers(0).config.logDirs(0)).asJava).all(),
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1855: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterRootLoggerEntry = Seq(
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1877: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterZKLoggerEntry = Seq(
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1885: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterLogLevelsEntries = Seq(
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1912: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterRootLoggerEntry = Seq(
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1921: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterControllerLoggerEntry = Seq(
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1930: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val deleteControllerLoggerEntry = Seq(
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1939: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val newAlterRootLoggerEntry = Seq(
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1951: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val deleteRootLoggerEntry = Seq(
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1970: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val appendLogLevelEntries = Seq(
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1977: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val subtractLogLevelEntries = Seq(
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1984: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val invalidLogLevelLogLevelEntries = Seq(
                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:1991: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val invalidLoggerNameLogLevelEntries = Seq(
                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2006: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterLogLevelsEntries = Seq(
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2009: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    val alterResult = client.alterConfigs(Map(brokerLoggerConfigResource -> new Config(alterLogLevelsEntries)).asJava)
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2009: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val alterResult = client.alterConfigs(Map(brokerLoggerConfigResource -> new Config(alterLogLevelsEntries)).asJava)
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2015: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (entry <- entries.asScala)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2019: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.incrementalAlterConfigs(Map(brokerLoggerConfigResource -> entries).asJava, new AlterConfigsOptions().validateOnly(validateOnly))
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2032: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val validLoggers = describeBrokerLoggers().entries().asScala.filterNot(_.name().equals(Log4jController.ROOT_LOGGER)).map(_.name).toSet
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2035: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .map { logger => new AlterConfigOp(new ConfigEntry(logger, ""), AlterConfigOp.OpType.DELETE) }
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2039: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      alterBrokerLoggers(List(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2053: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicConfigEntries1 = Seq(
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2057: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicConfigEntries2 = Seq(
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2062: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2062: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.alterConfigs(Map(
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2067: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2071: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var describeResult = client.describeConfigs(Seq(topicResource1, topicResource2).asJava)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2086: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicConfigEntries1 = Seq(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2090: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicConfigEntries2 = Seq(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2094: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2094: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.alterConfigs(Map(
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2099: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeResult = client.describeConfigs(Seq(topicResource1, topicResource2).asJava)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicConfigEntries1 = Seq(
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicConfigEntries2 = Seq(new ConfigEntry(LogConfig.CompressionTypeProp, "snappy")).asJava
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokerConfigEntries = Seq(new ConfigEntry(KafkaConfig.ZkConnectProp, "localhost:2181")).asJava
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2134: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2134: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.alterConfigs(Map(
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2, brokerResource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var describeResult = client.describeConfigs(Seq(topicResource1, topicResource2, brokerResource).asJava)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2160: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicConfigEntries2 = Seq(new ConfigEntry(LogConfig.CompressionTypeProp, "gzip")).asJava
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2162: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.alterConfigs(Map(
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2168: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2, brokerResource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeResult = client.describeConfigs(Seq(topicResource1, topicResource2, brokerResource).asJava)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:63: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Map[String, Object](AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG -> brokerList).asJava
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicConfigEntries1 = Seq(
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:117: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicConfigEntries2 = Seq(new ConfigEntry(LogConfig.MinCleanableDirtyRatioProp, "0.8")).asJava
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:119: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicConfigEntries3 = Seq(new ConfigEntry(LogConfig.MinInSyncReplicasProp, "-1")).asJava
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:122: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokerConfigEntries = Seq(new ConfigEntry(KafkaConfig.SslTruststorePasswordProp, "12313")).asJava
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:125: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:125: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var alterResult = client.alterConfigs(Map(
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:132: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2, topicResource3, brokerResource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:139: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var describeResult = client.describeConfigs(Seq(topicResource1, topicResource2, topicResource3, brokerResource).asJava)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:153: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicConfigEntries2 = Seq(new ConfigEntry(LogConfig.MinCleanableDirtyRatioProp, "0.7")).asJava
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:155: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:155: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    alterResult = client.alterConfigs(Map(
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topicResource1, topicResource2, topicResource3, brokerResource).asJava, alterResult.values.keySet)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:169: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeResult = client.describeConfigs(Seq(topicResource1, topicResource2, topicResource3, brokerResource).asJava)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:194: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      this.configs = configs.asScala.toMap
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.METADATA -> ((resp: requests.MetadataResponse) => resp.errors.asScala.find(_._1 == topic).getOrElse(("test", Errors.NONE))._2),
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:177: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.PRODUCE -> ((resp: requests.ProduceResponse) => resp.responses.asScala.find(_._1 == tp).get._2.error),
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:178: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.FETCH -> ((resp: requests.FetchResponse[Records]) => resp.responseData.asScala.find(_._1 == tp).get._2.error),
                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:179: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.LIST_OFFSETS -> ((resp: requests.ListOffsetResponse) => resp.responseData.asScala.find(_._1 == tp).get._2.error),
                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:188: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val errorCode = resp.data().groups().asScala.find(g => group.equals(g.groupId())).head.errorCode()
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:194: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.LEADER_AND_ISR -> ((resp: requests.LeaderAndIsrResponse) => resp.responses.asScala.find(_._1 == tp).get._2),
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:195: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.STOP_REPLICA -> ((resp: requests.StopReplicaResponse) => resp.responses.asScala.find(_._1 == tp).get._2),
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:211: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.CREATE_ACLS -> ((resp: CreateAclsResponse) => resp.aclCreationResponses.asScala.head.error.error),
                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:213: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.DELETE_ACLS -> ((resp: DeleteAclsResponse) => resp.responses.asScala.head.error.error),
                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:216: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      if (resp.logDirInfos.size() > 0) resp.logDirInfos.asScala.head._2.error else Errors.CLUSTER_AUTHORIZATION_FAILED),
                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:217: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ApiKeys.CREATE_PARTITIONS -> ((resp: CreatePartitionsResponse) => resp.errors.asScala.find(_._1 == topic).get._2.error),
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new requests.MetadataRequest.Builder(List(topic).asJava, allowAutoTopicCreation).build()
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      collection.mutable.Map(tp -> MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord("test".getBytes))).asJava).
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:317: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(tp -> new ListOffsetRequest.PartitionData(0L, Optional.of[Integer](27))).asJava).
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:323: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    OffsetsForLeaderEpochRequest.Builder.forConsumer(epochs.asJava).build()
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:327: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new requests.OffsetFetchRequest.Builder(group, List(tp).asJava).build()
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:338: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionState = Map(tp -> new UpdateMetadataRequest.PartitionState(
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:339: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:339: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:339: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new requests.UpdateMetadataRequest.Broker(brokerId,
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:342: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Seq(new requests.UpdateMetadataRequest.EndPoint("localhost", 0, securityProtocol,
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:378: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new DescribeGroupsRequest.Builder(new DescribeGroupsRequestData().setGroups(List(group).asJava)).build()
                                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:404: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(topic -> new CreatePartitionsRequest.PartitionDetails(10)).asJava, 10000, true
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(tp -> new LeaderAndIsrRequest.PartitionState(Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, false)).asJava,
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(tp -> new LeaderAndIsrRequest.PartitionState(Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, false)).asJava,
                                                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(tp -> new LeaderAndIsrRequest.PartitionState(Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, false)).asJava,
                                                                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:428: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Set(new Node(brokerId, "localhost", 0)).asJava).build()
         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:431: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private def stopReplicaRequest = new StopReplicaRequest.Builder(ApiKeys.STOP_REPLICA.latestVersion, brokerId, Int.MaxValue, Long.MaxValue, true, Set(tp).asJava).build()
                                                                                                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:504: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new AlterPartitionReassignmentsRequestData.ReassignableTopic()
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:507: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          List(new AlterPartitionReassignmentsRequestData.ReassignablePartition().setPartitionIndex(tp.partition())).asJava
              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:514: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new ListPartitionReassignmentsRequestData.ListPartitionReassignmentsTopics()
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:517: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          List(new Integer(tp.partition)).asJava
              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:779: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:795: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(List(tp).asJava)
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:814: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:815: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.seekToBeginning(List(tp).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:828: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:846: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(List(tp).asJava)
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:865: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(List(tp).asJava)
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:885: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:900: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(50)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:947: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(0)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:967: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic).asJava, consumer.subscription)
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:973: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(0)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:974: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(GROUP_METADATA_TOPIC_NAME), consumer.subscription.asScala)
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1040: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(topicPartition).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1064: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metadataRequest = new MetadataRequest.Builder(List(topic, createTopic).asJava, true).build()
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1067: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic).asJava, metadataResponse.topicsByError(Errors.NONE))
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1068: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(createTopic).asJava, metadataResponse.topicsByError(Errors.TOPIC_AUTHORIZATION_FAILED))
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1076: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Set(topic, createTopic).asJava, metadataResponse.topicsByError(Errors.NONE))
                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1083: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1090: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1098: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1113: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1143: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1153: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1154: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(offset)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1181: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1210: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.endOffsets(Set(tp).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1217: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.endOffsets(Set(tp).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1223: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = createAdminClient().describeConsumerGroups(Seq(group).asJava)
                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    createAdminClient().describeConsumerGroups(Seq(group).asJava).describedGroups().get(group).get()
                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1272: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(group, group2), adminClient.listConsumerGroups().all().get().asScala.map(_.groupId()).toSet)
                                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1278: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val groupList = adminClient.listConsumerGroups().all().get().asScala.toList
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1285: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(), listGroupResult.errors().get().asScala.toList)
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1286: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(), listGroupResult.all().get().asScala.toList)
                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1296: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1297: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5, "")).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    createAdminClient().deleteConsumerGroups(Seq(group).asJava).deletedGroups().get(group).get()
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1306: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> new OffsetAndMetadata(5, "")).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1308: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = createAdminClient().deleteConsumerGroups(Seq(group).asJava)
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1314: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val result = createAdminClient().deleteConsumerGroups(Seq(group).asJava)
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1351: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.TOPIC_AUTHORIZATION_FAILED, deleteRecordsResponse.responses.asScala.head._2.error)
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1360: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.TOPIC_AUTHORIZATION_FAILED, deleteRecordsResponse.responses.asScala.head._2.error)
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1370: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.NONE, deleteRecordsResponse.responses.asScala.head._2.error)
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1378: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.TOPIC_AUTHORIZATION_FAILED, createPartitionsResponse.errors.asScala.head._2.error)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1387: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.NONE, createPartitionsResponse.errors.asScala.head._2.error)
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1412: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      producer.sendOffsetsToTransaction(Map(new TopicPartition(topic, 0) -> new OffsetAndMetadata(0L)).asJava, group)
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1427: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      producer.sendOffsetsToTransaction(Map(new TopicPartition(topic, 0) -> new OffsetAndMetadata(0L)).asJava, group)
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1513: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            assertEquals(Set(topic), cause.unauthorizedTopics().asScala)
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1534: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(Set(topic), e.unauthorizedTopics().asScala)
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:1601: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val offsets: util.Map[TopicPartition, OffsetAndMetadata] = Map(new TopicPartition(tp.topic, tp.partition) -> new OffsetAndMetadata(1L)).asJava
                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseConsumerTest.scala:41: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseConsumerTest.scala:58: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseConsumerTest.scala:67: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      parts = consumer.partitionsFor(Topic.GROUP_METADATA_TOPIC_NAME).asScala
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:122: method checksum in class RecordMetadata is deprecated: see corresponding Javadoc for more information.
          assertNotEquals(metadata.checksum(), 0)
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:328: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(List(new TopicPartition(topic, partition)).asJava)
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:444: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(new TopicPartition(topic, partition)).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:473: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(new TopicPartition(topic, partition)).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseQuotaTest.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      quotaMetricTags(clientId).asJava)
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val records = consumer.poll(100).asScala
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:101: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
      val records = consumer.poll(100).asScala
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Set(tp), consumer.assignment.asScala)
                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:395: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
          consumer.poll(0L)
                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:188: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    clientSecurityProps("admin-client").asInstanceOf[util.Map[Object, Object]].asScala.foreach { case (key, value) =>
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:358: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Set(DefaultProduceQuotaProp, DefaultFetchQuotaProp).asJava
       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    reconfigurableConfigs.asScala.foreach(configValue(configs, _))
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:382: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          Map(QuotaGroupTag -> userGroup).asJava
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:397: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicsByGroup = cluster.topics.asScala.groupBy(group)
                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/CustomQuotaCallbackTest.scala:400: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val groupPartitions = groupTopics.flatMap(topic => cluster.partitionsForTopic(topic).asScala)
                                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:37: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  val kafkaServerSaslMechanisms = ScramMechanism.mechanismNames.asScala.toList
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DelegationTokenEndToEndAuthorizationTest.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => adminClientConfig.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(group1Acl, group2Acl, group3Acl).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:115: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(group1Acl, group2Acl, group3Acl), results.values.keySet.asScala)
                                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:118: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeConsumerGroupsResult = client.describeConsumerGroups(Seq(group1, group2, group3).asJava,
                                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:122: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .map(operation => operation.toJava).asJava
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(AclOperation.DESCRIBE), group2Description.authorizedOperations().asScala.toSet)
                                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(AclOperation.DESCRIBE, AclOperation.DELETE), group3Description.authorizedOperations().asScala.toSet)
                                                                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(), clusterDescribeResult.authorizedOperations().get().asScala.toSet)
                                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      clusterDescribeResult.authorizedOperations().get().asScala.toSet)
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(clusteAllAcl).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:151: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(clusteAllAcl), results.values.keySet.asScala)
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:155: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .map(operation => operation.toJava).asJava
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:169: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var describeTopicsResult = client.describeTopics(Set(topic1, topic2).asJava).all.get()
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:170: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(), describeTopicsResult.get(topic1).authorizedOperations().asScala.toSet)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(), describeTopicsResult.get(topic2).authorizedOperations().asScala.toSet)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeTopicsResult = client.describeTopics(Set(topic1, topic2).asJava,
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(AclOperation.DESCRIBE), describeTopicsResult.get(topic1).authorizedOperations().asScala.toSet)
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:177: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(AclOperation.DESCRIBE), describeTopicsResult.get(topic2).authorizedOperations().asScala.toSet)
                                                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:180: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(topic1Acl, topic2All).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:181: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(topic1Acl, topic2All), results.values.keySet.asScala)
                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:185: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .map(operation => operation.toJava).asJava
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    describeTopicsResult = client.describeTopics(Set(topic1, topic2).asJava,
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/DescribeAuthorizedOperationsTest.scala:191: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      describeTopicsResult.get(topic2).authorizedOperations().asScala.toSet)
                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:208: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:227: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
           .filterKeys(k => k.getName == metricName)
            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:237: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:248: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:259: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:270: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:328: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:331: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val e1 = intercept[ExecutionException] { adminClient.describeTopics(Set(topic).asJava).all().get() }
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:339: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeResults = adminClient.describeTopics(Set(topic, topic2).asJava).values
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:343: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val e2 = intercept[ExecutionException] { adminClient.describeTopics(Set(topic).asJava).all().get() }
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:347: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp, tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeResults2 = adminClient.describeTopics(Set(topic, topic2).asJava).values
                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:379: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(Set(topic).asJava, e.unauthorizedTopics())
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:392: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:402: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:408: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, "topic2").asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:412: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:438: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:445: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(Set(topic).asJava, e.unauthorizedTopics())
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:454: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:461: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(Set(topic).asJava, e.unauthorizedTopics())
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndAuthorizationTest.scala:491: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/EndToEndClusterIdTest.scala:152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    testConsumer.assign(List(tp).asJava)
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/GroupCoordinatorIntegrationTest.scala:43: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetMap = Map(
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/GroupCoordinatorIntegrationTest.scala:51: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.waitUntilTrue(() => getGroupMetadataLogOpt.exists(_.logSegments.exists(_.log.batches.asScala.nonEmpty)),
                                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/GroupCoordinatorIntegrationTest.scala:56: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .flatMap(_.log.batches.asScala.map(_.compressionType))
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:87: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:151: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val consumerMetricNames = consumer.metrics.keySet.asScala.toSet
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:155: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val producerMetricNames = producer.metrics.keySet.asScala.toSet
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def errorMetricCount = Metrics.defaultRegistry.allMetrics.keySet.asScala.filter(_.getName == "ErrorsPerSec").size
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:252: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val matchingMetrics = metrics.asScala.filter {
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val allMetrics = Metrics.defaultRegistry.allMetrics.asScala
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:286: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val allMetrics = Metrics.defaultRegistry.allMetrics.asScala
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/MetricsTest.scala:302: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metrics = Metrics.defaultRegistry.allMetrics.asScala.filter { case (n, _) =>
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:58: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:170: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:183: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:217: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          consumer.commitSync(Map(tp -> new OffsetAndMetadata(committedPosition)).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:224: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:230: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List("otherTopic").asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:252: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:270: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:317: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:327: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:477: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:481: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map((tp, syncMetadata)).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:491: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map(tp -> nullMetadata).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:498: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:504: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.commitAsync(Map(tp -> new OffsetAndMetadata(i)).asJava, callback)
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:519: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:524: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, otherTopic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:534: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, otherTopic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:538: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:574: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:576: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.seekToEnd(List(tp).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:580: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.seekToBeginning(List(tp).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:592: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:594: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.seekToEnd(List(tp2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:598: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.seekToBeginning(List(tp2).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:632: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:647: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    otherConsumer.assign(List(tp).asJava)
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:653: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitions = List(tp).asJava
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:676: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:712: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:744: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:795: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2, topic3).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:831: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:839: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2, topic3).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:843: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1012: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    testConsumer.assign(List(tp).asJava)
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1025: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    testConsumer.commitSync(Map[TopicPartition, OffsetAndMetadata]((tp, new OffsetAndMetadata(2L))).asJava)
                                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1109: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    testConsumer.assign(List(tp).asJava)
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1125: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp1).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1159: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitions = Set(t0p0, t0p1, t1p0).asJava
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1282: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1287: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List[String]().asJava)
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1299: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1301: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.pause(List(tp).asJava)
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1304: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List("topic2").asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp, tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1322: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map[TopicPartition, OffsetAndMetadata]((tp, new OffsetAndMetadata(3L))).asJava)
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1329: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.commitSync(Map[TopicPartition, OffsetAndMetadata]((tp2, new OffsetAndMetadata(5L))).asJava)
                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1359: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava, rebalanceListener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1367: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, topic2).asJava, rebalanceListener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1391: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, topic2).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1409: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic2).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1430: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic, topic2).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1449: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic2).asJava, listener)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1468: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1480: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1497: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1510: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp2).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1512: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    assertNull(consumer.metrics.get(new MetricName(tp + ".records-lag", "consumer-fetch-manager-metrics", "", tags)))
                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1528: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1550: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1572: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1591: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1648: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Some(s"Did not get valid assignment for partitions ${subscriptions.asJava} after one consumer left"), 3 * groupMaxSessionTimeoutMs)
                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1728: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Some(s"Did not get valid assignment for partitions ${subscriptions.asJava} after we changed subscription"))
                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1735: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(topicsToSubscribe.asJava, rebalanceListener)
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1741: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      if (polledRecords.records(partition).asScala.nonEmpty)
                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1749: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.pollUntilTrue(consumer, () => consumer.assignment() == expectedAssignment.asJava,
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1875: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records1.count() == 1 && records1.records(tp).asScala.head.offset == 0)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/PlaintextConsumerTest.scala:1877: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records2.count() == 1 && records2.records(tp).asScala.head.offset == 1)
                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ProducerCompressionTest.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Seq(
       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:116: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:141: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        response.asScala.foreach { case (topic, description) =>
        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:164: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslClientsWithInvalidCredentialsTest.scala:176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslEndToEndAuthorizationTest.scala:65: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer1.assign(List(tp).asJava)
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslEndToEndAuthorizationTest.scala:66: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer2.assign(List(tp).asJava)
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala:59: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    plainSaslConsumer.assign(List(tp).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala:67: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    gssapiSaslConsumer.assign(List(tp).asJava)
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala:75: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    gssapiSaslConsumer.assign(List(tp).asJava)
                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslMultiMechanismConsumerTest.scala:82: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    plainSaslConsumer.assign(List(tp).asJava)
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslScramSslEndToEndAuthorizationTest.scala:28: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  override protected def kafkaServerSaslMechanisms = ScramMechanism.mechanismNames.asScala.toList
                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(acl2, acl3).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:113: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(acl2, acl3), results.values.keySet().asScala)
                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    results.values.values().asScala.foreach(value => value.get)
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:117: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results2 = client.createAcls(List(aclUnknown).asJava)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:118: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(aclUnknown), results2.values.keySet().asScala)
                                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:120: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results3 = client.deleteAcls(List(ACL1.toFilter, acl2.toFilter, acl3.toFilter).asJava).values
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(ACL1.toFilter, acl2.toFilter, acl3.toFilter), results3.keySet.asScala)
                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(acl2), results3.get(acl2.toFilter).get.values.asScala.map(_.binding).toSet)
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:124: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(acl3), results3.get(acl3.toFilter).get.values.asScala.map(_.binding).toSet)
                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(acl2, acl2, transactionalIdAcl).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(acl2, acl2, transactionalIdAcl), results.values.keySet.asScala)
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:143: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results2 = client.deleteAcls(List(filterA, filterB, filterC).asJava, new DeleteAclsOptions())
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:144: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(filterA, filterB, filterC), results2.values.keySet.asScala)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(groupAcl), results2.values.get(filterA).get.values.asScala.map(_.binding).toSet)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(transactionalIdAcl), results2.values.get(filterC).get.values.asScala.map(_.binding).toSet)
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(acl2), results2.values.get(filterB).get.values.asScala.map(_.binding).toSet)
                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var deleted = client.deleteAcls(List(acl2.toFilter).asJava).all().get().asScala.toSet
                                                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var deleted = client.deleteAcls(List(acl2.toFilter).asJava).all().get().asScala.toSet
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:197: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(anyAcl.toFilter).asJava).all().get().asScala.toSet
                                                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:197: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(anyAcl.toFilter).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:204: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(prefixAcl.toFilter).asJava).all().get().asScala.toSet
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:204: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(prefixAcl.toFilter).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:211: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allLiteralTopicAcls).asJava).all().get().asScala.toSet
                                                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:211: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allLiteralTopicAcls).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:218: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allPrefixedTopicAcls).asJava).all().get().asScala.toSet
                                                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:218: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allPrefixedTopicAcls).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allTopicAcls).asJava).all().get().asScala.toSet
                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(allTopicAcls).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:247: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var deleted = client.deleteAcls(List(legacyMyTopic2Acls).asJava).all().get().asScala.toSet
                                                                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:247: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var deleted = client.deleteAcls(List(legacyMyTopic2Acls).asJava).all().get().asScala.toSet
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:254: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(legacyAnyTopicAcls).asJava).all().get().asScala.toSet
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:254: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(legacyAnyTopicAcls).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(legacyAllTopicAcls).asJava).all().get().asScala.toSet
                                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleted = client.deleteAcls(List(legacyAllTopicAcls).asJava).all().get().asScala.toSet
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val results = client.createAcls(List(clusterAcl, emptyResourceNameAcl).asJava, new CreateAclsOptions())
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:275: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(clusterAcl, emptyResourceNameAcl), results.values.keySet().asScala)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val result = client.createAcls(List(fooAcl, transactionalIdAcl).asJava, new CreateAclsOptions)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val result = client.deleteAcls(List(fooAcl.toFilter, transactionalIdAcl.toFilter).asJava, new DeleteAclsOptions)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:330: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            assertEquals(Set(fooAcl), result.values.get(fooAcl.toFilter).get.values.asScala.map(_.binding).toSet)
                                                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:332: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              result.values.get(transactionalIdAcl.toFilter).get.values.asScala.map(_.binding).toSet)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:353: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          case Success(acls) => Set(userAcl).equals(acls.asScala.toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:402: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      acls == lastResults.asScala.toSet
              ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:407: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.createAcls(bindings.asJava).all().get()
                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/SaslSslAdminClientIntegrationTest.scala:413: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    client.describeAcls(allTopicAcls).values.get().asScala.toSet
                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsBounceTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        producer.sendOffsetsToTransaction(TestUtils.consumerPositions(consumer).asJava, consumerGroup)
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsBounceTest.scala:157: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(topics.asJava)
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    unCommittedConsumer.subscribe(List(topic1, topic2).asJava)
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    readUncommittedConsumer.assign(Set(tp1, tp2).asJava)
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val readUncommittedOffsetsForTimes = readUncommittedConsumer.offsetsForTimes(Map(
                                                                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:162: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    readCommittedConsumer.assign(Set(tp1, tp2).asJava)
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    readCommittedConsumer.assignment.asScala.foreach { tp =>
                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:177: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val readCommittedOffsetsForTimes = readCommittedConsumer.offsetsForTimes(Map(
                                                                                ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:214: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    readCommittedConsumer.assign(Set(new TopicPartition(topic1, 0)).asJava)
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:248: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:266: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        producer.sendOffsetsToTransaction(TestUtils.consumerPositions(consumer).asJava, consumerGroupId)
                                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:286: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    verifyingConsumer.subscribe(List(topic2).asJava)
                                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:301: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:338: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:352: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      producer1.sendOffsetsToTransaction(Map(new TopicPartition("foobartopic", 0) -> new OffsetAndMetadata(110L)).asJava,
                                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:378: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    producer.sendOffsetsToTransaction(Map(tp -> offsetAndMetadata).asJava, groupId)
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:445: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topic1, topic2).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:511: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    nonTransactionalConsumer.subscribe(List(topic1).asJava)
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:521: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    transactionalConsumer.subscribe(List(topic1).asJava)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:551: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(List(topicWith10PartitionsAndOneReplica, topicWith10Partitions).asJava)
                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/TransactionsTest.scala:552: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    unCommittedConsumer.subscribe(List(topicWith10PartitionsAndOneReplica, topicWith10Partitions).asJava)
                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala:207: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    ProduceRequest.Builder.forCurrentMagic(-1, 3000, partitionRecords.asJava).build()
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/network/DynamicConnectionQuotaTest.scala:231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (_, partitionResponse) = produceResponse.responses.asScala.head
                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:202: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      KEYSTORE_PROPS.asScala.foreach { configName =>
      ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:390: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def cleanerThreads = Thread.getAllStackTraces.keySet.asScala.filter(_.getName.startsWith("kafka-log-cleaner-thread-"))
                                                  ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:432: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      props.asScala.foreach { case (k, v) =>
      ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:444: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.foreach { case (k, v) =>
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:643: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metricsFromOldTests = Metrics.defaultRegistry.allMetrics.keySet.asScala.filter(isProcessorMetric)
                                                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:653: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val kafkaMetrics = servers.head.metrics.metrics().keySet.asScala
                                                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:658: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.keySet.asScala
                                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:853: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      val passwordConfigs = props.asScala.filterKeys(DynamicBrokerConfig.isPasswordConfig)
                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:853: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val passwordConfigs = props.asScala.filterKeys(DynamicBrokerConfig.isPasswordConfig)
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:899: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitions = producer.partitionsFor(topic).asScala
                                           ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:945: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokerConfigs = describeConfig(adminClients.head, servers).entries.asScala
                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:946: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.foreach { case (name, value) =>
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:991: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(listenerName => listenerName.value != securityProtocol.name)
       ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:997: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    deleteListenerProps ++= props.asScala.filter(entry => entry._1.startsWith(listenerPrefix(listenerName)))
                            ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1050: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    server.socketServer.metrics.metrics.keySet.asScala.exists(_.tags.get("listener") == listenerName)
                                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1060: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assignment.asScala.foreach(consumer.position)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1117: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val describeResult = adminClient.describeConfigs(configResources.asJava, describeOptions).all.get
                                                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    propNames.asScala.filter(srcProps.containsKey).foreach { propName =>
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestSslUtils.createTrustStore(combinedStorePath, password, certs.asJava)
                                                               ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      clientProps(SecurityProtocol.SSL).asScala.foreach {
                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1184: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        "--alter", "--add-config", newProps.asScala.map { case (k, v) => s"$k=$v" }.mkString(","),
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1194: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    nodes.asScala.map { node =>
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1210: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    }.toMap.asJava
      ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1211: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs).all.get
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                                                                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1228: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configs = Map(new ConfigResource(ConfigResource.Type.BROKER, server.config.brokerId.toString) -> newConfig).asJava
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1229: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClients.head.alterConfigs(configs).all.get
                      ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1230: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala.foreach { case (k, v) => waitForConfigOnServer(server, k, v) }
    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val oldProps = servers.head.config.values.asScala.filter { case (k, _) => newProps.containsKey(k) }
                                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1246: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(oldProps, server.config.values.asScala.filter { case (k, _) => newProps.containsKey(k) })
                                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configDesc.entries.asScala.find(cfg => cfg.name == configName)
               ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1269: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      "--alter", "--add-config", sslStoreProps.asScala.map { case (k, v) => s"$k=$v" }.mkString(","),
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1323: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Thread.getAllStackTraces.keySet.asScala.toList.map(_.getName)
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1398: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      case list: util.List[_] => list.asScala.map(_.toString).mkString(",")
                                 ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1538: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            records.partitions.asScala.foreach { tp =>
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1540: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              records.records(tp).asScala.map(_.key.toInt).foreach { key =>
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1541: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                val prevKey = lastReceived.asScala.getOrElse(partition, partition - numPartitions)
                              ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1573: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          records.asScala.toList.exists(predicate)
          ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1587: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val reporters = testReporters.asScala.toList
                    ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1605: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    kafkaMetrics ++= metrics.asScala
                     ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1628: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Set(PollingIntervalProp).asJava
       ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/GssapiAuthenticationTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(tp).asJava)
                        ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/ScramServerStartupTest.scala:42: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private val kafkaServerSaslMechanisms = Collections.singletonList("SCRAM-SHA-256").asScala
                                                                   ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:90: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  if (!config.keySet.containsAll(MiniKdc.RequiredProperties.asJava)) {
                                         ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:91: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val missingProperties = MiniKdc.RequiredProperties.filterNot(config.keySet.asScala)
                                                                        ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:97: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  config.asScala.foreach { case (key, value) =>
  ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val indexedAttributes = Set[Index[_, String]](
                                                 ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:206: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        addEntriesToDirectoryService(StrSubstitutor.replace(builder, map.asJava))
                                                                     ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:326: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      KerberosKeyFactory.getKerberosKeys(principalWithRealm, generatedPassword).asScala.values.map { encryptionKey =>
                                        ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:331: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    keytab.setEntries(entries.asJava)
                      ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:338: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (ldifEntry <- reader.asScala)
                        ^
/mydata/kafka/core/src/test/scala/kafka/security/minikdc/MiniKdc.scala:362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        userConfig.asScala.foreach { case (key, value) =>
        ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val newTopics = topics.map(name => new NewTopic(name, 1, 1.toShort).configs(topicConfigs.asJava)).asJava
                                ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val newTopics = topics.map(name => new NewTopic(name, 1, 1.toShort).configs(topicConfigs.asJava)).asJava
                                                                                  ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val allTopics = adminClient.listTopics.names.get.asScala.toSeq
                                                     ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:203: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new AbstractIterator[TestRecord] {
    ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:305: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(topics.seq.asJava)
                              ^
/mydata/kafka/core/src/test/scala/kafka/tools/LogCompactionTester.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          for (record <- consumerRecords.asScala) {
                         ^
/mydata/kafka/core/src/test/scala/kafka/zk/LiteralAclStoreTest.scala:68: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    val encoded = (resource.resourceType +  Resource.Separator + resource.name).getBytes(UTF_8)
                            ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:269: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      if (broker.metrics.metrics.asScala.contains(metricName))
                         ^
/mydata/kafka/core/src/test/scala/other/kafka/ReplicationQuotasTestRig.scala:270: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        broker.metrics.metrics.asScala(metricName).metricValue.asInstanceOf[Double]
                       ^
/mydata/kafka/core/src/test/scala/other/kafka/TestLinearWriteSpeed.scala:171: method + in class Double is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
    println(bytesToWrite / (1024.0 * 1024.0 * elapsedSecs) + " MB per sec")
                                                           ^
/mydata/kafka/core/src/test/scala/other/kafka/TestPurgatoryPerformance.scala:94: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val gcMXBeans = ManagementFactory.getGarbageCollectorMXBeans().asScala.sortBy(_.getName)
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:98: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1).asJava, false).build)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitions = response.topicMetadata.asScala.head.partitionMetadata.asScala.sortBy(_.partition)
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitions = response.topicMetadata.asScala.head.partitionMetadata.asScala.sortBy(_.partition)
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:125: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic2).asJava, false).build)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata = response.topicMetadata.asScala.head
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionMetadata = topicMetadata.partitionMetadata.asScala.sortBy(_.partition)
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(replicas.asScala.head.id == 0 || replicas.asScala.head.id == 1)
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(replicas.asScala.head.id == 0 || replicas.asScala.head.id == 1)
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:136: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(replicas.asScala(1).id == 0 || replicas.asScala(1).id == 1)
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:136: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(replicas.asScala(1).id == 0 || replicas.asScala(1).id == 1)
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:151: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic3).asJava, false).build)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:153: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata = response.topicMetadata.asScala.head
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic2).asJava, false).build)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:173: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata = response.topicMetadata.asScala.head
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:181: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionOpt = metadata.partitionMetadata.asScala.find(_.partition == partitionId)
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AddPartitionsTest.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("Replica set should match", expectedReplicas, partition.replicas.asScala.map(_.id).toSet)
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/AdminRackAwareTest.scala:34: method - in trait Map is deprecated (since 2.13.0): Use - or removed on an immutable Map
    val anotherList = AdminUtils.getRackAlternatedBrokerList(rackMap - 5)
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:355: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        config.entries.asScala.foreach { e => brokerConfigs.put(e.name, e.value) }
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:378: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    future.complete(util.Collections.singletonMap(resource, new Config(describeConfigEntries.asJava)))
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:409: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(expectedConfigOps, alterConfigOps.asScala.toList)
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:471: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(configs, entityConfigs.asScala)
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConfigCommandTest.scala:626: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(mechanisms, configChange.keySet().asScala)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:72: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.partitionsFor(topic).asScala.flatMap { partitionInfo =>
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    customPropsOpt.foreach(props.asScala ++= _.asScala)
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    customPropsOpt.foreach(props.asScala ++= _.asScala)
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ConsumerGroupCommandTest.scala:167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(partitions.toList.asJava)
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/DelegationTokenCommandTest.scala:65: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:74: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.resource(AdminClient.create(createConfig(servers).asJava)) { client =>
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:105: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.resource(AdminClient.create(createConfig(servers).asJava)) { client =>
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:137: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.resource(AdminClient.create(createConfig(servers).asJava)) { client =>
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/LeaderElectionCommandTest.scala:170: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    TestUtils.resource(AdminClient.create(createConfig(servers).asJava)) { client =>
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/PreferredReplicaLeaderElectionCommandTest.scala:367: method reverseMap in trait SeqOps is deprecated (since 2.13.0): Use .reverseIterator.map(f).to(...) instead of .reverseMap(f)
    servers = serverConfigs.reverseMap(s => TestUtils.createServer(s))
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsClusterTest.scala:262: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicaDirs = adminClient.describeReplicaLogDirs(List(replica1, replica2).asJava).all().get()
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (actual <- propsCapture.getValues.asScala) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:318: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (actual <- propsCapture.getValues.asScala) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (actual <- propsCapture.getValues.asScala) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:383: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (capture <- propsCapture.getValues.asScala) {
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ReassignPartitionsCommandTest.scala:420: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (actual <- propsCapture.getValues.asScala) {
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:330: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val allResetOffsets = resetOffsets(consumerGroupCommand)(group).mapValues(_.offset).toMap
                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:358: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    val allResetOffsets = resetOffsets(consumerGroupCommand)(group).mapValues(_.offset).toMap
                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:388: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(tp0 -> 2L, tp1 -> 2L), exportedOffsets(group).mapValues(_.offset).toMap)
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:393: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(tp0 -> 2L, tp1 -> 2L), importedOffsets(group).mapValues(_.offset).toMap)
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:426: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(t1p0 -> 2L, t1p1 -> 2L), exportedOffsets(group1).mapValues(_.offset).toMap)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:427: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(t2p0 -> 2L, t2p1 -> 2L), exportedOffsets(group2).mapValues(_.offset).toMap)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:433: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(t1p0 -> 2L, t1p1 -> 2L), importedOffsets(group1).mapValues(_.offset).toMap)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:434: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(t2p0 -> 2L, t2p1 -> 2L), importedOffsets(group2).mapValues(_.offset).toMap)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:440: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    assertEquals(Map(t1p0 -> 2L, t1p1 -> 2L), importedOffsets2(group1).mapValues(_.offset).toMap)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/ResetConsumerGroupOffsetTest.scala:487: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        assertEquals(expectedOffsets(topic), partitionInfo.filter(partitionInfo => partitionInfo._1.topic() == topic).mapValues(_.offset).toMap)
                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:251: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(5, 4), partitions.get(0).replicas().asScala.map(_.id()))
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:252: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(3, 2), partitions.get(1).replicas().asScala.map(_.id()))
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:253: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(1, 0), partitions.get(2).replicas().asScala.map(_.id()))
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:336: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new NewTopic(topic1, 2, 2.toShort),
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:356: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new NewTopic(topic1, 2, 2.toShort),
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:371: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new NewTopic(testTopicName, 2, 2.toShort)).asJavaCollection).all().get()
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:392: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(4,2), topicDescription.partitions().get(2).replicas().asScala.map(_.id()))
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:398: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new NewTopic(testTopicName, 2, 2.toShort)).asJavaCollection).all().get()
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:410: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List(new NewTopic(testTopicName, 2, 2.toShort)).asJavaCollection).all().get()
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:576: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .all().get().asScala(testTopicName)
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:577: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionOnBroker0 = testTopicDescription.partitions().asScala.find(_.leader().id() == 0).get.partition()
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/admin/TopicCommandWithAdminClientTest.scala:589: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              val testPartitionMetadata = topicMetadatas.find(_.topic().equals(testTopicName)).get.partitionMetadata().asScala.find(_.partition() == partitionOnBroker0)
                                                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:476: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](leader, follower2).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:486: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      controllerEpoch, leader, leaderEpoch, isr, 1, replicas.map(Int.box).asJava, true
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:556: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      controllerEpoch, follower2, leaderEpoch + 1, isr, 4, replicas.map(Int.box).asJava, false
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:562: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      controllerEpoch, leader, leaderEpoch + 2, isr, 5, replicas.map(Int.box).asJava, false
                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:631: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, brokerId + 1).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:705: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, brokerId + 1).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:777: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:777: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:782: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:782: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:787: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:787: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      List[Integer](0, 1, 2, brokerId).asJava, 1, List[Integer](0, 1, 2, brokerId).asJava, false)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:798: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](leader, follower1, follower2).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:799: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](leader, follower2).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:875: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicaIds = List[Integer](brokerId, brokerId + 1).asJava
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:917: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val buf = ByteBuffer.allocate(DefaultRecordBatch.sizeInBytes(records.asJava))
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:953: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val buf = ByteBuffer.allocate(DefaultRecordBatch.sizeInBytes(records.asJava))
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:968: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val buf = ByteBuffer.allocate(DefaultRecordBatch.sizeInBytes(records.asJava))
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:986: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](leader, follower1, follower2).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:987: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](leader).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1006: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, remoteBrokerId).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1059: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1069: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          controllerEpoch, brokerId, leaderEpoch, isr, 1, replicas.map(Int.box).asJava, true),
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1118: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, remoteBrokerId).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1119: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1163: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId, remoteBrokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          controllerEpoch, brokerId, leaderEpoch, isr, 1, replicas.map(Int.box).asJava, true),
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1215: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId, remoteBrokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          controllerEpoch, brokerId, leaderEpoch, isr, 1, replicas.map(Int.box).asJava, true),
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1282: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId, remoteBrokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          controllerEpoch, brokerId, leaderEpoch, isr, 1, replicas.map(Int.box).asJava, true),
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1334: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, remoteBrokerId).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1335: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val isr = List[Integer](brokerId, remoteBrokerId).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1377: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List[Integer](brokerId, brokerId + 1).asJava
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1395: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      Metrics.defaultRegistry().allMetrics().asScala.filterKeys { metricName =>
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1395: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Metrics.defaultRegistry().allMetrics().asScala.filterKeys { metricName =>
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/cluster/PartitionTest.scala:1404: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(), Metrics.defaultRegistry().allMetrics().asScala.keySet.filter(_.getType == "Partition"))
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:73: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions.keySet, leaderAndIsrRequest.partitionStates.keySet.asScala)
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:75: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      leaderAndIsrRequest.partitionStates.asScala.mapValues(_.basePartitionState.leader).toMap)
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:75: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      leaderAndIsrRequest.partitionStates.asScala.mapValues(_.basePartitionState.leader).toMap)
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:77: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      leaderAndIsrRequest.partitionStates.asScala.mapValues(_.basePartitionState.isr.asScala).toMap)
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:77: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      leaderAndIsrRequest.partitionStates.asScala.mapValues(_.basePartitionState.isr.asScala).toMap)
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:77: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      leaderAndIsrRequest.partitionStates.asScala.mapValues(_.basePartitionState.isr.asScala).toMap)
                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:84: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions.keySet, response.asInstanceOf[LeaderAndIsrResponse].responses.keySet.asScala)
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:109: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(partition), leaderAndIsrRequest.partitionStates.keySet.asScala)
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:142: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Set(partition), leaderAndIsrRequest.partitionStates.keySet.asScala)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:206: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.map { case (k, v) => (k, v.basePartitionState.leader) })
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:208: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.map { case (k, v) => (k, v.basePartitionState.isr.asScala) })
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:208: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.map { case (k, v) => (k, v.basePartitionState.isr.asScala) })
                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:213: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(1, 2, 3), updateMetadataRequest.liveBrokers.asScala.map(_.id).toSet)
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:241: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(1, 2, 3), updateMetadataRequest.liveBrokers.asScala.map(_.id).toSet)
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:272: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.topic == "foo")
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:271: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(updateMetadataRequest.partitionStates.asScala
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:278: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.filter { case (k, _) => k.topic == "bar" }.map { case (k, v) =>
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:281: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.map { case (k, v) => (k, v.basePartitionState.isr.asScala) })
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:281: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      updateMetadataRequest.partitionStates.asScala.map { case (k, v) => (k, v.basePartitionState.isr.asScala) })
                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(1, 2, 3), updateMetadataRequest.liveBrokers.asScala.map(_.id).toSet)
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:309: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Set(1, 2), updateMetadataRequest.liveBrokers.asScala.map(_.id).toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:377: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions, stopReplicaRequest.partitions.asScala.toSet)
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:412: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions, sentStopReplicaRequests.flatMap(_.partitions.asScala).toSet)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:449: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions, sentStopReplicaRequests.flatMap(_.partitions.asScala).toSet)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:501: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(deletePartitions, deleteRequests.head.partitions.asScala.toSet)
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:503: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(nonDeletePartitions, nonDeleteRequests.head.partitions.asScala.toSet)
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:537: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(partitions, stopReplicaRequest.partitions.asScala.toSet)
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:577: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(partitions, stopReplicaRequest.partitions.asScala.toSet)
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:615: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionErrorMap = stopReplicaRequest.partitions.asScala.map(_ -> error).toMap.asJava
                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:615: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionErrorMap = stopReplicaRequest.partitions.asScala.map(_ -> error).toMap.asJava
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:624: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionErrorMap = leaderAndIsrRequest.partitionStates.asScala.keySet.map(_ -> error).toMap.asJava
                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerChannelManagerTest.scala:624: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partitionErrorMap = leaderAndIsrRequest.partitionStates.asScala.keySet.map(_ -> error).toMap.asJava
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:52: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Metrics.defaultRegistry.allMetrics.asScala.keySet
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:82: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    assertTrue(Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.isEmpty)
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:82: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.isEmpty)
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:92: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    val queueTimeHistogram = Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:92: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val queueTimeHistogram = Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:150: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerEventManagerTest.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:99: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    servers.head.metrics.metrics().values().asScala.foreach { kafkaMetric =>
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(assignment(0).asJava, offlineReplicaPartitionInfo.basePartitionState.replicas)
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Seq(remainingBrokers.head.config.brokerId).asJava, offlineReplicaPartitionInfo.basePartitionState.isr)
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:149: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(assignment(1).asJava, onlinePartitionInfo.basePartitionState.replicas)
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:161: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            !partitionInfo.offlineReplicas.isEmpty || !partitionInfo.basePartitionState.replicas.asScala.equals(replicas)
                                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:449: method reverseMap in trait SeqOps is deprecated (since 2.13.0): Use .reverseIterator.map(f).to(...) instead of .reverseMap(f)
    servers = serverConfigs.reverseMap(s => TestUtils.createServer(s))
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:469: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(List(0,1), partitionStateInfo.basePartitionState.isr.asScala)
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:493: method reverseMap in trait SeqOps is deprecated (since 2.13.0): Use .reverseIterator.map(f).to(...) instead of .reverseMap(f)
    servers = serverConfigs.reverseMap(s => TestUtils.createServer(s))
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:699: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/ControllerIntegrationTest.scala:699: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getMBeanName == metricName).values.headOption
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/controller/PartitionStateMachineTest.scala:435: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
        .andReturn(UpdateLeaderAndIsrResult(updatedLeaderAndIsr.mapValues(Right(_)).toMap, Seq.empty))
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/AbstractCoordinatorConcurrencyTest.scala:167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      watchKeys = Collections.newSetFromMap(new ConcurrentHashMap[TopicPartitionOperationKey, java.lang.Boolean]()).asScala
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:848: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .records.asScala.toList
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:877: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .records.asScala.toList
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1297: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val records = recordsCapture.getValue.records.asScala.toList
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1298: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    recordsCapture.getValue.batches.asScala.foreach { batch =>
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1345: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val records = recordsCapture.getValue.records.asScala.toList
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1346: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    recordsCapture.getValue.batches.asScala.foreach { batch =>
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1421: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val records = recordsCapture.getValue.records.asScala.toList
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1456: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val subscription = new Subscription(List(topic).asJava)
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1874: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    EasyMock.expect(mockRecords.batches).andReturn((Iterable[MutableRecordBatch](mockBatch) ++ records.batches.asScala).asJava).anyTimes()
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1874: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    EasyMock.expect(mockRecords.batches).andReturn((Iterable[MutableRecordBatch](mockBatch) ++ records.batches.asScala).asJava).anyTimes()
                                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/group/GroupMetadataManagerTest.scala:1982: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val endOffset = startOffset + records.records.asScala.size
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:175: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      }.toMap.asJava
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:173: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val pidErrorMap = request.markers.asScala.map { marker =>
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        (marker.producerId.asInstanceOf[java.lang.Long], marker.partitions.asScala.map { tp => (tp, Errors.NONE) }.toMap.asJava)
                                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:174: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        (marker.producerId.asInstanceOf[java.lang.Long], marker.partitions.asScala.map { tp => (tp, Errors.NONE) }.toMap.asJava)
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionCoordinatorConcurrencyTest.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val endOffset = startOffset + records.records.asScala.size
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionLogTest.scala:86: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (record <- records.records.asScala) {
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMarkerChannelManagerTest.scala:434: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metrics = Metrics.defaultRegistry.allMetrics.asScala
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMarkerChannelManagerTest.scala:437: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.getMBeanName == "kafka.coordinator.transaction:type=TransactionMarkerChannelManager,name=UnknownDestinationQueueSize")
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionMarkerChannelManagerTest.scala:440: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.getMBeanName == "kafka.coordinator.transaction:type=TransactionMarkerChannelManager,name=LogAppendRetryQueueSize")
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/coordinator/transaction/TransactionStateManagerTest.scala:583: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val endOffset = startOffset + records.records.asScala.size
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:60: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val metricName = Metrics.defaultRegistry.allMetrics.asScala.keys.find(_.getName.endsWith(m))
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:128: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
           .filterKeys(k => k.getName.endsWith(metricName))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/MetricsDuringTopicCreationDeletionTest.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/integration/UncleanLeaderElectionTest.scala:283: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      consumer.assign(Seq(tp).asJava)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/BrokerCompressionTest.scala:87: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    (for (brokerCompression <- BrokerCompressionCodec.brokerCompressionOptions;
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerIntegrationTest.scala:65: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
        .filterKeys(k => {
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerIntegrationTest.scala:64: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Metrics.defaultRegistry.allMetrics.asScala
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerIntegrationTest.scala:171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; record <- segment.log.records.asScala) yield {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerLagIntegrationTest.scala:103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; record <- segment.log.records.asScala) yield {
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerManagerTest.scala:490: method copyArrayToImmutableIndexedSeq in class LowPriorityImplicits2 is deprecated (since 2.13.0): Implicit conversions from Array to immutable.IndexedSeq are implemented by copying; Use the more efficient non-copying ArraySeq.unsafeWrapArray or an explicit toIndexedSeq call
      new LogCleanerManagerMock(Array(logDir), pool, null)
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerParameterizedIntegrationTest.scala:300: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; deepLogEntry <- segment.log.records.asScala) yield {
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:953: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def distinctValuesBySegment = log.logSegments.map(s => s.log.records.asScala.map(record => TestUtils.readString(record.value)).toSet.size).toSeq
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1047: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; batch <- segment.log.batches.asScala)
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1053: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          batch <- segment.log.batches.asScala if !batch.isControlBatch && batch.hasProducerId)
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1059: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    log.logSegments.flatMap(s => s.log.records.asScala.filter(_.hasValue).filter(_.hasKey).map(m => m.offset))
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1062: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    log.logSegments.map(s => s.log.records.asScala.filter(_.hasValue).count(m => !m.hasKey)).sum
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1500: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; batch <- segment.log.batches.asScala; record <- batch.asScala) {
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1500: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (segment <- log.logSegments; batch <- segment.log.batches.asScala; record <- batch.asScala) {
                                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogCleanerTest.scala:1522: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (logEntry <- records.records.asScala) {
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:129: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(List(ms1.records.iterator.next(), ms2.records.iterator.next()), read.records.records.asScala.toList)
                                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(1, read2.records.records.asScala.size)
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:400: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        seg.log.batches.asScala.map(_.lastOffset).toList)
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:407: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val logConfig = LogConfig(Map(
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:434: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val logConfig = LogConfig(Map(
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogSegmentTest.scala:492: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(1, log.records.batches.asScala.size)
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:134: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (record <- readInfo.records.records.asScala)
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:866: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:882: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    moreRecords.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:907: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:923: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    moreRecords.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:950: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1186: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(log.activeSegment.log.batches.asScala.isEmpty)
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1366: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- fetchedData.records.batches.asScala) {
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1440: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach(_.setPartitionLeaderEpoch(0))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1537: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      readLog(log, values.length, 100).records.batches.asScala.size)
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:1705: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("Should be no more messages", 0, lastRead.records.asScala.size)
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val records = log.logSegments.flatMap(_.log.records.asScala.toList).toList
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2373: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val recovered = log.logSegments.flatMap(_.log.records.asScala.toList).toList
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2659: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val firstBatchBaseOffset = records.head.batches.asScala.head.baseOffset
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2933: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    val dir = new File(logDir + topicPartitionName(topic, partition))
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2973: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    val dir1 = new File(logDir + "/non_kafka_dir")
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:2980: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    val dir2 = new File(logDir + "/non_kafka_dir-delete")
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3018: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val segmentLastOffsetOpt = segmentFetchInfo.records.records.asScala.lastOption.map(_.offset)
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3243: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      recs.batches.asScala.foreach{record =>
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:3405: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val buf = ByteBuffer.allocate(DefaultRecordBatch.sizeInBytes(records.asJava))
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4098: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    records.batches.asScala.foreach(_.setPartitionLeaderEpoch(leaderEpoch))
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4221: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val overflowBatch = segment.log.batches.asScala.find(batch => hasOverflow(segment.baseOffset, batch))
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4279: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (batch <- logSegment.log.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4280: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        recordsFound ++= batch.iterator().asScala
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4293: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
         batch <- logSegment.log.batches.asScala if !batch.isControlBatch;
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogTest.scala:4294: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
         record <- batch.asScala if record.hasValue && record.hasKey)
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("message set size should not change", records.records.asScala.size, validatedRecords.records.asScala.size)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("message set size should not change", records.records.asScala.size, validatedRecords.records.asScala.size)
                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:122: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    validatedRecords.batches.asScala.foreach(batch => validateLogAppendTime(now, 1234L, batch))
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:160: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("message set size should not change", records.records.asScala.size, validatedRecords.records.asScala.size)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:160: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("message set size should not change", records.records.asScala.size, validatedRecords.records.asScala.size)
                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:161: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    validatedRecords.batches.asScala.foreach(batch => validateLogAppendTime(now, -1, batch))
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:164: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(s"The offset of max timestamp should be ${records.records.asScala.size - 1}",
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:165: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records.records.asScala.size - 1, validatedResults.shallowOffsetOfMaxTimestamp)
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:202: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("message set size should not change", records.records.asScala.size,
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:203: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      validatedRecords.records.asScala.size)
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:204: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    validatedRecords.batches.asScala.foreach(batch => validateLogAppendTime(now, 1234L, batch))
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:207: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(s"The offset of max timestamp should be ${records.records.asScala.size - 1}",
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:208: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records.records.asScala.size - 1, validatedResults.shallowOffsetOfMaxTimestamp)
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:303: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- validatedRecords.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(batch.maxTimestamp, batch.asScala.map(_.timestamp).max)
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (record <- batch.asScala) {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:370: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- validatedRecords.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:374: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(batch.maxTimestamp, batch.asScala.map(_.timestamp).max)
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:379: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (record <- batch.asScala) {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:420: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- validatedRecords.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:430: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(s"Offset of max timestamp should be ${validatedRecords.records.asScala.size - 1}",
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:431: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      validatedRecords.records.asScala.size - 1, validatedResults.shallowOffsetOfMaxTimestamp)
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:462: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- validatedRecords.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:472: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(s"Offset of max timestamp should be ${validatedRecords.records.asScala.size - 1}",
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:473: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      validatedRecords.records.asScala.size - 1, validatedResults.shallowOffsetOfMaxTimestamp)
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:518: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (batch <- validatedRecords.batches.asScala) {
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:522: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(batch.maxTimestamp, batch.asScala.map(_.timestamp).max)
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:527: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      for (record <- batch.asScala) {
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:534: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(s"Offset of max timestamp should be ${validatedRecords.records.asScala.size - 1}",
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:535: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      validatedRecords.records.asScala.size - 1, validatedResults.shallowOffsetOfMaxTimestamp)
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1198: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue("Message set should not be empty", records.records.asScala.nonEmpty)
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1200: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (entry <- records.records.asScala) {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/LogValidatorTest.scala:1244: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (record <- batch.asScala) {
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:74: method to in trait SortedOps is deprecated (since 2.13.0): Use rangeTo
          OffsetPosition(valMap.to(offset).last._1, valMap.to(offset).last._2._2)
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetIndexTest.scala:74: method to in trait SortedOps is deprecated (since 2.13.0): Use rangeTo
          OffsetPosition(valMap.to(offset).last._1, valMap.to(offset).last._2._2)
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/log/OffsetMapTest.scala:85: method + in class Int is deprecated (since 2.13.0): Adding a number and a String is deprecated. Use the string interpolation `s"$num$str"`
    println(map.size + " entries in map of size " + map.slots + " in " + ellapsedMs + " ms")
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:75: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.server:type=KafkaServer,name=ClusterId"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:139: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.controller:type=KafkaController,name=ActiveControllerCount"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.controller:type=KafkaController,name=OfflinePartitionsCount"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:141: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.controller:type=KafkaController,name=PreferredReplicaImbalanceCount"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:142: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.controller:type=KafkaController,name=GlobalTopicCount"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:143: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.controller:type=KafkaController,name=GlobalPartitionCount"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:154: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.server:type=SessionExpireListener,name=SessionState"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:155: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.server:type=SessionExpireListener,name=ZooKeeperExpiresPerSec"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:156: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(metrics.keySet.asScala.count(_.getMBeanName == "kafka.server:type=SessionExpireListener,name=ZooKeeperDisconnectsPerSec"), 1)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:161: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.getMBeanName.endsWith(metricName))
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:160: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala:171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metricGroups = Metrics.defaultRegistry.groupedMetrics(MetricPredicate.ALL).keySet.asScala
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:517: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    server.dataPlaneAcceptors.asScala.values.foreach(acceptor => assertFalse(acceptor.serverChannel.socket.isClosed))
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:813: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .allMetrics.asScala
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:827: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .allMetrics.asScala
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:837: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val kafkaMetricNames = metrics.metrics.keySet.asScala.filter(_.tags.asScala.get("listener").nonEmpty)
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:837: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val kafkaMetricNames = metrics.metrics.keySet.asScala.filter(_.tags.asScala.get("listener").nonEmpty)
                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:847: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.getType.equals("Processor"))
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:846: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val yammerMetricsNames = YammerMetrics.defaultRegistry.allMetrics.asScala
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1092: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Thread.getAllStackTraces.asScala.collect {
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1185: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
      .filterKeys(_.getMBeanName == blockedPercentMetricMBeanName).values
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1184: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val blockedPercentMetrics = YammerMetrics.defaultRegistry.allMetrics.asScala
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1209: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
           val testableSelector = new TestableSelector(config, channelBuilder, time, metrics, metricTags.asScala)
                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1253: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            metrics, time, "socket-server", metricTags.asJava, false, true, channelBuilder, MemoryPool.NONE, new LogContext()) {
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1337: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        super.channels.asScala.foreach(allChannels += _.id)
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1338: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        allDisconnectedChannels ++= super.disconnected.asScala.keys
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1339: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        cachedCompletedReceives.update(super.completedReceives.asScala)
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1340: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        cachedCompletedSends.update(super.completedSends.asScala)
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1341: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        cachedDisconnected.update(super.disconnected.asScala.toBuffer)
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1366: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    override def disconnected: java.util.Map[String, ChannelState] = cachedDisconnected.currentPollValues.toMap.asJava
                                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1368: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    override def completedSends: java.util.List[Send] = cachedCompletedSends.currentPollValues.asJava
                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/network/SocketServerTest.scala:1370: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    override def completedReceives: java.util.List[NetworkReceive] = cachedCompletedReceives.currentPollValues.asJava
                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/AclTest.scala:40: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val jsonAcls = Json.encodeAsBytes(Acl.toJsonCompatibleMap(acls).asJava)
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/auth/ZkAuthorizationTest.scala:337: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue("old consumer znode path acls are not open", consumerPathAcls.asScala.forall(TestUtils.isAclUnsecure))
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/security/token/delegation/DelegationTokenManagerTest.scala:64: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.put(KafkaConfig.SaslEnabledMechanismsProp, ScramMechanism.mechanismNames().asScala.mkString(","))
                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:44: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    req.setTopics(new CreatableTopicCollection(topics.asJava.iterator()))
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      s"${response.errorCounts().keySet().asScala.mkString(", ")},",
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      response.errorCounts().keySet().asScala.find(_.code() > 0).isEmpty)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    request.data().topics().asScala.foreach { case topic =>
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new MetadataRequest.Builder(List(topic.name()).asJava, true).build()).topicMetadata.asScala
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new MetadataRequest.Builder(List(topic.name()).asJava, true).build()).topicMetadata.asScala
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:135: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              configs.head.defaultReplicationFactor, metadataForTopic.partitionMetadata.asScala.head.replicas.size)
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:137: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            assertEquals("The topic should have the correct replication factor", replication, metadataForTopic.partitionMetadata.asScala.head.replicas.size)
                                                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:201: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new MetadataRequest.Builder(List(topic).asJava, true).build()).topicMetadata.asScala
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractCreateTopicsRequestTest.scala:201: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new MetadataRequest.Builder(List(topic).asJava, true).build()).topicMetadata.asScala
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherManagerTest.scala:38: method filterKeys in trait MapOps is deprecated (since 2.13.0): Use .view.filterKeys(f). A future version will include a strict version of this method (for now, .view.filterKeys(p).toMap).
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getName == name).values.headOption.get.
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherManagerTest.scala:38: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Metrics.defaultRegistry.allMetrics.asScala.filterKeys(_.getName == name).values.headOption.get.
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:58: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private def allMetricsNames: Set[String] = Metrics.defaultRegistry().allMetrics().asScala.keySet.map(_.getName)
                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:62: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .batches.asScala.head
       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:718: method + in trait MapOps is deprecated (since 2.13.0): Consider requiring an immutable Map or fall back to Map.concat.
        super.fetchEpochEndOffsets(partitions) + (unrequestedTp -> new EpochEndOffset(0, 0))
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:853: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val batches = partitionData.records.batches.asScala
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:913: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val fetchRequest = FetchRequest.Builder.forReplica(ApiKeys.FETCH.latestVersion, replicaId, 0, 1, fetchData.asJava)
                                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:977: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetchRequest.fetchData.asScala.map { case (partition, fetchData) =>
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AbstractFetcherThreadTest.scala:1002: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          List.empty.asJava, records))
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AddPartitionsToTxnRequestTest.scala:72: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val builder = new AddPartitionsToTxnRequest.Builder(transactionalId, producerId, producerEpoch, partitions.asJava)
                                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/AlterReplicaLogDirsRequestTest.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val request = new AlterReplicaLogDirsRequest.Builder(partitionDirs.asJava).build()
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ApiVersionsRequestTest.scala:31: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (expectedApiVersion: ApiVersion <- ApiVersionsResponse.defaultApiVersionsResponse().apiVersions.asScala) {
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:137: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(brokerId1, brokerId2).map(Integer.valueOf).asJava, LeaderAndIsr.initialZKVersion,
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:138: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(0, 1).map(Integer.valueOf).asJava, false)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:143: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          partitionStates.asJava, nodes.toSet.asJava)
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:143: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          partitionStates.asJava, nodes.toSet.asJava)
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:158: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(brokerId1, brokerId2).map(Integer.valueOf).asJava, LeaderAndIsr.initialZKVersion,
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:159: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(0, 1).map(Integer.valueOf).asJava, Seq.empty.asJava)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:159: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(0, 1).map(Integer.valueOf).asJava, Seq.empty.asJava)
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:167: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new UpdateMetadataRequest.Broker(broker.id, endPoints.asJava, broker.rack.orNull)
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          partitionStates.asJava, liverBrokers.toSet.asJava)
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          partitionStates.asJava, liverBrokers.toSet.asJava)
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/BrokerEpochIntegrationTest.scala:190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          true, Set(tp).asJava)
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestWithPolicyTest.scala:122: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      this.configs = configs.asScala.toMap
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestWithPolicyTest.scala:139: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          if (requestMetadata.configs.asScala.get(LogConfig.RetentionMsProp).fold(true)(_.toInt > 5000))
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/CreateTopicsRequestWithPolicyTest.scala:149: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        replicasAssignments.asScala.toSeq.sortBy { case (tp, _) => tp }.foreach { case (partitionId, assignment) =>
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsOnPlainTextTest.scala:45: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:64: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:73: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val renewer1 = List(SecurityUtils.parseKafkaPrincipal("User:renewer1")).asJava
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:84: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val renewer2 = List(SecurityUtils.parseKafkaPrincipal("User:renewer2")).asJava
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:91: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(token1, token2), tokens.asScala.toSet)
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:96: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(token2), tokens.asScala.toSet)
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    token1 = describeResult.delegationTokens().get().asScala.filter(dt => dt.tokenInfo().tokenId() == tokenId).head
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:118: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val renewer3 = List(SecurityUtils.parseKafkaPrincipal("Group:Renewer3")).asJava
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val unknownOwner = List(SecurityUtils.parseKafkaPrincipal("User:Unknown")).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DelegationTokenRequestsWithDisableTokenFeatureTest.scala:53: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    securityProps.asScala.foreach { case (key, value) => config.put(key.asInstanceOf[String], value) }
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:54: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val error = response.errorCounts.asScala.find(_._1 != Errors.NONE)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:55: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertTrue(s"There should be no errors, found ${response.data.responses.asScala}", error.isEmpty)
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:56: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    request.data.topicNames.asScala.foreach { topic =>
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val errorCount = response.errorCounts().asScala.foldLeft(0)(_+_._2)
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Builder(List(topic).asJava, true).build).topicMetadata.asScala
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DeleteTopicsRequestTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Builder(List(topic).asJava, true).build).topicMetadata.asScala
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      override def reconfigurableConfigs(): util.Set[String] = Set(KafkaConfig.LogCleanerThreadsProp).asJava
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicBrokerConfigTest.scala:140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      override def reconfigurableConfigs(): util.Set[String] = configs.asJava
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:227: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      configManager.ConfigChangedNotificationHandler.processNotification(Json.encodeAsBytes(jsonMap.asJava))
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      configManager.ConfigChangedNotificationHandler.processNotification(Json.encodeAsBytes(jsonMap.asJava))
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:246: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      configManager.ConfigChangedNotificationHandler.processNotification(Json.encodeAsBytes(jsonMap.asJava))
                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/DynamicConfigChangeTest.scala:255: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    configManager.ConfigChangedNotificationHandler.processNotification(Json.encodeAsBytes(jsonMap.asJava))
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/EdgeCaseRequestTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val request = ProduceRequest.Builder.forCurrentMagic(1, 10000, Map(topicPartition -> records).asJava).build()
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(shuffledTopicPartitions3, fetchResponse3.responseData.keySet.asScala.toSeq)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val responseSize3 = fetchResponse3.responseData.asScala.values.map { partitionData =>
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:144: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(shuffledTopicPartitions4, fetchResponse4.responseData.keySet.asScala.toSeq)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val nonEmptyPartitions4 = fetchResponse4.responseData.asScala.toSeq.collect {
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val batches = partitionData.records.batches.asScala.toBuffer
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:354: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val batches = partitionData.records.batches.asScala.toBuffer
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:402: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .toForget(toForget.asJava)
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:559: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    partitionData.records.records.asScala.toIndexedSeq
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:564: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(expectedPartitions, fetchResponse.responseData.keySet.asScala.toSeq)
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/FetchRequestTest.scala:577: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val batches = records.batches.asScala.toIndexedSeq
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:165: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        15L, 0.toShort, Map(invalidTopicPartition -> partitionOffsetCommitData).asJava))
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:191: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        "txnlId", 15L, 0.toShort, List(invalidTopicPartition).asJava))
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:235: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val expectedErrors = Map(topicPartition -> Errors.UNSUPPORTED_FOR_MESSAGE_FORMAT).asJava
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:254: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val expectedErrors = Map(topicPartition -> Errors.UNKNOWN_TOPIC_OR_PARTITION).asJava
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val expectedErrors = Map(tp1 -> Errors.UNSUPPORTED_FOR_MESSAGE_FORMAT, tp2 -> Errors.NONE).asJava
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val expectedErrors = Map(tp1 -> Errors.UNKNOWN_TOPIC_OR_PARTITION, tp2 -> Errors.NONE).asJava
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:408: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .setTargetTimes(targetTimes.asJava)
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:440: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0, 1), response.brokers.asScala.map(_.id).toSet)
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:451: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), response.brokers.asScala.map(_.id).toSet)
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:481: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val fetchData = Map(tp -> new FetchRequest.PartitionData(0, 0, 1000,
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:543: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            .setProtocols(new JoinGroupRequestData.JoinGroupRequestProtocolCollection(protocols.iterator.asJava))
                                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:669: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        leaveMemberList.asJava)
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:696: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        singleLeaveMember.asJava)
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:711: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new Broker(0, Seq(new EndPoint("broker0", 9092, SecurityProtocol.PLAINTEXT, plaintextListener),
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:713: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new Broker(1, Seq(new EndPoint("broker1", 9092, SecurityProtocol.PLAINTEXT, plaintextListener)).asJava,
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:717: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      0, 0, Map.empty[TopicPartition, UpdateMetadataRequest.PartitionState].asJava, brokers.asJava).build()
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:717: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      0, 0, Map.empty[TopicPartition, UpdateMetadataRequest.PartitionState].asJava, brokers.asJava).build()
                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:751: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .setTargetTimes(targetTimes.asJava)
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:810: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val replicas = List(0.asInstanceOf[Integer]).asJava
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:813: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val broker = new Broker(0, Seq(new EndPoint("broker0", 9092, SecurityProtocol.PLAINTEXT, plaintextListener)).asJava, "rack")
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:816: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      0, 0, partitions.asJava, Set(broker).asJava).build()
            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/KafkaApisTest.scala:816: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      0, 0, partitions.asJava, Set(broker).asJava).build()
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          Seq(brokerId1, brokerId2).map(Integer.valueOf).asJava, LeaderAndIsr.initialZKVersion,
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:151: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          Seq(0, 1).map(Integer.valueOf).asJava, false)
                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:154: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        ApiKeys.LEADER_AND_ISR.latestVersion, controllerId, staleControllerEpoch, servers(brokerId2).kafkaController.brokerEpoch ,partitionStates.asJava, nodes.toSet.asJava)
                                                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LeaderElectionTest.scala:154: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        ApiKeys.LEADER_AND_ISR.latestVersion, controllerId, staleControllerEpoch, servers(brokerId2).kafkaController.brokerEpoch ,partitionStates.asJava, nodes.toSet.asJava)
                                                                                                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ListOffsetsRequestTest.scala:36: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val targetTimes = Map(partition -> new ListOffsetRequest.PartitionData(
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ListOffsetsRequestTest.scala:85: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val targetTimes = Map(topicPartition -> new ListOffsetRequest.PartitionData(
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ListOffsetsRequestTest.scala:125: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val targetTimes = Map(topicPartition -> new ListOffsetRequest.PartitionData(
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ListOffsetsRequestTest.scala:161: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    response.responseData.asScala.values.foreach { partitionData =>
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:105: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionInfo = producer.partitionsFor(topic).asScala.find(_.partition() == 0).get
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val leaderServerId = producer.partitionsFor(topic).asScala.find(_.partition() == 0).get.leader().id()
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogDirFailureTest.scala:185: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      producer.partitionsFor(topic).asScala.find(_.partition() == 0).get.leader().id() != leaderServerId
                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:119: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .setTargetTimes(Map(topicPartition ->
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:120: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
        new ListOffsetRequest.PartitionData(ListOffsetRequest.LATEST_TIMESTAMP, 15)).asJava).build()
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val consumerOffsets = sendListOffsetsRequest(request).responseData.get(topicPartition).offsets.asScala
                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(topicPartition -> new FetchRequest.PartitionData(consumerOffsets.head, FetchRequest.INVALID_LOG_START_OFFSET,
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .setTargetTimes(Map(topicPartition ->
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:148: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          new ListOffsetRequest.PartitionData(ListOffsetRequest.EARLIEST_TIMESTAMP, 1)).asJava).build()
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:149: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val consumerOffsets = sendListOffsetsRequest(request).responseData.get(topicPartition).offsets.asScala
                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:65: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new Broker(brokerId, endPoints(brokerId).asJava, "rack1")
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:75: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:75: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:90: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val partitionMetadatas = topicMetadata.partitionMetadata.asScala.sortBy(_.partition)
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(partitionState.basePartitionState.isr, partitionMetadata.isr.asScala.map(_.id).asJava)
                                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:100: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(partitionState.basePartitionState.isr, partitionMetadata.isr.asScala.map(_.id).asJava)
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(partitionState.basePartitionState.replicas, partitionMetadata.replicas.asScala.map(_.id).asJava)
                                                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(partitionState.basePartitionState.replicas, partitionMetadata.replicas.asScala.map(_.id).asJava)
                                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:118: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, Seq(new EndPoint("foo", 9092, securityProtocol, listenerName)).asJava, null))
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, broker0Endpoints.asJava, null), new Broker(1, broker1Endpoints.asJava, null))
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, broker0Endpoints.asJava, null), new Broker(1, broker1Endpoints.asJava, null))
                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, broker0Endpoints.asJava, null), new Broker(1, broker1Endpoints.asJava, null))
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, broker0Endpoints.asJava, null), new Broker(1, broker1Endpoints.asJava, null))
                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:170: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:170: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:201: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, Seq(new EndPoint("foo", 9092, securityProtocol, listenerName)).asJava, null))
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:214: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:214: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:230: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0, 1), partitionMetadata.replicas.asScala.map(_.id).toSet)
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadata.isr.asScala.map(_.id).toSet)
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:246: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadataWithError.replicas.asScala.map(_.id).toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:247: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadataWithError.isr.asScala.map(_.id).toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokers = Set(new Broker(0, Seq(new EndPoint("foo", 9092, securityProtocol, listenerName)).asJava, "rack1"))
                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      partitionStates.asJava, brokers.asJava).build()
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:290: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadata.replicas.asScala.map(_.id).toSet)
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:291: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0, 1), partitionMetadata.isr.asScala.map(_.id).toSet)
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:306: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadataWithError.replicas.asScala.map(_.id).toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:307: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(0), partitionMetadataWithError.isr.asScala.map(_.id).toSet)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:316: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Seq(new EndPoint("foo", 9092, securityProtocol, ListenerName.forSecurityProtocol(securityProtocol))).asJava, ""))
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:325: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val updateMetadataRequest = new UpdateMetadataRequest.Builder(version, 2, controllerEpoch, brokerEpoch, partitionStates.asJava,
                                                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:326: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      brokers.asJava).build()
      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:343: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        new Broker(brokerId, Seq(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:354: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val updateMetadataRequest = new UpdateMetadataRequest.Builder(version, 2, controllerEpoch, brokerEpoch, partitionStates.asJava,
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataCacheTest.scala:355: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        brokers.asJava).build()
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:87: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    metadataResponse.brokers.asScala.foreach { broker =>
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata = metadataResponse.topicMetadata.asScala
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:110: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Set(internalTopic).asJava, metadataResponse.cluster.internalTopics)
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metadataResponse = sendMetadataRequest(new MetadataRequest.Builder(List[String]().asJava, true, 1.toShort).build)
                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:142: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response1 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true, ApiKeys.METADATA.latestVersion).build())
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:150: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response3 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic3, topic4).asJava, false, 4.toShort).build)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:163: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response1 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1).asJava, true).build)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:165: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata = response1.topicMetadata.asScala.head
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:175: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response1 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1, topic2).asJava, true).build)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:177: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    var topicMetadata1 = response1.topicMetadata.asScala.head
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:178: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val topicMetadata2 = response1.topicMetadata.asScala.toSeq(1)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:188: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val response2 = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic1).asJava, true).build)
                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:189: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    topicMetadata1 = response2.topicMetadata.asScala.head
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:191: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Seq(Errors.NONE), topicMetadata1.partitionMetadata.asScala.map(_.error))
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:193: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionMetadata = topicMetadata1.partitionMetadata.asScala.head
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      sendMetadataRequest(new MetadataRequest.Builder(Seq("t1").asJava, true).build(), Some(controllerSocketServer)),
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:226: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      sendMetadataRequest(new MetadataRequest.Builder(Seq("t1").asJava, true).build(), Some(notControllerSocketServer))
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:233: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Set(0, 1), topicMetadata.partitionMetadata.asScala.map(_.partition).toSet)
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:234: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      topicMetadata.partitionMetadata.asScala.foreach { partitionMetadata =>
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(assignment, partitionMetadata.replicas.asScala.map(_.id))
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:237: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        assertEquals(assignment, partitionMetadata.isr.asScala.map(_.id))
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:261: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val metadataResponse = sendMetadataRequest(new MetadataRequest.Builder(List(replicaDownTopic).asJava, true, 1.toShort).build())
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:262: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionMetadata = metadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:262: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val partitionMetadata = metadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:266: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val replicaIds = partitionMetadata.replicas.asScala.map(_.id)
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:272: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val response = sendMetadataRequest(new MetadataRequest.Builder(List(replicaDownTopic).asJava, true, 1.toShort).build())
                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:273: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val metadata = response.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:273: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val metadata = response.topicMetadata.asScala.head.partitionMetadata.asScala.head
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:274: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val replica = metadata.replicas.asScala.find(_.id == downNode.dataPlaneRequestProcessor.brokerId).get
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:280: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v0BrokerIds = v0MetadataResponse.brokers().asScala.map(_.id).toSeq
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v0PartitionMetadata = v0MetadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v0PartitionMetadata = v0MetadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:289: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v1MetadataResponse = sendMetadataRequest(new MetadataRequest.Builder(List(replicaDownTopic).asJava, true, 1.toShort).build())
                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:290: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v1BrokerIds = v1MetadataResponse.brokers().asScala.map(_.id).toSeq
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:294: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v1PartitionMetadata = v1MetadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:294: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val v1PartitionMetadata = v1MetadataResponse.topicMetadata.asScala.head.partitionMetadata.asScala.head
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:311: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val metadataResponse = sendMetadataRequest(new MetadataRequest.Builder(Seq(topic).asJava, false).build,
                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val firstPartitionMetadata = metadataResponse.topicMetadata.asScala.headOption.flatMap(_.partitionMetadata.asScala.headOption)
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:313: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val firstPartitionMetadata = metadataResponse.topicMetadata.asScala.headOption.flatMap(_.partitionMetadata.asScala.headOption)
                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:315: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            partitionMetadata.isr.asScala.sortBy(_.id)
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:347: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokersInController = controllerMetadataResponse.get.brokers.asScala.toSeq.sortBy(_.id)
                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:354: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val brokers = metadataResponse.brokers.asScala.toSeq.sortBy(_.id)
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:355: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val topicMetadata = metadataResponse.topicMetadata.asScala.toSeq.sortBy(_.topic)
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/MetadataRequestTest.scala:356: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          brokersInController == brokers && metadataResponse.topicMetadata.asScala.toSeq.sortBy(_.topic) == topicMetadata
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/OffsetsForLeaderEpochRequestTest.scala:37: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val epochs = Map(partition -> new OffsetsForLeaderEpochRequest.PartitionData(Optional.empty[Integer], 0)).asJava
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/OffsetsForLeaderEpochRequestTest.scala:63: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val epochs = Map(topicPartition -> new OffsetsForLeaderEpochRequest.PartitionData(
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/OffsetsForLeaderEpochRequestTest.scala:93: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    response.responses.asScala.values.foreach { partitionData =>
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:49: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          ProduceRequest.Builder.forCurrentMagic(-1, 3000, partitionRecords.asJava).build())
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:51: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val (tp, partitionResponse) = produceResponse.responses.asScala.head
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:83: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val produceRequest = ProduceRequest.Builder.forCurrentMagic(-1, 3000, partitionRecords.asJava).build()
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:87: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(Errors.NOT_LEADER_FOR_PARTITION, produceResponse.responses.asScala.head._2.error)
                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:110: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ProduceRequest.Builder.forCurrentMagic(-1, 3000, partitionRecords.asJava).build())
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (tp, partitionResponse) = produceResponse.responses.asScala.head
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:136: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new ProduceRequest.Builder(7, 7, -1, 3000, partitionRecords.asJava, null).build())
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:137: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (tp1, partitionResponse1) = res1.responses.asScala.head
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:145: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      new ProduceRequest.Builder(3, 3, -1, 3000, partitionRecords.asJava, null)
                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ProduceRequestTest.scala:147: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val (tp2, partitionResponse2) = res2.responses.asScala.head
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaAlterLogDirsThreadTest.scala:294: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(replicaEpochEndOffset))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaAlterLogDirsThreadTest.scala:532: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val fetchInfos = request.fetchData.asScala.toSeq
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaAlterLogDirsThreadTest.scala:582: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val fetchInfos = fetchRequest.build().fetchData.asScala.toSeq
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaAlterLogDirsThreadTest.scala:596: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val fetchInfos2 = fetchRequest2.build().fetchData.asScala.toSeq
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:107: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsets = Map(t1p0 -> new EpochEndOffset(leaderEpoch, 1),
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsets = Map(t1p0 -> new EpochEndOffset(leaderEpoch, 1), t1p1 -> new EpochEndOffset(leaderEpoch, 1)).asJava
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:297: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = Map(t1p0 -> new EpochEndOffset(leaderEpoch, 156), t2p1 -> new EpochEndOffset(leaderEpoch, 172)).asJava
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:310: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(156))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:312: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(172))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:348: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = Map(t1p0 -> new EpochEndOffset(leaderEpochAtLeader, 156),
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:362: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(156))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:365: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(initialLEO))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:404: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsets = Map(t1p0 -> new EpochEndOffset(4, 155), t1p1 -> new EpochEndOffset(4, 143)).asJava
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:418: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val nextOffsets = Map(t1p0 -> new EpochEndOffset(3, 101), t1p1 -> new EpochEndOffset(3, 102)).asJava
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:434: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(102))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:436: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(101))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:478: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsets = Map(t1p0 -> new EpochEndOffset(EpochEndOffset.UNDEFINED_EPOCH, 155), t1p1 -> new EpochEndOffset(EpochEndOffset.UNDEFINED_EPOCH, 143)).asJava
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:500: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(155))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:502: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
               truncateToCapture.getValues.asScala.contains(143))
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:533: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = Map(t1p0 -> new EpochEndOffset(EpochEndOffset.UNDEFINED_EPOCH, EpochEndOffset.UNDEFINED_EPOCH_OFFSET)).asJava
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:582: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = mutable.Map(
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:637: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = Map(
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaFetcherThreadTest.scala:689: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val offsetsReply = Map(
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:70: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition1).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:73: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition2).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:96: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition1).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:98: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition2).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition1).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:123: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition2).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition1).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerQuotasTest.scala:149: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      fetch.find(_._1 == topicPartition2).get._2.info.records.batches.asScala.size)
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:166: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokerList = Seq[Integer](0, 1).asJava
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:173: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:175: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:189: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:204: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokerList = Seq[Integer](0, 1).asJava
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:212: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:214: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokerList = Seq[Integer](0, 1).asJava
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:266: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:295: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertTrue(fetchData.records.batches.asScala.isEmpty)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:308: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertTrue(fetchData.records.batches.asScala.isEmpty)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:326: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertTrue(fetchData.records.batches.asScala.isEmpty)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:342: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(numRecords + 1, fetchData.records.batches.asScala.size)
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:354: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokerList = Seq[Integer](0, 1).asJava
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:361: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:363: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:404: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(numRecords + 1, fetchData.records.records.asScala.size)
                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:420: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val brokerList = Seq[Integer](0, 1, 2).asJava
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:428: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(new TopicPartition(topic, 0) ->
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:430: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1), new Node(2, "host2", 2)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:469: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val replicas = aliveBrokersIds.toList.map(Int.box).asJava
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:475: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Map(tp -> leaderAndIsrPartitionState).asJava,
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:476: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:565: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition0Replicas = Seq[Integer](0, 1).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:566: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition1Replicas = Seq[Integer](0, 2).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:568: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:572: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:668: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      collection.immutable.Map(new TopicPartition(topic, topicPartition) ->
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:670: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Set(new Node(followerBrokerId, "host1", 0),
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:732: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokerList = Seq[Integer](0, 1).asJava
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:740: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      collection.immutable.Map(new TopicPartition(topic, 0) ->
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:742: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:773: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val brokerList = Seq[Integer](0, 1).asJava
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:781: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      collection.immutable.Map(new TopicPartition(topic, 0) ->
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:783: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Set(new Node(0, "host1", 0), new Node(1, "host2", 1)).asJava).build()
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:845: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala ++= extraProps.asScala
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:845: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    props.asScala ++= extraProps.asScala
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:926: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val blockingSend = new ReplicaFetcherMockBlockingSend(Map(new TopicPartition(topic, topicPartition) ->
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:966: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    new LeaderAndIsrRequest.PartitionState(controllerEpoch, leaderBrokerId, leaderEpoch, aliveBrokerIds.asJava,
                                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:967: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      zkVersion, aliveBrokerIds.asJava, false)
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1115: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition0Replicas = Seq[Integer](0, 1).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1116: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition1Replicas = Seq[Integer](1, 0).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1120: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host0", 0), new Node(1, "host1", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1134: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1140: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host0", 0), new Node(1, "host1", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1171: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition0Replicas = Seq[Integer](1, 0).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1172: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val partition1Replicas = Seq[Integer](1, 0).asJava
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1182: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host0", 0), new Node(1, "host1", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1190: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        collection.immutable.Map(
                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala:1196: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Set(new Node(0, "host0", 0), new Node(1, "host1", 1)).asJava).build()
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicationQuotaManagerTest.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val leaderThrottledRate = metrics.metrics.asScala(metricName).metricValue.asInstanceOf[Double]
                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ReplicationQuotasTest.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    broker.metrics.metrics.asScala(metricName).metricValue.asInstanceOf[Double]
                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:231: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            collection.mutable.Map(tp -> MemoryRecords.withRecords(CompressionType.NONE, new SimpleRecord("test".getBytes))).asJava)
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new MetadataRequest.Builder(List(topic).asJava, true)
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:243: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            .setTargetTimes(Map(tp -> new ListOffsetRequest.PartitionData(
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:248: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Map(tp -> new LeaderAndIsrRequest.PartitionState(Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava,
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:248: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Map(tp -> new LeaderAndIsrRequest.PartitionState(Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava,
                                                                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:249: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              2, Seq(brokerId).asJava, true)).asJava,
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:250: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Set(new Node(brokerId, "localhost", 0)).asJava)
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:253: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new StopReplicaRequest.Builder(ApiKeys.STOP_REPLICA.latestVersion, brokerId, Int.MaxValue, Long.MaxValue, true, Set(tp).asJava)
                                                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val partitionState = Map(tp -> new UpdateMetadataRequest.PartitionState(
                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:257: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:257: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:257: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Int.MaxValue, brokerId, Int.MaxValue, List(brokerId).asJava, 2, Seq(brokerId).asJava, Seq.empty[Integer].asJava)).asJava
                                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:259: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          val brokers = Set(new UpdateMetadataRequest.Broker(brokerId,
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:260: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Seq(new UpdateMetadataRequest.EndPoint("localhost", 0, securityProtocol,
               ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:294: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new OffsetFetchRequest.Builder("test-group", List(tp).asJava)
                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:346: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new DescribeGroupsRequest.Builder(new DescribeGroupsRequestData().setGroups(List("test-group").asJava))
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:375: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new DeleteRecordsRequest.Builder(5000, Map(tp -> (0L: java.lang.Long)).asJava)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:384: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          OffsetsForLeaderEpochRequest.Builder.forConsumer(Map(tp ->
                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:388: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new AddPartitionsToTxnRequest.Builder("test-transactional-id", 1, 0, List(tp).asJava)
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:397: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          new WriteTxnMarkersRequest.Builder(List.empty.asJava)
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/RequestQuotaTest.scala:401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            Map.empty[TopicPartition, TxnOffsetCommitRequest.CommittedOffset].asJava)
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.subscribe(Seq(topic).asJava)
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        controllerId, 1, 0L, Map.empty.asJava, brokerAndEpochs.keys.map(_.node(listenerName)).toSet.asJava)
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerShutdownTest.scala:236: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        controllerId, 1, 0L, Map.empty.asJava, brokerAndEpochs.keys.map(_.node(listenerName)).toSet.asJava)
                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/ServerStartupTest.scala:45: method any2stringadd in object Predef is deprecated (since 2.13.0): Implicit injection of + is deprecated. Convert to String to call +
    props.put("zookeeper.connect", zooKeeperConnect + zookeeperChroot)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/StopReplicaRequestTest.scala:50: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        true, Set(tp0, tp1).asJava).build()
                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/EpochDrivenReplicationProtocolAcceptanceTest.scala:371: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        .records.batches().asScala.toSeq
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/EpochDrivenReplicationProtocolAcceptanceTest.scala:401: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assign(List(new TopicPartition(topic, 0)).asJava)
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/EpochDrivenReplicationProtocolAcceptanceTest.scala:442: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      .records.batches().asScala.toSeq.last
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:252: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
              .records.batches().iterator().asScala.forall(
                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:280: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
      val partitionData = partitions.mapValues(
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:284: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        ApiKeys.OFFSET_FOR_LEADER_EPOCH.latestVersion, partitionData.asJava, 1)
                                                       ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/epoch/LeaderEpochIntegrationTest.scala:286: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      response.responseBody.asInstanceOf[OffsetsForLeaderEpochResponse].responses.asScala
                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:58: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    mockConsumer.rebalance(List(tp1, tp2).asJava)
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/ConsoleConsumerTest.scala:59: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    mockConsumer.updateBeginningOffsets(Map(tp1 -> startOffset, tp2 -> startOffset).asJava)
                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:31: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    val consumerRecord = BaseConsumerRecord("topic", 0, 1L, now, TimestampType.CREATE_TIME, "key".getBytes, "value".getBytes)
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:46: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    val consumerRecord = BaseConsumerRecord("topic", 0, 1L, RecordBatch.NO_TIMESTAMP, TimestampType.CREATE_TIME,
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:63: class BaseConsumerRecord in package consumer is deprecated (since 0.11.0.0): This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    val consumerRecord = BaseConsumerRecord("topic", 0, 1L, now, TimestampType.CREATE_TIME, "key".getBytes,
                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/tools/MirrorMakerTest.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(1, producerRecord.headers.asScala.size)
                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:106: method hasDefiniteSize in trait Iterator is deprecated (since 2.13.0): hasDefiniteSize on Iterator is the same as isEmpty
    assertFalse(itl.hasDefiniteSize)
                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/CoreUtilsTest.scala:241: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val map = new ConcurrentHashMap[Int, AtomicInteger]().asScala
              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:49: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map[String, JsonNode]("foo" -> new TextNode("bar"), "is_enabled" -> BooleanNode.TRUE).asJava
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:101: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[]", Json.encodeAsString(Seq().asJava))
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:102: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[null]", Json.encodeAsString(Seq(null).asJava))
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:103: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[1,2,3]", Json.encodeAsString(Seq(1,2,3).asJava))
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""[1,"2",[3],null]""", Json.encodeAsString(Seq(1,"2",Seq(3).asJava,null).asJava))
                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:104: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""[1,"2",[3],null]""", Json.encodeAsString(Seq(1,"2",Seq(3).asJava,null).asJava))
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:105: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("{}", Json.encodeAsString(Map().asJava))
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:106: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":1,"b":2,"c":null}""", Json.encodeAsString(Map("a" -> 1, "b" -> 2, "c" -> null).asJava))
                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:107: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava))
                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:107: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava))
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:107: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava))
                                                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava))
                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava))
                                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:108: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", Json.encodeAsString(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava))
                                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:124: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[]", new String(Json.encodeAsBytes(Seq().asJava), StandardCharsets.UTF_8))
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:125: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[null]", new String(Json.encodeAsBytes(Seq(null).asJava), StandardCharsets.UTF_8))
                                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:126: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("[1,2,3]", new String(Json.encodeAsBytes(Seq(1,2,3).asJava), StandardCharsets.UTF_8))
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""[1,"2",[3],null]""", new String(Json.encodeAsBytes(Seq(1,"2",Seq(3).asJava,null).asJava), StandardCharsets.UTF_8))
                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:127: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""[1,"2",[3],null]""", new String(Json.encodeAsBytes(Seq(1,"2",Seq(3).asJava,null).asJava), StandardCharsets.UTF_8))
                                                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("{}", new String(Json.encodeAsBytes(Map().asJava), StandardCharsets.UTF_8))
                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:129: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":1,"b":2,"c":null}""", new String(Json.encodeAsBytes(Map("a" -> 1, "b" -> 2, "c" -> null).asJava), StandardCharsets.UTF_8))
                                                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava), StandardCharsets.UTF_8))
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava), StandardCharsets.UTF_8))
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"c":[3,4]}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "c" -> Seq(3,4).asJava).asJava), StandardCharsets.UTF_8))
                                                                                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava), StandardCharsets.UTF_8))
                                                                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava), StandardCharsets.UTF_8))
                                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("""{"a":[1,2],"b":[3,4],"c":null}""", new String(Json.encodeAsBytes(Map("a" -> Seq(1,2).asJava, "b" -> Seq(3,4).asJava, "c" -> null).asJava), StandardCharsets.UTF_8))
                                                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:144: method get in class RightProjection is deprecated (since 2.13.0): Use `Either.getOrElse` instead
    assertEquals(TestObject(foo, bar), result.right.get)
                                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:144: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
    assertEquals(TestObject(foo, bar), result.right.get)
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/JsonTest.scala:152: method get in class LeftProjection is deprecated (since 2.13.0): use `Either.swap.getOrElse` instead
    assertEquals(classOf[JsonParseException], result.left.get.getClass)
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:422: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val buf = ByteBuffer.allocate(DefaultRecordBatch.sizeInBytes(records.asJava))
                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1011: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val threadCount = Thread.getAllStackTraces.keySet.asScala.count { t =>
                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1018: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    Thread.getAllStackTraces.asScala.map { case (thread, stackTrace) =>
           ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1116: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          !Arrays.asList(new File(logDir).list()).asScala.exists { partitionDirectoryName =>
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1152: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    sslConfigs.asScala.foreach { case (k, v) => sslProps.put(k, v) }
    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1259: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val runnables = functions.map { function =>
                                    ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1264: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val futures = threadPool.invokeAll(runnables, timeoutMs, TimeUnit.MILLISECONDS).asScala
                                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1305: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records ++= polledRecords.asScala
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1334: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      records ++= consumer.poll(Duration.ofMillis(50)).asScala
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1380: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    record.headers.headers(transactionStatusKey).asScala.headOption match {
                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1413: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assignment.asScala.foreach { topicPartition =>
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1420: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    consumer.assignment.asScala.foreach { topicPartition =>
             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1431: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1431: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1437: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      }.toMap.asJava
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1439: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(new ConfigResource(ConfigResource.Type.BROKER, "") -> newConfig).asJava
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1441: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs)
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1446: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new AlterConfigOp(new ConfigEntry(k, v), opType) }.toList.asJavaCollection
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1446: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = props.asScala.map { case (k, v) => new AlterConfigOp(new ConfigEntry(k, v), opType) }.toList.asJavaCollection
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1451: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      }.toMap.asJava
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1453: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Map(new ConfigResource(ConfigResource.Type.BROKER, "") -> configEntries).asJava
         ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1459: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = topicConfigs.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                                                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1459: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configEntries = topicConfigs.asScala.map { case (k, v) => new ConfigEntry(k, v) }.toList.asJava
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1461: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val configs = Map(new ConfigResource(ConfigResource.Type.TOPIC, topic) -> newConfig).asJava
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1462: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs)
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1488: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val description = client.describeTopics(partition.map(_.topic).asJava).all.get.asScala
                                                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1488: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val description = client.describeTopics(partition.map(_.topic).asJava).all.get.asScala
                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1491: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .flatMap(_.partitions.asScala.flatMap(_.isr.asScala))
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1491: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .flatMap(_.partitions.asScala.flatMap(_.isr.asScala))
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1504: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val description = client.describeTopics(Set(partition.topic).asJava).all.get.asScala
                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1504: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        val description = client.describeTopics(Set(partition.topic).asJava).all.get.asScala
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1507: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .flatMap(_.partitions.asScala.flatMap(_.isr.asScala))
                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1507: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          .flatMap(_.partitions.asScala.flatMap(_.isr.asScala))
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1568: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val total = allMetrics.values().asScala.filter(_.metricName().name() == metricName)
                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1574: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    for (metricName <- Metrics.defaultRegistry.allMetrics.keySet.asScala)
                                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/AdminZkClientTest.scala:219: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          assertEquals(expected.split(",").toSeq, actual.asScala)
                                                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:672: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        Map[String, AnyRef](LogConfig.SegmentJitterMsProp -> "100", LogConfig.SegmentBytesProp -> "128").asJava))
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:788: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
  val initialLeaderIsrs: Map[TopicPartition, LeaderAndIsr] = initialLeaderIsrAndControllerEpochs.mapValues(_.leaderAndIsr).toMap
                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:791: method mapValues in trait MapOps is deprecated (since 2.13.0): Use .view.mapValues(f). A future version will include a strict version of this method (for now, .view.mapValues(f).toMap).
    leaderIsrAndControllerEpochs(state, zkVersion).mapValues(_.leaderAndIsr).toMap
                                                   ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1120: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val tokenInfo = new TokenInformation(tokenId, owner, renewers.asJava,
                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1173: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      zkClient.setAcl(mockPath, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala)
                                            ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1178: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    zkClient.setAcl(mockPath, ZooDefs.Ids.READ_ACL_UNSAFE.asScala)
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/KafkaZkClientTest.scala:1180: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(ZooDefs.Ids.READ_ACL_UNSAFE.asScala, zkClient.getAcl(mockPath))
                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:46: method get in class LeftProjection is deprecated (since 2.13.0): use `Either.swap.getOrElse` instead
    assertTrue(result.left.get.isInstanceOf[JsonProcessingException])
                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:53: method get in class RightProjection is deprecated (since 2.13.0): Use `Either.getOrElse` instead
    val assignmentMap = result.right.get
                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ReassignPartitionsZNodeTest.scala:53: method right in class Either is deprecated (since 2.13.0): Either is now right-biased, use methods directly on Either
    val assignmentMap = result.right.get
                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/zk/ZooKeeperTestHarness.scala:121: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    def allThreads = Thread.getAllStackTraces.keySet.asScala.map(thread => thread.getName)
                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
  private def runningZkSendThreads: collection.Set[String] = Thread.getAllStackTraces.keySet.asScala
                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:94: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val threads = Thread.getAllStackTraces.keySet.asScala.map(_.getName)
                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:114: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:146: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala,
                                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:165: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:183: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("ACL should be " + ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, getAclResponse.acl)
                                                ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:187: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals("ACL should be " + ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, getAclResponse.acl)
                                                                                     ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:193: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val setAclResponse = zooKeeperClient.handleRequest(SetAclRequest(mockPath, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, -1))
                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:207: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:222: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:225: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:228: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:239: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createRequests = (1 to 3).map(x => CreateRequest("/" + x, (x * 2).toString.getBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                                                                                                         ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:256: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:279: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createRequest = CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT)
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:299: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createRequest = CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT)
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:321: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createRequest = CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT)
                                                                               ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:352: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
            ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                        ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:404: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                  ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:421: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createResponse = zooKeeperClient.handleRequest(CreateRequest(mockPath, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                                                                                                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:426: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val createResponseChild1 = zooKeeperClient.handleRequest(CreateRequest(child1Path, Array.empty[Byte], ZooDefs.Ids.OPEN_ACL_UNSAFE.asScala, CreateMode.PERSISTENT))
                                                                                                                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:570: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      assertEquals(Seq("beforeInitializingSession", "afterInitializingSession"), stateChanges.asScala.toSeq)
                                                                                 ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:619: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      val meter = Metrics.defaultRegistry.allMetrics.asScala.collectFirst {
                                          ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:642: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      Metrics.defaultRegistry.allMetrics.asScala.collectFirst {
                              ^
/mydata/kafka/core/src/test/scala/unit/kafka/zookeeper/ZooKeeperClientTest.scala:658: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    metrics.allMetrics.keySet.asScala.foreach(metrics.removeMetric)
                       ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AbstractConsumerTest.scala:341: Passing an explicit array value to a Scala varargs method is deprecated (since 2.13.0) and will result in a defensive copy; Use the more efficient non-copying ArraySeq.unsafeWrapArray or an explicit toIndexedSeq call
        partitionAssignment = collection.immutable.Set(consumer.assignment().asScala.toArray: _*)
                                                                                     ^
2706 warnings found

> Task :kafka:core:processTestResources UP-TO-DATE
> Task :kafka:core:testClasses
> Task :kafka:core:checkstyleTest NO-SOURCE
> Task :kafka:spotlessScala UP-TO-DATE
> Task :kafka:spotlessScalaCheck UP-TO-DATE
> Task :kafka:core:copyDependantLibs
> Task :kafka:core:jar
> Task :kafka:connect:api:compileJava UP-TO-DATE
> Task :kafka:connect:api:processResources NO-SOURCE
> Task :kafka:connect:api:classes UP-TO-DATE
> Task :kafka:connect:api:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:api:jar UP-TO-DATE
> Task :kafka:connect:json:compileJava UP-TO-DATE
> Task :kafka:connect:json:processResources NO-SOURCE
> Task :kafka:connect:json:classes UP-TO-DATE
> Task :kafka:connect:json:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:json:jar UP-TO-DATE
> Task :kafka:streams:compileJava UP-TO-DATE
> Task :kafka:streams:processResources NO-SOURCE
> Task :kafka:streams:classes UP-TO-DATE
> Task :kafka:streams:copyDependantLibs
> Task :kafka:streams:jar UP-TO-DATE
> Task :kafka:streams:test-utils:compileJava UP-TO-DATE
> Task :kafka:streams:test-utils:processResources NO-SOURCE
> Task :kafka:streams:test-utils:classes UP-TO-DATE
> Task :kafka:streams:test-utils:copyDependantLibs
> Task :kafka:streams:test-utils:jar UP-TO-DATE
> Task :kafka:streams:compileTestJava
> Task :kafka:streams:processTestResources UP-TO-DATE
> Task :kafka:streams:testClasses
> Task :kafka:streams:streams-scala:compileJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/ImplicitConversions.scala:35: Unused import
import scala.language.implicitConversions
                      ^
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/FunctionsCompatConversions.scala:72: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      override def apply(value: V): JIterable[VR] = f(value).asJava
                                                     ^
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/FunctionsCompatConversions.scala:84: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
      override def apply(readOnlyKey: K, value: V): JIterable[VR] = f(readOnlyKey, value).asJava
                                                                     ^
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/StreamsBuilder.scala:76: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    inner.stream[K, V](topics.asJava, consumed)
                       ^
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KStream.scala:133: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    val kvMapper = mapper.tupled.andThen(_.map(tuple2ToKeyValue).asJava)
                                              ^
5 warnings found

> Task :kafka:streams:streams-scala:processResources NO-SOURCE
> Task :kafka:streams:streams-scala:classes
> Task :kafka:streams:streams-scala:checkstyleMain NO-SOURCE
> Task :kafka:streams:streams-scala:compileTestJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileTestScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/TopologyTest.scala:91: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          def apply(s: String): java.lang.Iterable[String] = pattern.split(s.toLowerCase).toIterable.asJava
                                                                                          ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/TopologyTest.scala:128: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
          def apply(s: String): java.lang.Iterable[String] = pattern.split(s.toLowerCase).toIterable.asJava
                                                                                          ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/WordCountTest.scala:98: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(actualWordCounts.asScala.take(expectedWordCounts.size).sortBy(_.key), expectedWordCounts.sortBy(_.key))
                 ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/WordCountTest.scala:130: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(actualWordCounts.asScala.take(expectedWordCounts.size).sortBy(_.key), expectedWordCounts.sortBy(_.key))
                 ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/WordCountTest.scala:155: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
        def apply(s: String): java.lang.Iterable[String] = pattern.split(s.toLowerCase).toIterable.asJava
                                                                                        ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/WordCountTest.scala:176: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    assertEquals(actualWordCounts.asScala.take(expectedWordCounts.size).sortBy(_.key), expectedWordCounts.sortBy(_.key))
                 ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/WordCountTest.scala:215: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
    IntegrationTestUtils.produceValuesSynchronously(inputTopic, inputValues.asJava, linesProducerConfig, mockTime)
                                                                ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/utils/StreamToTableJoinScalaIntegrationTestBase.scala:112: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                                                       userRegions.asJava,
                                                       ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/utils/StreamToTableJoinScalaIntegrationTestBase.scala:120: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                                                       userClicks.asJava,
                                                       ^
/mydata/kafka/streams/streams-scala/src/test/scala/org/apache/kafka/streams/scala/utils/StreamToTableJoinScalaIntegrationTestBase.scala:131: object JavaConverters in package collection is deprecated (since 2.13.0): Use `scala.jdk.CollectionConverters` instead
                                                                 expectedClicksPerRegion.asJava)
                                                                 ^
10 warnings found

> Task :kafka:streams:streams-scala:processTestResources UP-TO-DATE
> Task :kafka:streams:streams-scala:testClasses
> Task :kafka:streams:streams-scala:checkstyleTest NO-SOURCE
> Task :kafka:streams:streams-scala:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaJoin PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaSimple PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaAggregate PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaProperties PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaTransform PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped should create a Grouped with Serdes PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed should create a Consumed with Serdes PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped with repartition topic name should create a Grouped with Serdes, and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilWindowCloses should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilTimeLimit should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxRecords should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialized should create a Materialized with Serdes PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxBytes should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.unbounded should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig should support very long chains of factory methods PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a store name should create a Materialized with Serdes and a store name PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a window store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a key value store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced should create a Produced with Serdes PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a session store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor should create a Consumed with Serdes and timestampExtractor PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with resetPolicy should create a Consumed with Serdes and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filter a KStream should filter records satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filterNot a KStream should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > foreach a KStream should run foreach actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > peek a KStream should run peek actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > selectKey a KStream should select a new key PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > join 2 KStreams should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > filter a KTable should filter records satisfying the predicate PASSED

> Task :kafka:core:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.kstream.KTableTest > filterNot a KTable should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables with a Materialized should join correctly records and state store PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > session windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > non-windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionWithNamedRepartitionTopic PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionJava PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsMaterialized PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegion PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsJava PASSED

> Task :kafka:core:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWords PASSED

> Task :kafka:core:test

kafka.admin.TimeConversionTests > testDateTimeFormats PASSED

kafka.security.auth.ResourceTypeTest > testJavaConversions PASSED

kafka.security.auth.ResourceTypeTest > testFromString PASSED

kafka.security.auth.OperationTest > testJavaConversions PASSED

kafka.metrics.KafkaTimerTest > testKafkaTimer PASSED

kafka.security.auth.PermissionTypeTest > testJavaConversions PASSED

kafka.security.auth.PermissionTypeTest > testFromString PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartString PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartWithEmbeddedSeparators PASSED

kafka.security.auth.ResourceTest > shouldThrowOnTwoPartStringWithUnknownResourceType PASSED

kafka.security.auth.ResourceTest > shouldThrowOnBadResourceTypeSeparator PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartString PASSED

kafka.security.auth.ResourceTest > shouldRoundTripViaString PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartWithEmbeddedSeparators PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfBlankArg PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowVerifyWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowTopicsOptionWithVerify PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithThrottleOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfNoArgs PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowBrokersListWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumExecuteOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumGenerateOptions PASSED

kafka.server.DelayedOperationTest > testRequestPurge PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersAndTopicsOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowThrottleWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldUseDefaultsIfEnabled PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldAllowThrottleOptionOnExecute PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenRacks PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAware PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenReplicas PASSED

kafka.admin.AdminRackAwareTest > testSkipBrokerWithReplicaAlreadyAssigned PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAware PASSED

kafka.admin.AdminRackAwareTest > testRackAwareExpansion PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6Partitions PASSED

kafka.security.auth.AclTest > testAclJsonConversion PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithBrokers PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithTopicsOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumVerifyOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutTopicsOption PASSED

kafka.admin.AdminRackAwareTest > testReplicaAssignment PASSED

kafka.admin.AdminRackAwareTest > testGetRackAlternatedBrokerListAndAssignReplicasToBrokers PASSED

kafka.admin.AdminRackAwareTest > testMoreReplicasThanRacks PASSED

kafka.admin.AdminRackAwareTest > testSingleRack PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithRandomStartIndex PASSED

kafka.security.auth.ZkAuthorizationTest > testIsZkSecurityEnabled PASSED

kafka.admin.AdminRackAwareTest > testLargeNumberPartitionsAssignment PASSED

kafka.admin.AdminRackAwareTest > testLessReplicasThanRacks PASSED

kafka.server.DelayedOperationTest > testRequestExpiry PASSED

kafka.server.DelayedOperationTest > shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist PASSED

kafka.server.AbstractFetcherThreadTest > testSimpleFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochInfoNotAvailable PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeHigh PASSED

kafka.server.AbstractFetcherThreadTest > testFencedTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testRetryAfterUnknownLeaderEpochInLatestOffsetFetch PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLockOverride PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToEpochEndOffsetsDuringRemovePartitions PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationSkippedIfNoEpochChange PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochInTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testConsumerLagRemovedWithPartition PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeLow PASSED

kafka.server.AbstractFetcherThreadTest > testFencedOffsetResetAfterOutOfRange PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochWhileFetching PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringSuccessfulFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationThrowsExceptionIfLeaderReturnsPartitionsNotRequestedInFetchEpochs PASSED

kafka.server.AbstractFetcherThreadTest > testFencedFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochRequestNotSupported PASSED

kafka.server.DelayedOperationTest > testTryCompleteLockContention PASSED

kafka.server.DynamicConfigTest > shouldFailFollowerConfigsWithInvalidValues PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringAppending PASSED

kafka.server.AbstractFetcherThreadTest > testMetricsRemovedOnShutdown PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkDuringRemovePartitions PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringFencedFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testCorruptMessage PASSED

kafka.admin.AdminZkClientTest > testMockedConcurrentTopicCreation PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingUserUnknownConfig PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithDescribeBrokerLoggerIsNotAllowed PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsingWithDefaultClientIdQuota PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsing PASSED

kafka.server.AbstractFetcherThreadTest > testTruncation PASSED

kafka.server.FetchSessionTest > testFetchRequests PASSED

kafka.server.FetchSessionTest > testIncrementalFetchSession PASSED

kafka.server.DynamicConfigTest > shouldFailLeaderConfigsWithInvalidValues PASSED

kafka.server.FetchSessionTest > testResizeCachedSessions PASSED

kafka.server.FetchSessionTest > testSessionCache PASSED

kafka.server.FetchSessionTest > testZeroSizeFetchSession PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsLeader PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleReplicaListBasedOnProposedAssignment PASSED

kafka.server.FetchSessionTest > testNewSessionId PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForSlowFollowers PASSED

kafka.server.ReplicaManagerTest > testReplicaSelector PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingClientIdUnknownConfig PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedForMessageFormatOnHandleWriteTxnMarkersWhenMagicLowerThanRequired PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleTxnOffsetCommitRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testOffsetCommitWithInvalidPartition PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartup PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesNotLeaderForPartition PASSED

kafka.server.KafkaApisTest > testJoinGroupProtocolsOrder PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddPartitionsToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForCaughtUpFollowers PASSED

kafka.server.KafkaApisTest > testReadUncommittedConsumerListOffsetLatest PASSED

kafka.admin.ConfigCommandTest > testScramCredentials PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnDistinctListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.server.ReplicaManagerTest > testHighWaterMarkDirectoryMapping PASSED

kafka.server.ClientQuotaManagerTest > testClientIdQuotaParsing PASSED

kafka.server.KafkaApisTest > shouldAppendToLogOnWriteTxnMarkersWhenCorrectMagicVersion PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleWriteTxnMarkersRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesFencedLeaderEpoch PASSED

kafka.admin.TopicCommandTest > testAlterPartitionCount PASSED

kafka.server.KafkaApisTest > testFetchRequestV9WithNoLogConfig PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicWhenPartitionIsNotHosted PASSED

kafka.server.KafkaApisTest > rejectSyncGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.DelayedOperationTest > testTryCompleteWithMultipleThreads PASSED

kafka.server.KafkaApisTest > rejectHeartbeatRequestWhenStaticMembershipNotSupported PASSED

kafka.admin.ReassignPartitionsIntegrationTest > testRackAwareReassign PASSED

kafka.server.KafkaApisTest > testReadCommittedConsumerListOffsetLatest PASSED

kafka.server.DelayedOperationTest > shouldCancelForKeyReturningCancelledOperations PASSED

kafka.server.ReplicaManagerTest > testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate PASSED

kafka.server.DelayedOperationTest > testRequestSatisfaction PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnSharedListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.server.KafkaApisTest > testAddPartitionsToTxnWithInvalidPartition PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForTopicsEntityType PASSED

kafka.security.auth.ZkAuthorizationTest > testKafkaZkClient PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownTopicOrPartition PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddOffsetToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownLeaderEpoch PASSED

kafka.server.KafkaApisTest > testTxnOffsetCommitWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testSingleLeaveGroup PASSED

kafka.server.KafkaApisTest > rejectJoinGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedMessageFormatForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleEndTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testMultipleLeaveGroup PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicOrPartitionForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.KafkaApisTest > rejectOffsetCommitRequestWhenStaticMembershipNotSupported PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLock PASSED

kafka.admin.ConfigCommandTest > shouldFailIfBrokerEntityTypeIsNotAnInteger PASSED

kafka.server.ReplicaManagerTest > testFollowerStateNotUpdatedIfLogReadFails PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithPrefixedResource PASSED

kafka.server.ReplicaManagerTest > testFetchBeyondHighWatermarkReturnEmptyResponse PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForStuckFollowers PASSED

kafka.admin.AdminZkClientTest > testGetBrokerMetadatas PASSED

kafka.server.ReplicaManagerTest > testFetchMessagesWhenNotFollowerForOnePartition PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerDynamicConfig PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testPeriodicTokenExpiry PASSED

kafka.server.IsrExpirationTest > testIsrExpirationIfNoFetchRequestMade PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldRetainValuesEvenIfCheckpointIsRecreated PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testTokenRequestsWithDelegationTokenDisabled PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnZkCommandError PASSED

kafka.server.ReplicaManagerTest > testIllegalRequiredAcks PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceMultiplePartitions PASSED

kafka.admin.ConfigCommandTest > testUserClientQuotaOpts PASSED

kafka.server.ClientQuotaManagerTest > testQuotaViolation PASSED

kafka.security.auth.ZkAuthorizationTest > testZkAntiMigration PASSED

kafka.server.ReplicaManagerTest > testClearPurgatoryOnBecomingFollower PASSED

kafka.admin.ConfigCommandTest > shouldAddTopicConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAllAccess PASSED

kafka.security.auth.ZkAuthorizationTest > testConsumerOffsetPathAcls PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceSinglePartition PASSED

kafka.admin.ConfigCommandTest > shouldAddClientConfig PASSED

kafka.server.ThrottledChannelExpirationTest > testThrottledChannelDelay PASSED

kafka.server.ReplicaManagerTest > testOldLeaderLosesMetricsWhenReassignPartitions PASSED

kafka.server.ClientQuotaManagerTest > testRequestPercentageQuotaViolation PASSED

kafka.server.ReplicaManagerTest > testHighwaterMarkRelativeDirectoryMapping PASSED

kafka.admin.ConfigCommandTest > shouldDeleteBrokerConfig PASSED

kafka.admin.ConfigCommandTest > shouldAddDefaultBrokerDynamicConfig PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testDescribeToken PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLocalConcurrentModificationOfResourceAcls PASSED

kafka.admin.ConfigCommandTest > testQuotaConfigEntity PASSED

kafka.security.auth.ZkAuthorizationTest > testZkMigration PASSED

kafka.server.ClientQuotaManagerTest > testQuotaConfigPrecedence PASSED

kafka.server.ReplicaManagerTest > testOldFollowerLosesMetricsWhenReassignPartitions PASSED

kafka.server.ReplicaManagerTest > testUnknownReplicaSelector PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedBracketConfig PASSED

kafka.server.ThrottledChannelExpirationTest > testCallbackInvocationAfterExpiration PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testCreateToken PASSED

kafka.server.ReplicaManagerTest > testReceiveOutOfOrderSequenceExceptionWithLogStartOffset PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsFollower PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerLoggerConfig PASSED

kafka.server.ReplicaManagerTest > testDefaultReplicaSelector PASSED

kafka.server.ReplicaManagerTest > testReadCommittedFetchLimitedAtLSO PASSED

kafka.admin.ConfigCommandTest > shouldFailIfUnrecognisedEntityType PASSED

kafka.server.ClientQuotaManagerTest > testExpireQuotaSensors PASSED

kafka.server.ClientQuotaManagerTest > testClientIdNotSanitized PASSED

kafka.server.ClientQuotaManagerTest > testExpireThrottleTimeSensor PASSED

kafka.server.ReplicaManagerTest > testDelayedFetchIncludesAbortedTransactions PASSED

kafka.server.ClientQuotaManagerTest > testUserClientIdQuotaParsing PASSED

kafka.server.ClientQuotaManagerTest > testUserClientQuotaParsingIdWithDefaultClientIdQuota PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiVersionRequest PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInBootstrapServerIsNotAllowed PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testExpireToken PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfNonExistingConfigIsDeleted PASSED

kafka.admin.BrokerApiVersionsCommandTest > checkBrokerApiVersionCommandOutput PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnWildcardResource PASSED

kafka.security.auth.ZkAuthorizationTest > testChroot PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonEmptyGroup PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerQuotaConfig PASSED

kafka.server.AdvertiseBrokerTest > testBrokerAdvertiseHostNameAndPortToZK PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedEntityName PASSED

kafka.admin.ConfigCommandTest > shouldRaiseInvalidConfigurationExceptionWhenAddingInvalidBrokerLoggerConfig PASSED

kafka.metrics.MetricsTest > testMetricsReporterAfterDeletingTopic PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRenewToken PASSED

kafka.admin.ConfigCommandTest > shouldSupportCommaSeparatedValues PASSED

kafka.server.DelegationTokenRequestsWithDisableTokenFeatureTest > testDelegationTokenRequests PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithAlterBrokerLoggerIsNotAllowed PASSED

kafka.security.auth.ZkAuthorizationTest > testDelete PASSED

kafka.server.ServerShutdownTest > testConsecutiveShutdown PASSED

kafka.server.KafkaMetricReporterExceptionHandlingTest > testBothReportersAreInvoked PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedConfig PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRemoveTokenHmac PASSED

kafka.admin.ListConsumerGroupTest > testListWithUnrecognizedNewConsumerOption PASSED

kafka.server.ServerShutdownTest > testControllerShutdownDuringSend PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokerLoggersEntityType PASSED

kafka.server.DescribeLogDirsRequestTest > testDescribeLogDirsRequest PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfNonExistingGroup PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnBrokerCommandError PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyDeletionOfResourceAcls PASSED

kafka.server.DelegationTokenRequestsTest > testDelegationTokenRequests PASSED

kafka.server.ScramServerStartupTest > testAuthentications PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldReturnEmptyMapForEmptyFile PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldThrowIfVersionIsNotRecognised PASSED

kafka.admin.DelegationTokenCommandTest > testDelegationTokenRequests PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testBasicPreferredReplicaElection PASSED

kafka.server.EdgeCaseRequestTest > testMalformedHeaderRequest PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokersEntityType PASSED

kafka.admin.ReassignPartitionsCommandTest > testReassigningNonExistingPartition PASSED

kafka.admin.AdminZkClientTest > testBootstrapClientIdConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testDeleteRecursive PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopics PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresMultipleLogSegments PASSED

kafka.server.KafkaConfigTest > testAdvertiseConfigured PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeBothMsAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRetentionValid PASSED

kafka.server.KafkaConfigTest > testSpecificProperties PASSED

kafka.server.KafkaConfigTest > testDefaultCompressionType PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testOffsetsForLeaderEpochErrorCodes PASSED

kafka.server.KafkaConfigTest > testControlPlaneListenerName PASSED

kafka.server.KafkaConfigTest > testDuplicateListeners PASSED

kafka.server.KafkaConfigTest > testLogRetentionUnlimited PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testMaxConnectionsPerIpProp PASSED

kafka.server.KafkaConfigTest > testLogRollTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testInvalidInterBrokerSecurityProtocol PASSED

kafka.server.KafkaConfigTest > testAdvertiseDefaults PASSED

kafka.server.KafkaConfigTest > testBadListenerProtocol PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteExistingPropertiesWhenLimitIsAdded PASSED

kafka.server.KafkaConfigTest > testListenerDefaults PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testUncleanElectionDisabled PASSED

kafka.server.KafkaConfigTest > testListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testCaseInsensitiveListenerProtocol PASSED

kafka.server.KafkaConfigTest > testListenerAndAdvertisedListenerNames PASSED

kafka.server.KafkaConfigTest > testNonroutableAdvertisedListeners PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameAndSecurityProtocolSet PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpointFileInvalidLogDir PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldHandleMultipleLines PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpoint PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopicsAndPartitions PASSED

kafka.server.KafkaConfigTest > testFromPropsInvalid PASSED

kafka.server.KafkaConfigTest > testInvalidCompressionType PASSED

kafka.server.KafkaConfigTest > testAdvertiseHostNameDefault PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMinutesProvided PASSED

kafka.server.KafkaConfigTest > testValidCompressionType PASSED

kafka.server.KafkaConfigTest > testUncleanElectionInvalid PASSED

kafka.server.KafkaConfigTest > testListenerNamesWithAdvertisedListenerUnset PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndMsProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testUncleanLeaderElectionDefault PASSED

kafka.server.KafkaConfigTest > testInvalidAdvertisedListenersProtocol PASSED

kafka.server.KafkaConfigTest > testUncleanElectionEnabled PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleLimitFromAllBrokers PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testInvalidBrokerGiven PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFound PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicas PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementAllServers PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testPreferredReplicaJsonData PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultiplePartitions PASSED

kafka.admin.ConfigCommandTest > testDynamicBrokerConfigUpdateUsingZooKeeper PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=true] PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInZKIsAllowed PASSED

kafka.metrics.MetricsTest > testSessionExpireListenerMetrics PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegmentSize PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdWithMixOfSuccessAndError PASSED

kafka.server.KafkaConfigTest > testInterBrokerVersionMessageFormatCompatibility PASSED

kafka.server.KafkaConfigTest > testAdvertisePortDefault PASSED

kafka.server.KafkaConfigTest > testVersionConfiguration PASSED

kafka.server.KafkaConfigTest > testEqualAdvertisedListenersProtocol PASSED

kafka.admin.ConfigCommandTest > testQuotaDescribeEntities PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForClientsEntityType PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncryption PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnArgError PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclInheritance PASSED

kafka.server.DynamicBrokerConfigTest > testSecurityConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testSynonyms PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicConfigInitializationWithoutConfigsInZK PASSED

kafka.server.LeaderElectionTest > testLeaderElectionWithStaleControllerEpoch PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroup PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithSomeInvalidConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicListenerConfig PASSED

kafka.server.DynamicBrokerConfigTest > testReconfigurableValidation PASSED

kafka.server.DynamicBrokerConfigTest > testConnectionQuota PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdate PASSED

kafka.api.GroupCoordinatorIntegrationTest > testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncoderSecretChange PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithReconfigurableValidationFailure PASSED

kafka.server.EdgeCaseRequestTest > testProduceRequestWithNullClientId PASSED

kafka.log.LogSegmentTest > testRecoveryWithCorruptMessage PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptIndex PASSED

kafka.log.LogSegmentTest > testReadFromGap PASSED

kafka.log.LogSegmentTest > testReloadLargestTimestampAndNextOffsetAfterTruncation PASSED

kafka.admin.AdminZkClientTest > testTopicConfigChange PASSED

kafka.log.LogSegmentTest > testTruncate PASSED

kafka.log.LogSegmentTest > testRecoverTransactionIndex PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithLogAppendTime PASSED

kafka.log.LogSegmentTest > testReadBeforeFirstOffset PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeAppendMessage PASSED

kafka.log.LogSegmentTest > testChangeFileSuffixes PASSED

kafka.log.LogSegmentTest > testTruncateEmptySegment PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptTimeIndex PASSED

kafka.log.LogSegmentTest > shouldTruncateEvenIfOffsetPointsToAGapInTheLog PASSED

kafka.log.LogSegmentTest > testNextOffsetCalculation PASSED

kafka.log.LogSegmentTest > testFindOffsetByTimestamp PASSED

kafka.log.LogSegmentTest > testReadOnEmptySegment PASSED

kafka.log.LogSegmentTest > testReadAfterLast PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeClearShutdown PASSED

kafka.admin.LeaderElectionCommandTest > testAllTopicPartition PASSED

kafka.log.LogSegmentTest > testAppendFromFile PASSED

kafka.log.LogSegmentTest > testTruncateFull PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.LiteralAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.LiteralAclStoreTest > shouldThrowFromEncodeOnNoneLiteral PASSED

kafka.zk.LiteralAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.zk.LiteralAclStoreTest > shouldDecodeResourceUsingTwoPartLogic PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequest PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlanSingleGroupArg PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDistributedConcurrentModificationOfResourceAcls PASSED

kafka.admin.AdminZkClientTest > testManualReplicaAssignment PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartupDueToCorruptLogs PASSED

kafka.admin.AdminZkClientTest > testConcurrentTopicCreation PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=false] PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnWildcardResource PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeEarliestTime PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithDownConversionDisabled PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsUnregisteredAfterDeletingTopic PASSED

kafka.server.ProduceRequestTest > testSimpleProduceRequest PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiKeyRequest PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithTopicOption PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventWhenInterBrokerProtocolAtLeastKafkaV2 PASSED

kafka.admin.AddPartitionsTest > testMissingPartition0 PASSED

kafka.server.ServerGenerateBrokerIdTest > testBrokerMetadataOnIdCollision PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testCurrentEpochValidation PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentNonOverlappingReplicas PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroup PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExecuteThrottledReassignment PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequestErrorCode PASSED

kafka.api.PlaintextProducerSendTest > testAutoCreateTopic PASSED

kafka.admin.TopicCommandTest > testAlterInternalTopicPartitionCount PASSED

kafka.admin.LeaderElectionCommandTest > testTopicWithoutPartition PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclManagementAPIs PASSED

kafka.admin.ListConsumerGroupTest > testListConsumerGroups PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativeReplicationFactor PASSED

kafka.server.EdgeCaseRequestTest > testHeaderOnlyRequest PASSED

kafka.admin.AclCommandTest > testAclCliWithAuthorizer PASSED

kafka.admin.TopicCommandTest > testCreateWithInvalidReplicationFactor PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=true] PASSED

kafka.admin.AclCommandTest > testInvalidAuthorizerProperty PASSED

kafka.server.LogOffsetTest > testGetOffsetsForUnknownTopic PASSED

kafka.metrics.MetricsTest > testClusterIdMetric PASSED

kafka.admin.TopicCommandTest > testListTopicsWithExcludeInternal PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithCleaner PASSED

kafka.admin.AdminZkClientTest > shouldPropagateDynamicBrokerConfigs PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWildCardAcls PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochSecondTimeIfLeaderRepliesWithEpochNotKnownToFollower PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochOnFirstFetchOnlyIfLeaderEpochKnownToBoth PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToInitialFetchOffsetIfLeaderReturnsUndefinedOffset PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativePartitionCount PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonExistingGroup PASSED

kafka.server.DynamicConfigChangeTest > testProcessNotification PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterPartitionCount PASSED

kafka.admin.AdminZkClientTest > testTopicCreationWithCollision PASSED

kafka.admin.TopicCommandTest > testCreateIfNotExists PASSED

kafka.api.MetricsTest > testMetrics PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testValidCreateTopicsRequests PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchFromReplica PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralAclChangeEventWhenInterBrokerProtocolIsKafkaV2 PASSED

kafka.server.ServerShutdownTest > testCleanShutdown PASSED

kafka.server.DelegationTokenRequestsOnPlainTextTest > testDelegationTokenRequests PASSED

kafka.server.ProduceRequestTest > testCorruptLz4ProduceRequest PASSED

kafka.admin.AdminZkClientTest > testTopicCreationInZK PASSED

kafka.admin.TopicCommandTest > testCreateAlterTopicWithRackAware PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithConsumersWithoutAssignedPartitions PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testTopicAcl PASSED

kafka.admin.TopicCommandTest > testTopicDeletion PASSED

kafka.metrics.MetricsTest > testControllerMetrics PASSED

kafka.api.PlaintextProducerSendTest > testSendWithInvalidCreateTime PASSED

kafka.admin.TopicCommandTest > testDescribeIfTopicNotExists PASSED

kafka.server.DynamicConfigChangeTest > shouldParseWildcardReplicationQuotaProperties PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartitionWithinBroker PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderNotInNewReplicas PASSED

kafka.server.ServerGenerateBrokerIdTest > testAutoGenerateBrokerId PASSED

kafka.server.DeleteTopicsRequestWithDeletionDisabledTest > testDeleteRecordsRequest PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresMultipleLogSegments PASSED

kafka.admin.TopicCommandTest > testDescribeReportOverriddenConfigs PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByHigherThanLatest PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserHasAccess PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=false] PASSED

kafka.log.LogConfigTest > testGetConfigValue PASSED

kafka.log.LogConfigTest > testToRst PASSED

kafka.log.LogConfigTest > ensureNoStaticInitializationOrderDependency PASSED

kafka.log.LogConfigTest > testToEnrichedRst PASSED

kafka.log.LogConfigTest > shouldValidateThrottledReplicasConfig PASSED

kafka.log.LogConfigTest > testFromPropsEmpty PASSED

kafka.log.LogConfigTest > testInvalidCompactionLagConfig PASSED

kafka.log.LogConfigTest > testKafkaConfigToProps PASSED

kafka.log.LogConfigTest > testFromPropsInvalid PASSED

kafka.log.LogConfigTest > testToHtml PASSED

kafka.admin.AddPartitionsTest > testWrongReplicaCount PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonEmptyGroup PASSED

kafka.server.LogOffsetTest > testEmptyLogsGetOffsets PASSED

kafka.api.GroupEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.server.ReplicaFetcherThreadTest > shouldPollIndefinitelyIfLeaderReturnsAnyException PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponse PASSED

kafka.server.ReplicaFetcherThreadTest > shouldHandleExceptionFromBlockingSend PASSED

kafka.server.ReplicaFetcherThreadTest > shouldSendLatestRequestVersionsByDefault PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponseIfFollowerHasNoMoreEpochs PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochRequestIfLastEpochDefinedForSomePartitions PASSED

kafka.server.ReplicaFetcherThreadTest > shouldUseLeaderEndOffsetIfInterBrokerVersionBelow20 PASSED

kafka.server.ReplicaFetcherThreadTest > shouldMovePartitionsOutOfTruncatingLogState PASSED

kafka.server.ReplicaFetcherThreadTest > shouldCatchExceptionFromBlockingSendWhenShuttingDownReplicaFetcherThread PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFilterPartitionsMadeLeaderDuringLeaderEpochRequest PASSED

kafka.admin.TopicCommandTest > testListTopicsWithWhitelist PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterParallel PASSED

kafka.server.DynamicBrokerReconfigurationTest > testDefaultTopicConfig PASSED

kafka.server.DynamicConfigChangeTest > testDefaultClientIdQuotaConfigChange PASSED

kafka.server.LeaderElectionTest > testLeaderElectionAndEpoch PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnPrefixedResource PASSED

kafka.admin.TopicCommandTest > testListTopics PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAdminAPI PASSED

kafka.server.ServerShutdownTest > testCleanShutdownWithDeleteTopicEnabled PASSED

kafka.api.EndToEndClusterIdTest > testEndToEnd PASSED

kafka.server.ProduceRequestTest > testProduceToNonReplica PASSED

kafka.admin.TopicCommandTest > testDeleteInternalTopic PASSED

kafka.api.SaslMultiMechanismConsumerTest > testMultipleBrokerMechanisms PASSED

kafka.controller.PartitionStateMachineTest > testNonexistentPartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionErrorCodeFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToUncleanOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOfflineTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCount PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNewPartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNewPartitionTransition PASSED

kafka.admin.TopicCommandTest > testInvalidTopicLevelConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDenyTakesPrecedence PASSED

kafka.server.FetchRequestDownConversionConfigTest > testLatestFetchWithDownConversionDisabled PASSED

kafka.server.ServerStartupTest > testBrokerStateRunningAfterZK PASSED

kafka.admin.ReassignPartitionsCommandTest > testResumePartitionReassignmentThatWasCompleted PASSED

kafka.metrics.MetricsTest > testWindowsStyleTagNames PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testErrorCreateTopicsRequests PASSED

kafka.api.PlaintextProducerSendTest > testBatchSizeZero PASSED

kafka.integration.MinIsrConfigTest > testDefaultKafkaConfig PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegments PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCountDuringTopicDeletion PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionErrorCodeFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransitionForControlledShutdown PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testNoOfflinePartitionsChangeForTopicsBeingDeleted PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOfflinePartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransition PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldSetQuotaLimit PASSED

kafka.admin.TopicCommandTest > testAlterConfigs PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSingleCharacterResourceAcls PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultipleSubActions PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.admin.TopicCommandTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedDoesNotMatchExisting PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonExistingGroup PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperSessionStateMetric PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresSingleLogSegment PASSED

kafka.admin.LeaderElectionCommandTest > testPathToJsonFile PASSED

kafka.admin.TopicCommandTest > testTopicOperationsWithRegexSymbolInTopicName PASSED

kafka.zookeeper.ZooKeeperClientTest > testExceptionInBeforeInitializingSession PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFoundOverride PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTimeout PASSED

kafka.server.ReplicaFetchTest > testReplicaFetcherThread PASSED

kafka.controller.ControllerIntegrationTest > testControllerDetectsBouncedBrokers PASSED

kafka.api.TransactionsBounceTest > testBrokerFailure PASSED

kafka.admin.TopicCommandTest > testCreateWithConfigs PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNode PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNonexistentReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionIneligibleTransition PASSED

kafka.admin.AclCommandTest > testPatternTypes PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionSuccessfulToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNonexistentReplicaTransition PASSED

kafka.admin.TopicCommandTest > testAlterIfExists PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOnlinePartition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOfflinePartition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupWithReplicaWithoutLeader PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionStartedTransition PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterId PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionIneligibleToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOnlineReplicaTransition PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnection PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicOnControllerFailover PASSED

kafka.server.DynamicConfigChangeTest > testQuotaInitialization PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementPartialServers PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testEmptyAclThrowsException PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForCreation PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclExistingZNode PASSED

kafka.server.ServerGenerateBrokerIdTest > testMultipleLogDirsMetaProps PASSED

kafka.server.ServerStartupTest > testBrokerCreatesZKChroot PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeLatestTime PASSED

kafka.admin.TopicCommandTest > testCreateWithReplicaAssignment PASSED

kafka.tools.CustomDeserializerTest > checkDeserializerTopicIsNotNull PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiryDuringClose PASSED

kafka.server.MultipleListenersWithAdditionalJaasContextTest > testProduceConsume PASSED

kafka.api.PlaintextProducerSendTest > testWrongSerializer PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserWithCustomPrincipalHasAccess PASSED

kafka.server.ProduceRequestTest > testZSTDProduceRequest PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupOffsetsWithShortInitializationTimeout PASSED

kafka.admin.TopicCommandTest > testAlterWithInvalidPartitionCount PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetAclNonExistentZNode PASSED

kafka.api.PlaintextConsumerTest > testEarliestOrLatestOffsets PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteEmptyGroup PASSED

kafka.admin.TopicCommandTest > testCreate PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderInNewReplicas PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsBytesInOut PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasWhenProposedIsSubsetOfExisting PASSED

kafka.server.ServerMetricsTest > testMetricsConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAccessWithCustomPrincipal PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldUpdateQuotaLimit PASSED

kafka.server.DynamicConfigChangeTest > testUserQuotaConfigChange PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsMarkedForDeletion PASSED

kafka.admin.LeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftMinus PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindTwoMovingReplicasInSamePartition PASSED

kafka.admin.TopicCommandTest > testDeleteIfExists PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithTopicLevelOverrides PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteEntityConfigsWhenUpdatingThrottledReplicas PASSED

kafka.server.GssapiAuthenticationTest > testServerNotFoundInKerberosDatabase PASSED

kafka.admin.TopicCommandTest > testDescribe PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnWildcardResource PASSED

kafka.server.ServerGenerateBrokerIdTest > testDisableGeneratedBrokerId PASSED

kafka.server.SimpleFetchTest > testReadFromLog PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchLeaderEpochOnFirstFetchOnly PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > issuesEpochRequestFromLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToInitialFetchOffsetIfReplicaReturnsUndefinedOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToReplicaOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchOneReplicaAtATime PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.admin.TopicCommandTest > testAlterAssignment PASSED

kafka.server.DynamicConfigChangeTest > testClientIdQuotaConfigChange PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeader PASSED

kafka.server.MetadataCacheTest > getTopicMetadataWithNonSupportedSecurityProtocol PASSED

kafka.server.MetadataCacheTest > getTopicMetadataIsrNotAvailable PASSED

kafka.server.MetadataCacheTest > getTopicMetadata PASSED

kafka.server.MetadataCacheTest > getTopicMetadataReplicaNotAvailable PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeaderOldMetadataVersion PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionLeaderNotAvailable PASSED

kafka.server.MetadataCacheTest > getAliveBrokersShouldNotBeMutatedByUpdateCache PASSED

kafka.server.MetadataCacheTest > getTopicMetadataNonExistingTopics PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithLogAppendTime PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithMixOfSuccessAndError PASSED

kafka.controller.ControllerIntegrationTest > testControlledShutdown PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testChangeListenerTiming PASSED

kafka.server.ServerStartupTest > testConflictBrokerStartupWithSamePort PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeNow PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForAutoCreate PASSED

kafka.server.DynamicBrokerReconfigurationTest > testMetricsReporterUpdate PASSED

kafka.api.test.ProducerCompressionTest > testCompression[0 compressionType = none] PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testListenerName PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralWritesLiteralAclChangeEventWhenInterBrokerProtocolLessThanKafkaV2eralAclChangesForOlderProtocolVersions PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.server.MultipleListenersWithDefaultJaasContextTest > testProduceConsume PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroupWithNoMembers PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequest PASSED

kafka.server.DynamicConfigChangeTest > testUserClientIdQuotaChange PASSED

kafka.admin.AddPartitionsTest > testIncrementPartitions PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldPollIndefinitelyIfReplicaNotAvailable PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultReplication PASSED

kafka.api.SaslMultiMechanismConsumerTest > testCoordinatorFailover PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithUnrecognizedNewConsumerOption PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testThrowsOnAddPrefixedAclIfInterBrokerProtocolVersionTooLow PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicWithRecoveredFollower PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldIncreaseLeaderEpochBetweenLeaderRestarts PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToEndOffsetOfLargestCommonEpoch PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > fetchEpochsFromLeaderShouldHandleExceptionFromGetLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchNonDelayedAndNonTruncatingReplicas PASSED

kafka.api.test.ProducerCompressionTest > testCompression[1 compressionType = gzip] PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnPrefixedResource PASSED

kafka.server.ServerStartupTest > testConflictBrokerRegistration PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaProperties PASSED

kafka.server.LogOffsetTest > testGetOffsetsAfterDeleteRecords PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldTriggerReassignmentOnControllerStartup PASSED

kafka.api.AuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.server.ServerGenerateBrokerIdTest > testUserConfigAndGeneratedBrokerId PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.server.StopReplicaRequestTest > testStopReplicaRequest PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresSingleLogSegment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDescribe PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupMembersWithShortInitializationTimeout PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyModificationOfResourceAcls PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentWithOfflineReplicaHaltingProgress PASSED

kafka.api.PlaintextConsumerTest > testShrinkingTopicSubscriptions PASSED

kafka.api.SaslPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToCurrentOffset PASSED

kafka.api.test.ProducerCompressionTest > testCompression[2 compressionType = snappy] PASSED

kafka.server.DynamicConfigChangeTest > shouldParseRegardlessOfWhitespaceAroundValues PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicAlreadyMarkedAsDeleted PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithEmptyResourceName PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInconsistentReplicasAndLogDirs PASSED

kafka.api.SslProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.api.ProducerFailureHandlingTest > testCannotSendToInternalTopic PASSED

kafka.server.ServerGenerateBrokerIdTest > testConsistentBrokerIdFromUserConfigAndMetaProps PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdAllGroups PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testAuthzFailure PASSED

kafka.server.ServerStartupTest > testBrokerSelfAware PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnPrefixedResource PASSED

kafka.admin.AddPartitionsTest > testManualAssignmentOfReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldThrottleOnlyDefinedReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldSupportWildcardThrottledReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldExceedQuotaThenReturnBackBelowBoundAsTimePasses PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.server.AbstractFetcherManagerTest > testAddAndRemovePartition PASSED

kafka.server.AbstractFetcherManagerTest > testMetricFailedPartitionCount PASSED

kafka.api.ApiVersionTest > testApiVersionUniqueIds PASSED

kafka.api.ApiVersionTest > testMinSupportedVersionFor PASSED

kafka.api.ApiVersionTest > testShortVersion PASSED

kafka.api.ApiVersionTest > testApply PASSED

kafka.api.ApiVersionTest > testApiVersionValidator PASSED

kafka.log.OffsetIndexTest > lookupExtremeCases PASSED

kafka.log.OffsetIndexTest > appendTooMany PASSED

kafka.log.OffsetIndexTest > testEntry PASSED

kafka.log.OffsetIndexTest > testSanityLastOffsetEqualToBaseOffset PASSED

kafka.log.OffsetIndexTest > forceUnmapTest PASSED

kafka.log.OffsetIndexTest > testFetchUpperBoundOffset PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserQuotaConfigChange PASSED

kafka.api.PlaintextProducerSendTest > testClose PASSED

kafka.log.OffsetIndexTest > randomLookupTest PASSED

kafka.log.OffsetIndexTest > testEntryOverflow PASSED

kafka.log.OffsetIndexTest > testReopen PASSED

kafka.log.OffsetIndexTest > appendOutOfOrder PASSED

kafka.log.OffsetIndexTest > truncate PASSED

kafka.api.CustomQuotaCallbackTest > testCustomQuotaCallback PASSED

kafka.utils.PasswordEncoderTest > testEncoderConfigChange PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionLossRequestTermination PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecodeAlgorithms PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecode PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsNonExistentZNode PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionBeatsConsumerOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailure PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithNonExistingMember PASSED

kafka.coordinator.group.GroupMetadataTest > testConsumerBeatsTransactionalOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGenerationEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenDead PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGeneration PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToEmptyTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocol PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenPreparingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testFailedTxnOffsetCommitLeavesNoPendingState PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenCompletingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolRaisesIfNoMembers PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstance PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionalCommitIsAbortedAndConsumerCommitWins PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailureWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToStableTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSupportsProtocols PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenStable PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithEmptyGroupInstanceId PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolChoosesCompatibleProtocol PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnLiteralResource PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterSequential PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataNonExistentZNode PASSED

kafka.controller.ControllerIntegrationTest > testControllerEpochPersistsWhenAllBrokersDown PASSED

kafka.api.test.ProducerCompressionTest > testCompression[3 compressionType = lz4] PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.admin.LeaderElectionCommandTest > testPreferredReplicaElection PASSED

kafka.server.AddPartitionsToTxnRequestTest > shouldReceiveOperationNotAttemptedWhenOtherPartitionHasError PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaReset PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeThrowsOnNoneLiteralResource PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAdminAPI PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader PASSED

kafka.server.GssapiAuthenticationTest > testRequestIsAReplay PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroup PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testGetAclsPrincipal PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdEmptyGroup PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckOne PASSED

kafka.api.SaslMultiMechanismConsumerTest > testSimpleConsumption PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAuthorizer PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnPrefiexedResource PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoopElection PASSED

kafka.api.test.ProducerCompressionTest > testCompression[4 compressionType = zstd] PASSED

kafka.api.SslProducerSendTest > testClose PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserClientIdQuotaConfigChange PASSED

kafka.log.LogCleanerIntegrationTest > testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionTimeout PASSED

kafka.api.PlaintextProducerSendTest > testFlush PASSED

kafka.zookeeper.ZooKeeperClientTest > testBlockOnRequestCompletionFromStateChangeHandler PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventIfInterBrokerProtocolNotSet PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldSurviveFastLeaderChange PASSED

kafka.api.SaslPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.timer.TimerTest > testAlreadyExpiredTask PASSED

kafka.zookeeper.ZooKeeperClientTest > testUnresolvableConnectString PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenNonExistentZNode PASSED

kafka.admin.LeaderElectionCommandTest > testInvalidBroker PASSED

kafka.log.LogCleanerIntegrationTest > testMaxLogCompactionLag PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnWildcardResource PASSED

unit.kafka.utils.ThrottlerTest > testThrottleDesiredRate PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroup PASSED

kafka.zookeeper.ZooKeeperClientTest > testPipelinedGetData PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMs PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChildChangeHandlerForChildChange PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldSendLeaderEpochRequestAndGetAResponse PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldOnlyThrottleMovingReplicas PASSED

kafka.server.DynamicConfigChangeTest > testConfigChangeOnNonExistingTopic PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreationWithOfflineReplica PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNodeWithChildren PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopicAndPartition PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicConnectionQuota PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringLogRoll PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLegacyAclOpsNeverAffectOrReturnPrefixed PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLoadCache PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataExistingZNode PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAdvertisedListenerUpdate PASSED

kafka.api.ConsumerBounceTest > testCloseDuringRebalance PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.zookeeper.ZooKeeperClientTest > testMixedPipeline PASSED

kafka.api.TransactionsTest > testBasicTransactions PASSED

kafka.utils.timer.TimerTest > testTaskExpiration PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataExistingZNode PASSED

kafka.server.GssapiAuthenticationTest > testServerAuthenticationFailure PASSED

kafka.server.DeleteTopicsRequestTest > testValidDeleteTopicRequests PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteExistingZNode PASSED

kafka.api.SslProducerSendTest > testFlush PASSED

kafka.admin.LeaderElectionCommandTest > testPartitionWithoutTopic PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.admin.DeleteTopicTest > testIncreasePartitionCountDuringDeleteTopic PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithConsumersWithoutAssignedPartitions PASSED

kafka.api.PlaintextProducerSendTest > testSendToPartition PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentTxnGoodPathSequence PASSED

kafka.server.DynamicConfigChangeTest > testConfigChange PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetWithUnrecognizedNewConsumerOption PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiry PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataNonExistentZNode PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteNonExistentZNode PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentResumesAfterReplicaComesOnline PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExpandCluster PASSED

kafka.server.RequestQuotaTest > testUnauthorizedThrottle PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsExistingZNode PASSED

kafka.api.LogAppendTimeTest > testProduceConsume PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperStateChangeRateMetrics PASSED

kafka.log.TransactionIndexTest > testTruncate PASSED

kafka.log.TransactionIndexTest > testAbortedTxnSerde PASSED

kafka.log.TransactionIndexTest > testRenameIndex PASSED

kafka.log.TransactionIndexTest > testPositionSetCorrectlyWhenOpened PASSED

kafka.log.TransactionIndexTest > testLastOffsetCannotDecrease PASSED

kafka.log.TransactionIndexTest > testLastOffsetMustIncrease PASSED

kafka.log.TransactionIndexTest > testSanityCheck PASSED

kafka.log.TransactionIndexTest > testCollectAbortedTransactions PASSED

kafka.cluster.ReplicaTest > testCannotIncrementLogStartOffsetPastHighWatermark PASSED

kafka.cluster.ReplicaTest > testSegmentDeletionWithHighWatermarkInitialization PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDeletion PASSED

kafka.cluster.ReplicaTest > testCannotDeleteSegmentsAtOrAboveHighWatermark PASSED

kafka.api.PlaintextConsumerTest > testOffsetsForTimes PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentRandomSequence PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclNonExistentZNode PASSED

kafka.admin.LeaderElectionCommandTest > testMissingElectionType PASSED

kafka.api.PlaintextProducerSendTest > testSendOffset PASSED

kafka.api.UserClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.zookeeper.ZooKeeperClientTest > testStateChangeHandlerForAuthFailure PASSED

kafka.api.SslProducerSendTest > testSendToPartition PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.server.DynamicConfigChangeTest > testDynamicTopicConfigChange PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.server.DeleteTopicsRequestTest > testErrorDeleteTopicRequests PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.api.UserQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.api.TransactionsTest > testFencingOnSendOffsets PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidLogDir PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicListenerConnectionQuota PASSED

kafka.tools.ConsumerPerformanceTest > testDetailedHeaderMatchBody PASSED

kafka.tools.ConsumerPerformanceTest > testConfigWithUnrecognizedOption PASSED

kafka.tools.ConsumerPerformanceTest > testConfig PASSED

kafka.tools.ConsumerPerformanceTest > testNonDetailedHeaderMatchBody PASSED

kafka.admin.LeaderElectionCommandTest > testMissingTopicPartitionSelection PASSED

kafka.admin.DeleteTopicTest > testPartitionReassignmentDuringDeleteTopic PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringCheckpoint PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionDisabled PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAttemptToCreateInvalidAcls PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.server.RequestQuotaTest > testUnthrottledClient PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasEmptyReplicaList PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAtMinIsrPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.api.SslProducerSendTest > testSendOffset PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.admin.DeleteTopicTest > testDeleteNonExistingTopic PASSED

kafka.server.DeleteTopicsRequestTest > testNotController PASSED

kafka.api.ProducerFailureHandlingTest > testWrongBrokerList PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.AuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansionWithOfflineReplica PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testSingletonPartitionGiven PASSED

kafka.api.PlaintextConsumerTest > testSubsequentPatternSubscription PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAuthorizer PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.server.RequestQuotaTest > testExemptRequestTime PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDurationToEarliest PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidBrokerID PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicas PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.api.TransactionsTest > testFencingOnAddPartitions PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.admin.DeleteTopicTest > testRecreateTopicAfterDeletion PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentDuplicateEntries PASSED

kafka.server.LogDirFailureTest > brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithAssign PASSED

kafka.api.SslProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElectionWithOfflinePreferredReplica PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartition PASSED

kafka.admin.LeaderElectionCommandTest > testTopicPartition PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTime PASSED

kafka.api.ProducerFailureHandlingTest > testResponseTooLargeForReplicationWithAckAll PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclAuthorizationDenied PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnControlPlane PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.server.DynamicBrokerReconfigurationTest > testThreadPoolResize PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativeReplicationFactor PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.admin.DeleteTopicTest > testDisableDeleteTopic PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithCreateTime PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeSimpleConsumerGroup PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopic PASSED

kafka.server.LogDirFailureTest > testReplicaFetcherThreadAfterLogDirFailureOnFollower PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.api.ApiUtilsTest > testShortStringNonASCII PASSED

kafka.api.ApiUtilsTest > testShortStringASCII PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataInterBrokerProtocolVersion PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformMultipleReassignmentOperationsOverVariousTopics PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestIsNew PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicQueuedForDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSentToLiveOrShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaSentOnlyToLiveAndShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaGroupsByBroker PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataDoesNotIncludePartitionsWithoutLeaderAndIsr PASSED

kafka.controller.ControllerChannelManagerTest > testMixedDeleteAndNotDeleteStopReplicaRequests PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestDuringTopicDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataIncludesLiveOrShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicDeletionStarted PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSent PASSED

kafka.admin.DeleteTopicTest > testAddPartitionDuringDeleteTopic PASSED

kafka.api.PlaintextConsumerTest > testAsyncCommit PASSED

kafka.zk.KafkaZkClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.api.TransactionsTest > testFencingOnTransactionExpiration PASSED

kafka.admin.AclCommandTest > testAclCliWithAdminAPI PASSED

kafka.zk.KafkaZkClientTest > testCreateAndGetTopicPartitionStatesRaw PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithInvalidReplicationFactor PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfNonExistingGroup PASSED

kafka.zk.KafkaZkClientTest > testLogDirGetters PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsNotExistingGroup PASSED

kafka.zk.KafkaZkClientTest > testSetGetAndDeletePartitionReassignment PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultiplePartitionsSameAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationsDeletion PASSED

kafka.controller.ControllerIntegrationTest > testAutoPreferredReplicaLeaderElection PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldShrinkCluster PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndVersion PASSED

kafka.server.KafkaServerTest > testAlreadyRegisteredAdvertisedListeners PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.zk.KafkaZkClientTest > testGetChildren PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithConsumersWithoutAssignedPartitions PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreation PASSED

kafka.zk.KafkaZkClientTest > testSetAndGetConsumerOffset PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithAllAliveReplicas PASSED

kafka.zk.KafkaZkClientTest > testClusterIdMethods PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.server.ListOffsetsRequestTest > testListOffsetsErrorCodes PASSED

kafka.api.UserClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.zk.KafkaZkClientTest > testEntityConfigManagementMethods PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.admin.ReassignPartitionsClusterTest > testHwAfterPartitionReassignment PASSED

kafka.api.TransactionsTest > testDelayedFetchIncludesAbortedTransaction PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.zk.KafkaZkClientTest > testUpdateLeaderAndIsr PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.server.MetadataRequestTest > testIsrAfterBrokerShutDownAndJoinsBack PASSED

kafka.api.UserQuotaTest > testThrottledProducerConsumer PASSED

kafka.zk.KafkaZkClientTest > testUpdateBrokerInfo PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicDeletion PASSED

kafka.api.RackAwareAutoTopicCreationTest > testAutoCreateTopic PASSED

kafka.log.LogValidatorTest > testRecompressedBatchWithoutRecordsNotAllowed PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.log.LogValidatorTest > testCompressedV1 PASSED

kafka.log.LogValidatorTest > testCompressedV2 PASSED

kafka.log.LogValidatorTest > testDownConversionOfIdempotentRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentCompressed PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV1 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV1ToV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0Compressed PASSED

kafka.log.LogValidatorTest > testZStdCompressedWithUnavailableIBPVersion PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed PASSED

kafka.log.LogValidatorTest > testDownConversionOfTransactionalRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1Compressed PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testControlRecordsNotAllowedFromClients PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed PASSED

kafka.zk.KafkaZkClientTest > testCreateRecursive PASSED

kafka.log.LogValidatorTest > testMisMatchMagic PASSED

kafka.log.LogValidatorTest > testLogAppendTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testControlRecordsNotCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testCompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOnlyOneBatch PASSED

kafka.log.LogValidatorTest > testAllowMultiBatch PASSED

kafka.log.LogValidatorTest > testInvalidOffsetRangeAndRecordCount PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV2 PASSED

kafka.log.LogValidatorTest > testUncompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentNonCompressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2Compressed PASSED

kafka.log.LogValidatorTest > testNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV2 PASSED

kafka.log.LogValidatorTest > testRecompressionV1 PASSED

kafka.log.LogValidatorTest > testRecompressionV2 PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeInvalidJson PASSED

kafka.zk.ReassignPartitionsZNodeTest > testEncode PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeValidJson PASSED

kafka.api.PlaintextProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.log.LogCleanerManagerTest > testUndecidedTransactionalDataNotCleanable PASSED

kafka.log.LogCleanerManagerTest > testLogsUnderCleanupIneligibleForCompaction PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresInProgressPartitions PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForNone PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactLogs PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndLogTruncation PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderCleanupPolicyDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndTopicDeletion PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForShortTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogReturnsLogWithDirtiestRatio PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresBothInProgressPartitionsAndUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testDoneCleaning PASSED

kafka.log.LogCleanerManagerTest > testDoneDeleting PASSED

kafka.zk.KafkaZkClientTest > testGetConsumerOffsetNoData PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroupWithNoMembers PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicPathMethods PASSED

kafka.server.ListOffsetsRequestTest > testCurrentEpochValidation PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.api.ConsumerBounceTest > testClose PASSED

kafka.zk.KafkaZkClientTest > testSetTopicPartitionStatesRaw PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicDuringAddPartition PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignment PASSED

kafka.zk.KafkaZkClientTest > testAclManagementMethods PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.zk.KafkaZkClientTest > testPreferredReplicaElectionMethods PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSaslListeners PASSED

kafka.zk.KafkaZkClientTest > testPropagateLogDir PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations2 PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformThrottledReassignmentOverVariousTopics PASSED

kafka.api.ProducerFailureHandlingTest > testNonExistentTopic PASSED

kafka.api.TransactionsTest > testOffsetMetadataInSendOffsetsToTransaction PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndStat PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.server.MetadataRequestTest > testReplicaDownResponse PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithUnrecognizedNewConsumerOption PASSED

kafka.zk.KafkaZkClientTest > testReassignPartitionsInProgress PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansion PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.zk.KafkaZkClientTest > testCreateTopLevelPaths PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationGetters PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupStateWithShortInitializationTimeout PASSED

kafka.zk.KafkaZkClientTest > testLogDirEventNotificationsDeletion PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.server.ListOffsetsRequestTest > testResponseIncludesLeaderEpoch PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldGetEpochsFromReplica PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnUnknownTopicOrPartitionIfThrown PASSED

kafka.zk.KafkaZkClientTest > testGetLogConfigs PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnNoLeaderForPartitionIfThrown PASSED

kafka.server.MetadataRequestTest > testAutoCreateOfCollidingTopics PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveIncrementsControllerEpoch PASSED

kafka.zk.KafkaZkClientTest > testBrokerSequenceIdMethods PASSED

kafka.zk.KafkaZkClientTest > testAclMethods PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldChangeThrottleOnRerunAndRemoveOnVerify PASSED

kafka.zk.KafkaZkClientTest > testCreateSequentialPersistentPath PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateIfItAlreadyExists PASSED

kafka.zk.KafkaZkClientTest > testConditionalUpdatePath PASSED

kafka.api.PlaintextConsumerTest > testLowMaxFetchSizeForRequestAndPartition PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicZNode PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.TransactionsTest > testConsecutivelyRunInitTransactions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionEnabled PASSED

kafka.zk.KafkaZkClientTest > testDeletePath PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.zk.KafkaZkClientTest > testGetBrokerMethods PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testWithOfflinePreferredReplica PASSED

kafka.server.MetadataRequestTest > testRack PASSED

kafka.zk.KafkaZkClientTest > testCreateTokenChangeNotification PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.admin.DeleteTopicTest > testDeletingPartiallyDeletedTopic PASSED

kafka.zk.KafkaZkClientTest > testGetTopicsAndPartitions PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSubsetOfPartitions PASSED

kafka.zk.KafkaZkClientTest > testRegisterBrokerInfo PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPartitionReassignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDelete PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetBothMessagesIfQuotasAllow PASSED

kafka.zk.KafkaZkClientTest > testRetryRegisterBrokerInfo PASSED

kafka.server.ReplicaManagerQuotasTest > testCompleteInDelayedFetchWithReplicaThrottling PASSED

kafka.server.ReplicaManagerQuotasTest > shouldExcludeSubsequentThrottledPartitions PASSED

kafka.zk.KafkaZkClientTest > testConsumerOffsetPath PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetNoMessagesIfQuotasExceededOnSubsequentPartitions PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursiveWithControllerEpochVersionCheck PASSED

kafka.zk.KafkaZkClientTest > testControllerManagementMethods PASSED

kafka.server.ReplicaManagerQuotasTest > shouldIncludeInSyncThrottledReplicas PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicSelectedGroups PASSED

kafka.zk.KafkaZkClientTest > testTopicAssignmentMethods PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicCreation PASSED

kafka.zk.KafkaZkClientTest > testPropagateIsrChanges PASSED

kafka.server.MetadataRequestTest > testIsInternal PASSED

kafka.api.TransactionsTest > testReadCommittedConsumerShouldNotSeeUndecidedData PASSED

kafka.zk.KafkaZkClientTest > testControllerEpochMethods PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursive PASSED

kafka.server.FetchRequestTest > testZStdCompressedRecords PASSED

kafka.api.DescribeAuthorizedOperationsTest > testClusterAuthorizedOperations PASSED

kafka.zk.KafkaZkClientTest > testGetTopicPartitionStates PASSED

kafka.server.DynamicBrokerReconfigurationTest > testTrustStoreAlter PASSED

kafka.zk.KafkaZkClientTest > testCreateConfigChangeNotification PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testZkAclsDisabled PASSED

kafka.controller.ControllerIntegrationTest > testControllerRejectControlledShutdownRequestWithStaleBrokerEpoch PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroups PASSED

kafka.api.ProducerFailureHandlingTest > testInvalidPartition PASSED

kafka.zk.KafkaZkClientTest > testDelegationTokenMethods PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnStopPolling PASSED

kafka.server.FetchRequestTest > testFetchRequestToNonReplica PASSED

kafka.api.ProducerFailureHandlingTest > testSendAfterClosed PASSED

kafka.server.MetadataRequestTest > testControllerId PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckZero PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonOffsetCommitGroup PASSED

kafka.api.TransactionsTest > testFencingOnSend PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoPartitionsGiven PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInRevocation PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.ConsumerBounceTest > testSeekAndCommitWithBrokerFailures PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToZonedDateTime PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithExcludeInternal PASSED

kafka.controller.ControllerIntegrationTest > testBackToBackPreferredReplicaLeaderElections PASSED

kafka.server.MetadataRequestTest > testAliveBrokersWithNoTopics PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonExistingGroup PASSED

kafka.api.ProducerFailureHandlingTest > testPartitionTooLargeForReplicationWithAckAll PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.DescribeAuthorizedOperationsTest > testTopicAuthorizedOperations PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithAssign PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.controller.ControllerIntegrationTest > testEmptyCluster PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[0] PASSED

kafka.server.MetadataRequestTest > testAllTopicsRequest PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.ConsumerBounceTest > testConsumerReceivesFatalExceptionWhenGroupPassesMaxSize PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[0] PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[0] PASSED

kafka.server.FetchRequestTest > testBrokerRespectsPartitionsOrderAndSizeLimits PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.json.JsonValueTest > testJsonObjectIterator PASSED

kafka.utils.json.JsonValueTest > testDecodeLong PASSED

kafka.utils.json.JsonValueTest > testAsJsonObject PASSED

kafka.utils.json.JsonValueTest > testDecodeDouble PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.utils.json.JsonValueTest > testDecodeOption PASSED

kafka.utils.json.JsonValueTest > testDecodeString PASSED

kafka.utils.json.JsonValueTest > testJsonValueToString PASSED

kafka.utils.json.JsonValueTest > testAsJsonObjectOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArrayOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArray PASSED

kafka.utils.json.JsonValueTest > testJsonValueHashCode PASSED

kafka.utils.json.JsonValueTest > testDecodeInt PASSED

kafka.utils.json.JsonValueTest > testDecodeMap PASSED

kafka.utils.json.JsonValueTest > testDecodeSeq PASSED

kafka.utils.json.JsonValueTest > testJsonObjectGet PASSED

kafka.utils.json.JsonValueTest > testJsonValueEquals PASSED

kafka.utils.json.JsonValueTest > testJsonArrayIterator PASSED

kafka.utils.json.JsonValueTest > testJsonObjectApply PASSED

kafka.utils.json.JsonValueTest > testDecodeBoolean PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldNotAbortExpiredTransactionsThatHaveAPendingStateTransition PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnInitPidWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenPidDosentMatchMapped PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnConcurrentTxnRequestOnEndTxnRequestWhenStatusIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnEndTxnWhenIsNotCoordinatorForId PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidTnxProduceEpochOnAddPartitionsWhenEpochsAreDifferent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidRequestWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidPidMappingOnAddPartitionsToTransactionWhenTransactionalIdNotPresent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenTxnIdDoesntExist PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldUseLastEpochToFenceWhenEpochsAreExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithProducerFencedOnEndTxnWhenEpochIsNotSameAsTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteCommitTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortTransactionOnHandleInitPidWhenExistingTransactionInOngoingState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnAddPartitionsWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnAddPartitionsWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteAbortAndResultIsNotAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsOngoing PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingEmptyTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteAbortAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareCommitToLogOnEndTxnWhenStatusIsOngoingAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendNewMetadataToLogOnAddPartitionsWhenPartitionsAdded PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnEndTxnWhenCoordinatorIsLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithErrorsNoneOnAddPartitionWhenNoErrorsAndPartitionsTheSame PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareAbortToLogOnEndTxnWhenStatusIsOngoingAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAcceptInitPidAndReturnNextPidWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRemoveTransactionsForPartitionOnEmigration PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortExpiredTransactionsInOngoingStateAndBumpEpoch PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteCommitAndResultIsNotCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteCommitAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionsOnAddPartitionsWhenStateIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldGenerateNewProducerIdIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnInitPidWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionOnAddPartitionsWhenStateIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldInitPidWithEpochZeroForNewTransactionalId PASSED

kafka.api.TransactionsTest > testFencingOnCommit PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicasAfterBrokerShutdown PASSED

kafka.utils.CoreUtilsTest > testGenerateUuidAsBase64 PASSED

kafka.utils.CoreUtilsTest > testAbs PASSED

kafka.utils.CoreUtilsTest > testReplaceSuffix PASSED

kafka.utils.CoreUtilsTest > testCircularIterator PASSED

kafka.utils.CoreUtilsTest > testReadBytes PASSED

kafka.utils.CoreUtilsTest > testCsvList PASSED

kafka.utils.CoreUtilsTest > testReadInt PASSED

kafka.utils.CoreUtilsTest > testAtomicGetOrUpdate PASSED

kafka.utils.CoreUtilsTest > testUrlSafeBase64EncodeUUID PASSED

kafka.utils.CoreUtilsTest > testCsvMap PASSED

kafka.utils.CoreUtilsTest > testInLock PASSED

kafka.utils.CoreUtilsTest > testTryAll PASSED

kafka.utils.CoreUtilsTest > testSwallow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerAfterEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testInitializeEpoch PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerId PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testBumpEpochNotAllowedIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInOngoingState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerNotAllowedIfItWouldOverflow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testNormalEpochBump PASSED

kafka.server.DynamicBrokerReconfigurationTest > testUncleanLeaderElectionEnable PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPreferredReplicaElection PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativePartitionCount PASSED

kafka.server.MetadataRequestTest > testClusterIdIsValid PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithRoundRobinAssignor PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForInvalidTopic PASSED

kafka.api.UserClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.SslProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.api.DescribeAuthorizedOperationsTest > testConsumerGroupAuthorizedOperations PASSED

kafka.log.LogTest > testLogDelete PASSED

kafka.log.LogTest > testAbortedTransactionSpanningMultipleSegments PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliest PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndCleanShutdown PASSED

kafka.controller.TopicDeletionManagerTest > testBrokerFailureAfterDeletionStarted PASSED

kafka.controller.TopicDeletionManagerTest > testInitialization PASSED

kafka.log.LogTest > testProducerIdMapTruncateFullyAndStartAt PASSED

kafka.server.FetchRequestTest > testZStdCompressedTopic PASSED

kafka.controller.TopicDeletionManagerTest > testBasicDeletion PASSED

kafka.controller.TopicDeletionManagerTest > testDeletionWithBrokerOffline PASSED

kafka.log.LogTest > testAppendBelowExpectedOffsetThrowsException PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingTopic PASSED

kafka.log.LogTest > shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted PASSED

kafka.log.LogTest > testMultipleProducerIdsPerMemoryRecord PASSED

kafka.log.LogTest > testSplitOnOffsetOverflow PASSED

kafka.log.LogTest > testAppendWithNoTimestamp PASSED

kafka.tools.ConsoleConsumerTest > shouldLimitReadsToMaxMessageLimit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseGroupIdFromBeginningGivenTogether PASSED

kafka.log.LogTest > testFetchUpToHighWatermark PASSED

kafka.log.LogTest > testLastStableOffsetWithMixedProducerData PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnOffsetWithoutPartition PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.tools.ConsoleConsumerTest > shouldStopWhenOutputCheckErrorFails PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning PASSED

kafka.log.LogTest > testReadWithMinMessage PASSED

kafka.tools.ConsoleConsumerTest > shouldResetUnConsumedOffsetsBeforeExit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseConfigsFromFile PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetLatest PASSED

kafka.tools.ConsoleConsumerTest > groupIdsProvidedInDifferentPlacesMustMatch PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnGroupIdAndPartitionGivenTogether PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnUnrecognizedNewConsumerOption PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithNumericOffset PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetEarliest PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithStringOffset PASSED

kafka.tools.ConsoleConsumerTest > testCustomPropertyShouldBePassedToConfigureMethod PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerValidConfig PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithNoOffsetReset PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfNonExistingGroup PASSED

kafka.api.UserQuotaTest > testQuotaOverrideDelete PASSED

kafka.server.MetadataRequestTest > testNoTopicsRequest PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWhenTopicDoesntExist PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElection PASSED

kafka.log.LogTest > testIndexRebuild PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.log.LogTest > testZombieCoordinatorFencedEmptyTransaction PASSED

kafka.log.LogTest > testLogRolls PASSED

kafka.log.LogTest > testMessageSizeCheck PASSED

kafka.log.LogTest > testAsyncDelete PASSED

kafka.log.LogTest > testLogRollAfterLogHandlerClosed PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testFirstUnstableOffsetWithTransactionalData PASSED

kafka.log.LogTest > shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetAfterSegmentDeletion PASSED

kafka.log.LogTest > testAppendToTransactionIndexFailure PASSED

kafka.log.LogTest > testParseTopicPartitionNameForInvalidPartition PASSED

kafka.log.LogTest > testUpdateProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > testPeriodicProducerIdExpiration PASSED

kafka.log.LogTest > testReadOutOfRange PASSED

kafka.log.LogTest > testAppendWithOutOfOrderOffsetsThrowsException PASSED

kafka.log.LogTest > testProducerIdExpirationOnSegmentDeletion PASSED

kafka.log.LogTest > shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete PASSED

kafka.log.LogTest > testHighWatermarkMaintenance PASSED

kafka.log.LogTest > testFetchOffsetByTimestampIncludesLeaderEpoch PASSED

kafka.log.LogTest > testLogReinitializeAfterManualDelete PASSED

kafka.log.LogTest > testFirstUnstableOffsetNoTransactionalData PASSED

kafka.log.LogTest > testReadAtLogGap PASSED

kafka.log.LogTest > testSizeForLargeLogs PASSED

kafka.log.LogTest > testTimeBasedLogRoll PASSED

kafka.log.LogTest > testProducerIdMapOffsetUpdatedForNonIdempotentData PASSED

kafka.log.LogTest > testMultipleProducersWithDuplicatesInSingleAppend PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDynamicMessageFormatDowngrade PASSED

kafka.log.LogTest > testNonSequentialAppend PASSED

kafka.log.LogTest > testLoadEmptyLog PASSED

kafka.log.LogTest > testMessageSetSizeCheck PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDowngradeInAppendedMessages PASSED

kafka.log.LogTest > testRecoverOnlyLastSegment PASSED

kafka.log.LogTest > testIndexResizingAtTruncation PASSED

kafka.log.LogTest > testCompactedTopicConstraints PASSED

kafka.log.LogTest > followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache PASSED

kafka.log.LogTest > testRebuildTransactionalState PASSED

kafka.log.LogTest > testProducerIdMapTruncateToWithNoSnapshots PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecordV1 PASSED

kafka.log.LogTest > testDuplicateAppendToFollower PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultipleBrokersGiven PASSED

kafka.log.LogTest > testThatGarbageCollectingSegmentsDoesntChangeOffset PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndNoCleanShutdown PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroupWithNoMembers PASSED

kafka.log.LogTest > testAppendAndReadWithSequentialOffsets PASSED

kafka.log.LogTest > testOffsetFromFile PASSED

kafka.log.LogTest > testProducerSnapshotAfterSegmentRollOnAppend PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase1 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase2 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase3 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase4 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase5 PASSED

kafka.log.LogTest > testFullTransactionIndexRecovery PASSED

kafka.log.LogTest > testAppendEmptyLogBelowLogStartOffsetThrowsException PASSED

kafka.log.LogTest > testDegenerateSegmentSplitWithOutOfRangeBatchLastOffset PASSED

kafka.log.LogTest > shouldDeleteSizeBasedSegments PASSED

kafka.log.LogTest > testRebuildProducerStateWithEmptyCompactedBatch PASSED

kafka.log.LogTest > testParseTopicPartitionNameForNull PASSED

kafka.log.LogTest > testLogDeletionAfterDeleteRecords PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.utils.TopicFilterTest > testWhitelists PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownCurrentMessageFormat PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testExceedProducerIdLimit PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testGetProducerId PASSED

kafka.log.LogTest > testAppendAndReadWithNonSequentialOffsets PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog PASSED

kafka.log.LogTest > testDuplicateAppends PASSED

kafka.log.LogTest > testRollSegmentThatAlreadyExists PASSED

kafka.log.LogTest > testParseTopicPartitionNameForExistingInvalidDir PASSED

kafka.log.LogTest > testTruncateToEmptySegment PASSED

kafka.log.LogTest > testLoadPartitionDirWithNoSegmentsShouldNotThrow PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingSeparator PASSED

kafka.log.LogTest > testParseTopicPartitionNameWithPeriodForDeletedTopic PASSED

kafka.log.LogTest > testRecoverLastSegmentWithNoSnapshots PASSED

kafka.log.LogTest > testFetchUpToLastStableOffset PASSED

kafka.log.LogTest > testLeaderEpochCacheCreatedAfterMessageFormatUpgrade PASSED

kafka.log.LogTest > testFetchUpToLogEndOffset PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetMidSegment PASSED

kafka.server.FetchRequestTest > testDownConversionFromBatchedToUnbatchedRespectsOffset PASSED

kafka.server.MetadataRequestTest > testAutoCreateTopicWithInvalidReplicationFactor PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.log.LogTest > testCorruptIndexRebuild PASSED

kafka.log.LogTest > shouldDeleteTimeBasedSegmentsReadyToBeDeleted PASSED

kafka.api.UserClientIdQuotaTest > testThrottledRequest PASSED

kafka.log.LogTest > testReadWithTooSmallMaxLength PASSED

kafka.log.LogTest > testOverCompactedLogRecovery PASSED

kafka.log.LogTest > testBogusIndexSegmentsAreRemoved PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterStaticMessageFormatDowngrade PASSED

kafka.log.LogTest > testCompressedMessages PASSED

kafka.log.LogTest > testAppendMessageWithNullPayload PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentPartitionsOfDifferentSize PASSED

kafka.api.TransactionsTest > testMultipleMarkersOneLeader PASSED

kafka.log.LogTest > testCorruptLog PASSED

kafka.server.KafkaMetricReporterClusterIdTest > testClusterIdPresent PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchLatestEpochOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotUpdateEpochAndStartOffsetIfItDidNotChange PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeAllExistingGroups PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesBetweenEpochBoundaryWhenRemovingNewest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnLogEndOffsetIfLatestEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToEarly PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsFollowerReceivesManyMessages PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldTruncateIfMatchingEpochButEarlierStartingOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteLogEndOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUndefinedOffsetIfUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsLeadersChangeManyTimes PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldSupportEpochsThatDoNotStartFromZero PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldAddEpochAndMessageOffsetToCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesOnEpochBoundaryWhenRemovingLatestEntries PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateSavedOffsetWhenOffsetToClearToIsBetweenEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryTailIfUndefinedPassed PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecorded PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPersistEpochsBetweenInstances PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToFirstOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldGetFirstOffsetOfSubsequentEpochWhenOffsetRequestedForPreviousEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceOffsetsIncreaseMonotonically PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest2 PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearEarliestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPreserveResetOffsetOnClearEarliestIfOneExists PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnInvalidOffsetIfEpochIsRequestedWhichIsNotCurrentlyTracked PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingStartOffsets PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchEndOffsetOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliestAndUpdateItsOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearAllEntries PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearLatestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryHeadIfUndefinedPassed PASSED

kafka.log.LogTest > testLogRecoversToCorrectOffset PASSED

kafka.log.LogTest > testReopenThenTruncate PASSED

kafka.log.LogTest > testZombieCoordinatorFenced PASSED

kafka.log.LogTest > testOldProducerEpoch PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownV1 PASSED

kafka.log.LogTest > testDegenerateSegmentSplit PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingPartition PASSED

kafka.log.LogTest > testParseTopicPartitionNameForEmptyName PASSED

kafka.log.LogTest > testOffsetSnapshot PASSED

kafka.log.LogTest > testOpenDeletesObsoleteFiles PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.log.LogTest > shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testLogDeleteDirName PASSED

kafka.log.LogTest > testDeleteOldSegments PASSED

kafka.api.ConsumerBounceTest > testSubscribeWhenTopicUnavailable PASSED

kafka.log.LogTest > testRebuildTimeIndexForOldMessages PASSED

kafka.log.LogTest > testProducerIdMapTruncateTo PASSED

kafka.log.LogTest > testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint PASSED

kafka.log.LogTest > testLogEndLessThanStartAfterReopen PASSED

kafka.log.LogTest > testLogRecoversForLeaderEpoch PASSED

kafka.log.LogTest > testWriteLeaderEpochCheckpointAfterDirectoryRename PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecord PASSED

kafka.log.LogTest > testSizeBasedLogRoll PASSED

kafka.log.LogTest > testRebuildProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize PASSED

kafka.log.LogTest > testTransactionIndexUpdatedThroughReplication PASSED

kafka.log.LogTest > testTimeBasedLogRollJitter PASSED

kafka.log.LogTest > testParseTopicPartitionName PASSED

kafka.log.LogTest > testRecoveryOfSegmentWithOffsetOverflow PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsMidSegment PASSED

kafka.log.LogTest > testInitializationOfProducerSnapshotsUpgradePath PASSED

kafka.log.LogTest > shouldDeleteStartOffsetBreachedSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testSkipLoadingIfEmptyProducerStateBeforeTruncation PASSED

kafka.log.LogTest > testTruncateTo PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfNewMessageFormatAndCleanShutdown PASSED

kafka.log.LogTest > shouldApplyEpochToMessageOnAppendIfLeader PASSED

kafka.api.UserQuotaTest > testThrottledRequest PASSED

kafka.log.LogTest > testLogDeletionAfterClose PASSED

kafka.log.OffsetMapTest > testClear PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsOnSegment PASSED

kafka.log.OffsetMapTest > testGetWhenFull PASSED

kafka.log.OffsetMapTest > testBasicValidation PASSED

kafka.log.LogTest > testCleanShutdownFile PASSED

kafka.log.LogTest > testTransactionIndexUpdated PASSED

kafka.log.LogTest > testBuildTimeIndexWhenNotAssigningOffsets PASSED

kafka.common.InterBrokerSendThreadTest > shouldCreateClientRequestAndSendWhenNodeIsReady PASSED

kafka.common.InterBrokerSendThreadTest > testFailingExpiredRequests PASSED

kafka.common.InterBrokerSendThreadTest > shouldCallCompletionHandlerWithDisconnectedResponseWhenNodeNotReady PASSED

kafka.common.InterBrokerSendThreadTest > shouldNotSendAnythingWhenNoRequests PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnBrokerChange PASSED

kafka.server.FetchRequestTest > testFetchRequestV2WithOversizedMessage PASSED

kafka.server.MetadataRequestTest > testPreferredReplica PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.controller.ControllerFailoverTest > testHandleIllegalStateException PASSED

kafka.tools.ReplicaVerificationToolTest > testReplicaBufferVerifyChecksum PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerStickyAssignment PASSED

kafka.server.MetadataRequestTest > testClusterIdWithRequestVersion1 PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlan PASSED

kafka.api.AdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreAlter PASSED

kafka.server.MetadataRequestTest > testAutoTopicCreation PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[0] PASSED

kafka.api.PlaintextConsumerTest > testPauseStateNotPreservedByRebalance PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationForOfflineReplicas PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.ExtendedAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowFromEncodeOnLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowIfConstructedWithLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.server.FetchRequestTest > testDownConversionWithConnectionFailure PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.api.TransactionsTest > testCommitTransactionTimeout PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithConsumersWithoutAssignedPartitions PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursFetchSizeIfLargeRecordNotFirst PASSED

kafka.api.ConsumerBounceTest > testRollingBrokerRestartsWithSmallerMaxGroupSizeConfigDisruptsBigGroup PASSED

kafka.api.ConsumerBounceTest > testConsumptionWithBrokerFailures SKIPPED

kafka.log.TimeIndexTest > testTruncate PASSED

kafka.log.TimeIndexTest > testEntry PASSED

kafka.log.TimeIndexTest > testAppend PASSED

kafka.log.TimeIndexTest > testEntryOverflow PASSED

kafka.log.TimeIndexTest > testLookUp PASSED

kafka.log.TimeIndexTest > testSanityCheck PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupWithShortInitializationTimeout PASSED

kafka.server.FetchRequestTest > testCurrentEpochValidation PASSED

kafka.api.AuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToSpecificOffset PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > offsetsShouldNotGoBackwards PASSED

kafka.api.AdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreDescribeUsingAdminClient PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSslListener SKIPPED

kafka.api.SslConsumerTest > testCoordinatorFailover PASSED

kafka.server.FetchRequestTest > testCreateIncrementalFetchWithPartitionsInError PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.network.SocketServerTest > testGracefulClose PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.api.PlaintextConsumerTest > testSeek PASSED

kafka.network.SocketServerTest > controlThrowable PASSED

kafka.network.SocketServerTest > testRequestMetricsAfterStop PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.api.TransactionsTest > testSendOffsets PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsExplicit PASSED

kafka.KafkaTest > testKafkaSslPasswordsWithSymbols PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsDefault PASSED

kafka.KafkaTest > testKafkaSslPasswords PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgs PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheEnd PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsOnly PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheBegging PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.controller.ControllerEventManagerTest > testEventQueueTime PASSED

kafka.controller.ControllerEventManagerTest > testEventThatThrowsException PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateAlterTopicWithRackAware PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.controller.ControllerEventManagerTest > testSuccessfulEvent PASSED

kafka.controller.ControllerEventManagerTest > testMetricsCleanedOnClose PASSED

kafka.tools.DumpLogSegmentsTest > testPrintDataLog PASSED

kafka.tools.DumpLogSegmentsTest > testDumpIndexMismatches PASSED

kafka.tools.DumpLogSegmentsTest > testDumpTimeIndexErrors PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.network.SocketServerTest > testConnectionIdReuse PASSED

kafka.network.SocketServerTest > testClientDisconnectionUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testProcessorMetricsTags PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testConnectionId PASSED

kafka.network.SocketServerTest > testBrokerSendAfterChannelClosedUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testNoOpAction PASSED

kafka.network.SocketServerTest > simpleRequest PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.network.SocketServerTest > closingChannelException PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommaSeparatedRegex PASSED

kafka.server.FetchRequestTest > testFetchRequestV4WithReadCommitted PASSED

kafka.network.SocketServerTest > testIdleConnection PASSED

kafka.network.SocketServerTest > testClientDisconnectionWithStagedReceivesFullyProcessed PASSED

kafka.network.SocketServerTest > testZeroMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testMetricCollectionAfterShutdown PASSED

kafka.network.SocketServerTest > testSessionPrincipal PASSED

kafka.network.SocketServerTest > configureNewConnectionException PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIpOverrides PASSED

kafka.network.SocketServerTest > testControlPlaneRequest PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.network.SocketServerTest > processNewResponseException PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldFollowLeaderEpochBasicWorkflow PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftPlus PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithNoMembers PASSED

kafka.network.SocketServerTest > testConnectionRateLimit PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.network.SocketServerTest > processCompletedSendException PASSED

kafka.api.SslConsumerTest > testSimpleConsumption PASSED

kafka.utils.JsonTest > testParseToWithInvalidJson PASSED

kafka.utils.JsonTest > testParseTo PASSED

kafka.utils.JsonTest > testJsonParse PASSED

kafka.utils.JsonTest > testLegacyEncodeAsString PASSED

kafka.utils.JsonTest > testEncodeAsBytes PASSED

kafka.utils.JsonTest > testEncodeAsString PASSED

kafka.network.SocketServerTest > processDisconnectedException PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhileProducerFenced PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testCompleteTransitionWhenAppendSucceeded PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToUnknownError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldReturnNotCooridnatorErrorIfTransactionIdPartitionNotOwned PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testValidateTransactionTimeout PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsRemoveNonExistentTopics PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedCommitState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldOnlyConsiderTransactionsInTheOngoingStateToAbort PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteAbortExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhilePendingStateChanged PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testLoadAndRemoveTransactionsForPartition PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareCommitTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorLoadingError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveOngoingTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAddGetPids PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedAbortState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveEmptyExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPendingStateNotResetOnRetryAppend PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveExpiredTransactionalIdsIfLogAppendFails PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareAbortTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteCommmitExpiredTransactionalIds PASSED

kafka.server.DynamicBrokerReconfigurationTest > testLogCleanerConfig PASSED

kafka.network.SocketServerTest > sendCancelledKeyException PASSED

kafka.network.SocketServerTest > processCompletedReceiveException PASSED

kafka.network.SocketServerTest > testSocketsCloseOnShutdown PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsThrowTimeoutException PASSED

kafka.network.SocketServerTest > pollException PASSED

kafka.network.SocketServerTest > testSslSocketServer PASSED

kafka.network.SocketServerTest > tooBigRequestIsRejected PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[0] PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandler PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithHeaders PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[1] PASSED

kafka.api.ClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[1] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[1] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testTransactionalProducerWithAuthenticationFailure PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithNullGroupId PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.api.AdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAuthenticationFailure PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLatest PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.api.PlaintextConsumerTest > testPositionAndCommit PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.admin.TopicCommandWithAdminClientTest > testTopicDeletion PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationSuccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanMaxPartitionFetchBytes PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testProducerWithAuthenticationFailure PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByLowerThanEarliest PASSED

kafka.api.PlaintextConsumerTest > testUnsubscribeTopic PASSED
kafka.api.DelegationTokenEndToEndAuthorizationTest.testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl failed, log available in /mydata/kafka/core/build/reports/testOutput/kafka.api.DelegationTokenEndToEndAuthorizationTest.testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl.test.stdout

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl FAILED
    org.scalatest.exceptions.TestFailedException: Consumed 0 records before timeout instead of the expected 1 records

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationFailure PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithLeaderThrottle PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.api.AdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnClose PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[1] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.api.ClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.utils.ReplicationUtilsTest > testUpdateLeaderAndIsr PASSED

kafka.coordinator.group.MemberMetadataTest > testMatchesSupportedProtocols PASSED

kafka.coordinator.group.MemberMetadataTest > testHasValidGroupInstanceId PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadata PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadataRaisesOnUnsupportedProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteForPreferredProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteRaisesOnNoSupportedProtocols PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanFetchMaxBytes PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testKafkaAdminClientWithAuthenticationFailure PASSED

kafka.api.AdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaults PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.server.ReplicationQuotasTest > shouldThrottleOldSegments PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerWithAuthenticationFailure PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[0] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[1] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[2] PASSED

kafka.api.AdminClientIntegrationTest > testClose PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[3] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[4] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[5] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[6] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[7] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[8] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[9] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[10] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[11] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[12] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[13] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[14] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[15] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[16] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[17] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[18] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[19] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[20] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[21] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[22] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[23] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[24] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[25] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[26] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[27] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[28] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[29] PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerDefaultAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicAllGroups PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnClose PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[1] PASSED

kafka.api.AdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[2] PASSED

kafka.integration.UncleanLeaderElectionTest > testTopicUncleanLeaderElectionEnable PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[2] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[2] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWithWrapAroundBatchRecord PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencing PASSED

kafka.log.ProducerStateManagerTest > testTruncate PASSED

kafka.log.ProducerStateManagerTest > testLoadFromTruncatedSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testRemoveExpiredPidsOnReload PASSED

kafka.log.ProducerStateManagerTest > testOutOfSequenceAfterControlRecordEpochBump PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterTruncation PASSED

kafka.log.ProducerStateManagerTest > testTakeSnapshot PASSED

kafka.log.ProducerStateManagerTest > testDeleteSnapshotsBefore PASSED

kafka.log.ProducerStateManagerTest > testAppendEmptyControlBatch PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterEviction PASSED

kafka.log.ProducerStateManagerTest > testNoValidationOnFirstEntryWhenLoadingLog PASSED

kafka.log.ProducerStateManagerTest > testLoadFromEmptySnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducersWithOngoingTransactionsDontExpire PASSED

kafka.log.ProducerStateManagerTest > testBasicIdMapping PASSED

kafka.log.ProducerStateManagerTest > updateProducerTransactionState PASSED

kafka.log.ProducerStateManagerTest > testRecoverFromSnapshot PASSED

kafka.log.ProducerStateManagerTest > testPrepareUpdateDoesNotMutate PASSED

kafka.log.ProducerStateManagerTest > testSequenceNotValidatedForGroupMetadataTopic PASSED

kafka.log.ProducerStateManagerTest > testLastStableOffsetCompletedTxn PASSED

kafka.log.ProducerStateManagerTest > testLoadFromSnapshotRemovesNonRetainedProducers PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffset PASSED

kafka.log.ProducerStateManagerTest > testTxnFirstOffsetMetadataCached PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencedAfterReload PASSED

kafka.log.ProducerStateManagerTest > testControlRecordBumpsEpoch PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithoutProducerStateOnReplica PASSED

kafka.log.ProducerStateManagerTest > testLoadFromCorruptSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWrapAround PASSED

kafka.log.ProducerStateManagerTest > testPidExpirationTimeout PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithSequenceGapsOnReplica PASSED

kafka.log.ProducerStateManagerTest > testAppendTxnMarkerWithNoProducerState PASSED

kafka.log.ProducerStateManagerTest > testOldEpochForControlRecord PASSED

kafka.log.ProducerStateManagerTest > testTruncateAndReloadRemovesOutOfRangeSnapshots PASSED

kafka.log.ProducerStateManagerTest > testStartOffset PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceInvalidWrapAround PASSED

kafka.log.ProducerStateManagerTest > testTruncateHead PASSED

kafka.log.ProducerStateManagerTest > testNonTransactionalAppendWithOngoingTransaction PASSED

kafka.log.ProducerStateManagerTest > testSkipSnapshotIfOffsetUnchanged PASSED

kafka.cluster.PartitionTest > testMakeLeaderDoesNotUpdateEpochCacheForOldFormats PASSED

kafka.cluster.PartitionTest > testIsrExpansion PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testIsrNotShrunkIfUpdateFails PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testIsrNotExpandedIfUpdateFails PASSED

kafka.cluster.PartitionTest > testAddAndRemoveMetrics PASSED

kafka.cluster.PartitionTest > testListOffsetIsolationLevels PASSED

kafka.cluster.PartitionTest > testAppendRecordsAsFollowerBelowLogStartOffset PASSED

kafka.cluster.PartitionTest > testFetchLatestOffsetIncludesLeaderEpoch PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeShrinkIsr PASSED

kafka.cluster.PartitionTest > testMonotonicOffsetsAfterLeaderChange PASSED

kafka.cluster.PartitionTest > testMakeFollowerWithNoLeaderIdChange PASSED

kafka.cluster.PartitionTest > testAppendRecordsToFollowerWithNoReplicaThrowsException PASSED

kafka.cluster.PartitionTest > testFollowerDoesNotJoinISRUntilCaughtUpToOffsetWithinCurrentLeaderEpoch PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfFollowerCaughtUpToLogEnd PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForLeader PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testAtMinIsr PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForFollower PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeReportOverriddenConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.cluster.PartitionTest > testDelayedFetchAfterAppendRecords PASSED

kafka.cluster.PartitionTest > testMakeLeaderUpdatesEpochCache PASSED

kafka.cluster.PartitionTest > testUseCheckpointToInitializeHighWatermark PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplicaDifferentBaseOffsets PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfPreviousFetchIsCaughtUp PASSED

kafka.cluster.PartitionTest > testGetReplica PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplica PASSED

kafka.cluster.PartitionTest > testUpdateFollowerFetchState PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.api.PlaintextConsumerTest > testListTopics PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDuration PASSED

kafka.api.AuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testClose PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndPartitionCount PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.api.PlaintextConsumerTest > testExpandingTopicSubscriptions PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithFollowerThrottle PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.AdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabled PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.api.PlaintextConsumerTest > testInterceptors PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLocalDateTime PASSED

kafka.api.ClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithEmptyGroupId PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testAcls PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopic PASSED

kafka.api.AdminClientIntegrationTest > testForceClose PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.api.ClientIdQuotaTest > testThrottledRequest PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArg PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseSingleArg PASSED

kafka.utils.CommandLineUtilsTest > testParseArgs PASSED

kafka.utils.CommandLineUtilsTest > testParseArgsWithMultipleDelimiters PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultValueIfNotExist PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgWithNoDelimiter PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgAsValid PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsNotOverwriteExisting PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[2] PASSED

kafka.api.PlaintextConsumerTest > testPatternUnsubscription PASSED

kafka.api.AdminClientIntegrationTest > testListNodes PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.api.AuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentTransactionExpiration PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentRandomSequences PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentLoadUnloadPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AdminClientIntegrationTest > testDelayedClose PASSED

kafka.api.AuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.api.PlaintextConsumerTest > testGroupConsumption PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.api.AdminClientIntegrationTest > testLongTopicNames PASSED

kafka.api.PlaintextConsumerTest > testPartitionsFor PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.AdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnRebalance PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabled PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionInvalidTopicOverride PASSED

kafka.api.PlaintextConsumerTest > testInterceptorsWithWrongKeyValue PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadWithMaxPollRecords PASSED

kafka.api.AdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[2] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[3] PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[3] PASSED

kafka.api.AuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[3] PASSED

kafka.api.PlaintextConsumerTest > testHeaders PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabledByTopicOverride PASSED

kafka.api.AdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInAssignment PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.api.AdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithWhitelist PASSED

kafka.api.PlaintextConsumerTest > testHeadersSerializerDeserializer PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.api.PlaintextConsumerTest > testDeprecatedPollBlocksForAssignment PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.AdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[3] PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testForceClose PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerRoundRobinAssignment PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsAllTopicsAllGroups PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabledByTopicOverride PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMoreAssignmentThanPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testListNodes PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.api.PlaintextConsumerTest > testPartitionPauseAndResume PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDelayedClose PASSED

kafka.api.PlaintextConsumerTest > testQuotaMetricsNotCreatedIfNoQuotasConfigured PASSED

kafka.api.AdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[3] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[4] PASSED

kafka.api.AdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopicsAndPartitions PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[4] PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithSubscribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLongTopicNames PASSED

kafka.api.AdminClientIntegrationTest > testAclOperations PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.api.AdminClientIntegrationTest > testDescribeCluster PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithLogAppendTime PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsWhenReadCommitted PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnCloseAfterWakeup PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopics PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.api.PlaintextConsumerTest > testMaxPollRecords PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[4] PASSED

kafka.api.AdminClientIntegrationTest > testCreatePartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopics PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestBeforeSaslHandshakeRequest PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.PlaintextConsumerTest > testAutoOffsetReset PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestAfterSaslHandshakeRequest PASSED

kafka.api.AdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagWithMaxPollRecords PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.integration.MetricsDuringTopicCreationDeletionTest > testMetricsDuringTopicCreateDelete PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.utils.timer.TimerTaskListTest > testAll PASSED

kafka.server.CreateTopicsRequestTest > testValidCreateTopicsRequests PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithEmptyControlBatch PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithTombstones PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetCommitted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithoutGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupNotExists PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadEmptyGroupWithOffsets PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValue PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetCommitsFromMultipleProducers PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptySimpleGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetWithExplicitRetention PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetFromOldCommit PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testAddGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithLargeGroupMetadataRecord PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemovalWithLogAppendTime PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsTransactionWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetWriteAfterGroupRemoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetsWithoutGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroupWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsConsumerWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testloadGroupWithStaticMember PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAborted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testMetrics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithNoneExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testReadFromOldGroupMetadata PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAppendFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationOfSimpleConsumer PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemoval PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithTombstone PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsAndGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadedWithPendingCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreGroupErrorMapping PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupAndOffsetsFromDifferentSegments PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationSemantics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireGroupWithOffsetsOnly PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testDoNotLoadAbortedTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptyGroup PASSED

kafka.api.AdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.api.PlaintextConsumerTest > testFetchInvalidOffset PASSED

kafka.api.AdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.server.CreateTopicsRequestTest > testErrorCreateTopicsRequests PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitIntercept PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteInternalTopic PASSED

kafka.server.CreateTopicsRequestTest > testInvalidCreateTopicsRequests PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursMaxPartitionFetchBytesIfLargeRecordNotFirst PASSED

kafka.server.CreateTopicsRequestTest > testNotController PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignment PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigs PASSED

kafka.api.PlaintextConsumerTest > testCommitSpecifiedOffsets PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testInvalidTopicLevelConfig PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testValidAlterConfigs PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithSubscribe PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigsDueToPolicy PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[0] PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[1] PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.api.PlaintextConsumerTest > testCommitMetadata PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[2] PASSED

kafka.api.PlaintextConsumerTest > testHeadersExtendedSerializerDeserializer PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[3] PASSED

kafka.api.AdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[4] PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMorePartitionsThanAssignment PASSED

kafka.api.PlaintextConsumerTest > testRoundRobinAssignment PASSED

kafka.api.AdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.PlaintextConsumerTest > testPatternSubscription PASSED

kafka.api.AuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.api.AdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.api.PlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.AdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.api.PlaintextConsumerTest > testSimpleConsumption PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionLastIsrShuttingDown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithNoLiveIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithEmptyIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionAllIsrSimultaneouslyShutdown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionEnabled PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionDisabled PASSED

kafka.tools.ConsoleProducerTest > testParseKeyProp PASSED

kafka.tools.ConsoleProducerTest > testInvalidConfigs PASSED

kafka.tools.ConsoleProducerTest > testValidConfigs PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.api.AdminClientIntegrationTest > testConsumerGroups PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.log.LogManagerTest > testFileReferencesAfterAsyncDelete PASSED

kafka.log.LogManagerTest > testCreateLogWithLogDirFallback PASSED

kafka.log.LogManagerTest > testCleanupSegmentsToMaintainSize PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithRelativeDirectory PASSED

kafka.log.LogManagerTest > testCreateLogWithInvalidLogDir PASSED

kafka.log.LogManagerTest > testGetNonExistentLog PASSED

kafka.log.LogManagerTest > testTwoLogManagersUsingSameDirFails PASSED

kafka.log.LogManagerTest > testLeastLoadedAssignment PASSED

kafka.log.LogManagerTest > testCleanupExpiredSegments PASSED

kafka.log.LogManagerTest > testCheckpointRecoveryPoints PASSED

kafka.log.LogManagerTest > testCheckpointForOnlyAffectedLogs PASSED

kafka.log.LogManagerTest > testTimeBasedFlush PASSED

kafka.log.LogManagerTest > testCreateLog PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactPolicy PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithTrailingSlash PASSED

kafka.log.LogManagerTest > testCreateAndDeleteOverlyLongTopic PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactDeletePolicy PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeCluster PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testProcessNotification PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testSwallowsProcessorException PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderReplicatedPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreatePartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnavailablePartitions PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithUnspecifiedReplicationFactorAndPartitionsWithZkClient PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.SchedulerTest > testMockSchedulerNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testUnscheduleProducerTask PASSED

kafka.utils.SchedulerTest > testMockSchedulerPeriodicTask PASSED

kafka.utils.SchedulerTest > testNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testRestart PASSED

kafka.utils.SchedulerTest > testReentrantTaskInMockScheduler PASSED

kafka.utils.SchedulerTest > testPeriodicTask PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyProtocolType PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoinedFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteNonEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForStaticMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRebalanceCompletesBeforeMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberHeartbeatLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersWrongCoordinatorBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupStaticMemberWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupRebalancing PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailureInSyncGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testGenerationIdIncrementsOnRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSecondJoinInconsistentProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersValidBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsLeaderWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithExplicitUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForDynamicMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetsRetentionMsIntegerOverflow PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesStableGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatDuringRebalanceCausesRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSingleLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsMultipleProducersOneGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSecondMemberPartiallyJoinAndTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberCommitOffsetWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooLarge PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooSmall PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupEmptyAssignment PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupShouldReceiveErrorIfGroupOverMaxSize PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetWithDefaultGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchAllOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedLeaderShouldRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalArgumentAsMissingOldMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberTimesOut PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesRebalancingGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFollowerAfterLeader PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroupWithStoredOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetsAfterGroupIsEmpty PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetForUnknownPartition PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitAndFetchOffsetsWithEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentProtocolType PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsOneProducerMultipleGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownGroupBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalStateAsUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldGetDifferentStaticMemberIdAfterEachRejoin PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetFromUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWithFencedInstanceId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinAsFirstMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetNotCoordinatorForGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetCommitDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberLeaveWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithUnknownInstanceIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberSyncAsLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBatchLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedFollowerDoesNotRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidJoinGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayRebalanceUptoRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeoutDuringRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithFollowerIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testNewMemberJoinExpiration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsWithAbort PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupLeaderAfterFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupInactiveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsIgnoreSpuriousCommit PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMembersLeavesGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupNotCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBasicFetchTxnOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersFencedInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidHeartbeat PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRequestHandlingWhileLoadingInProgress PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testIfExistsAndIfNotExistsOptionsInvalidWithBootstrapServers PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndReplicationFactor PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.ShutdownableThreadTest > testShutdownWhenCalledAfterThreadStart PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSaveForLaterWhenLeaderUnknownButNotAvailable PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateEmptyMapWhenNoRequestsOutstanding PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCreateMetricsOnStarting PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldAbortAppendToLogOnEndTxnWhenNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRetryAppendToLogOnEndTxnWhenCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCompleteAppendToLogOnEndTxnWhenSendMarkersSucceed PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateRequestPerPartitionPerBroker PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRemoveMarkersForTxnPartitionWhenPartitionEmigrated PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSkipSendMarkersWhenLeaderNotFound PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithReplicaAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithInvalidPartitionCount PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumerGroups PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.utils.LoggingTest > testLog4jControllerIsRegistered PASSED

kafka.utils.LoggingTest > testLogName PASSED

kafka.utils.LoggingTest > testLogNameOverride PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotLeaderForPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRemoveTopicPartitionFromWaitingSetOnUnsupportedForMessageFormat PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenRecordListTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenInvalidProducerEpoch PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenInvalidRequiredAcksError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldReEnqueuePartitionsWhenBrokerDisconnected PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNoErrors PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenCorruptMessageError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorLoading PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWheCoordinatorEpochFenced PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenUnknownError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorEpochChanged PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenUnknownTopicOrPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasAfterAppendError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenMessageTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionIfErrorCodeNotAvailableForPid PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreate PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldNotAllowDivergentLogs PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > logsShouldNotDivergeOnUncleanLeaderElections PASSED

kafka.api.SaslSslConsumerTest > testCoordinatorFailover PASSED

kafka.api.SaslSslConsumerTest > testSimpleConsumption PASSED

kafka.log.LogCleanerTest > testCleanCorruptMessageSet PASSED

kafka.log.LogCleanerTest > testAbortedTransactionSpanningSegments PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsLastSequenceEvenIfTransactionAborted PASSED

kafka.log.LogCleanerTest > testBuildOffsetMap PASSED

kafka.log.LogCleanerTest > testAbortMarkerRemoval PASSED

kafka.log.LogCleanerTest > testBuildOffsetMapFakeLarge PASSED

kafka.log.LogCleanerTest > testSegmentGrouping PASSED

kafka.log.LogCleanerTest > testCorruptMessageSizeLargerThanBytesAvailable PASSED

kafka.log.LogCleanerTest > testSizeTrimmedForPreallocatedAndCompactedTopic PASSED

kafka.log.LogCleanerTest > testCommitMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsProducerLastSequence PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithAbort PASSED

kafka.log.LogCleanerTest > testDeletedBatchesWithNoMessagesRead PASSED

kafka.log.LogCleanerTest > testSegmentGroupingWithSparseOffsets PASSED

kafka.log.LogCleanerTest > testLargeMessage PASSED

kafka.log.LogCleanerTest > testCleanEmptyControlBatch PASSED

kafka.log.LogCleanerTest > testRecoveryAfterCrash PASSED

kafka.log.LogCleanerTest > testCleanTombstone PASSED

kafka.log.LogCleanerTest > testDuplicateCheckAfterCleaning PASSED

kafka.log.LogCleanerTest > testAbortMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testCleaningWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testLogToClean PASSED

kafka.log.LogCleanerTest > testCleaningWithDeletes PASSED

kafka.log.LogCleanerTest > testClientHandlingOfCorruptMessageSet PASSED

kafka.log.LogCleanerTest > testCleanWithTransactionsSpanningSegments PASSED

kafka.log.LogCleanerTest > testEmptyBatchRemovalWithSequenceReuse PASSED

kafka.log.LogCleanerTest > testCommittedTransactionSpanningSegments PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSize PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSizeWithCorruptHeader PASSED

kafka.log.LogCleanerTest > testCleanSegments PASSED

kafka.log.LogCleanerTest > testBasicTransactionAwareCleaning PASSED

kafka.log.LogCleanerTest > testSegmentGroupingFollowingLoadOfZeroIndex PASSED

kafka.log.LogCleanerTest > testLogToCleanWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testBuildPartialOffsetMap PASSED

kafka.log.LogCleanerTest > testCleaningWithUnkeyedMessages PASSED

kafka.log.LogCleanerTest > testSegmentWithOffsetOverflow PASSED

kafka.log.LogCleanerTest > testPartialSegmentClean PASSED

kafka.log.LogCleanerTest > testCommitMarkerRemoval PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithConcurrentSegmentDeletion PASSED

kafka.cluster.BrokerEndPointTest > testEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testHashAndEquals PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNoRack PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonFutureVersion PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNullRack PASSED

kafka.cluster.BrokerEndPointTest > testBrokerEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV1 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV2 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV3 PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitionsMixed PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigOptWithBootstrapServers PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithUnspecifiedPartitionCount PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteIfExists PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignment PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithStaleBrokerEpoch PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithCorrectBrokerEpoch PASSED

kafka.server.BrokerEpochIntegrationTest > testReplicaManagerBrokerEpochMatchesWithZk PASSED

kafka.server.BrokerEpochIntegrationTest > testControllerBrokerEpochCacheMatchesWithZk PASSED

kafka.server.DelayedFetchTest > testCompleteWhenFollowerLaggingHW PASSED

kafka.server.DelayedFetchTest > testFetchWithFencedEpoch PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldReadWriteMessages PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldThrowExceptionWriteInvalidTxn PASSED

> Task :kafka:core:test FAILED
> Task :testScala_2_13 FAILED
> Task :kafka:generator:compileJava UP-TO-DATE
> Task :kafka:generator:processResources NO-SOURCE
> Task :kafka:generator:classes UP-TO-DATE
> Task :kafka:clients:processMessages UP-TO-DATE
> Task :kafka:clients:compileJava UP-TO-DATE
> Task :kafka:clients:processResources UP-TO-DATE
> Task :kafka:clients:classes UP-TO-DATE
> Task :kafka:clients:determineCommitId UP-TO-DATE
> Task :kafka:clients:createVersionFile
> Task :kafka:clients:jar UP-TO-DATE
> Task :kafka:clients:compileTestJava UP-TO-DATE
> Task :kafka:clients:processTestResources UP-TO-DATE
> Task :kafka:clients:testClasses UP-TO-DATE
> Task :kafka:core:compileJava NO-SOURCE

> Task :kafka:core:compileScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1170: value DEFAULT_TIMESTAMP in object OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
          offsetAndMetadata.expireTimestamp.getOrElse(OffsetCommitRequest.DEFAULT_TIMESTAMP))
                                                                          ^
/mydata/kafka/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala:1319: value DEFAULT_TIMESTAMP in object OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
        if (expireTimestamp == OffsetCommitRequest.DEFAULT_TIMESTAMP)
                                                   ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:428: value DEFAULT_TIMESTAMP in object OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
              case OffsetCommitRequest.DEFAULT_TIMESTAMP => currentTimestamp
                                       ^
/mydata/kafka/core/src/main/scala/kafka/server/AdminManager.scala:444: match may not be exhaustive.
It would fail on the following inputs: APPEND, SUBTRACT
      alterConfigOp.opType() match {
                          ^
/mydata/kafka/core/src/main/scala/kafka/admin/ConfigCommand.scala:318: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
      adminClient.alterConfigs(Map(configResource -> newConfig).asJava, alterOptions).all().get(60, TimeUnit.SECONDS)
                  ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:864: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
      new ListOffsetResponse.PartitionData(Errors.TOPIC_AUTHORIZATION_FAILED, List[JLong]().asJava)
      ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:872: value maxNumOffsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
          maxNumOffsets = partitionData.maxNumOffsets,
                                        ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:875: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
        (topicPartition, new ListOffsetResponse.PartitionData(Errors.NONE, offsets.map(JLong.valueOf).asJava))
                         ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:884: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaApis.scala:887: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          (topicPartition, new ListOffsetResponse.PartitionData(Errors.forException(e), List[JLong]().asJava))
                           ^
/mydata/kafka/core/src/main/scala/kafka/server/KafkaConfig.scala:231: value DEFAULT_SASL_ENABLED_MECHANISMS in object SaslConfigs is deprecated: see corresponding Javadoc for more information.
  val SaslEnabledMechanisms = SaslConfigs.DEFAULT_SASL_ENABLED_MECHANISMS
                                          ^
/mydata/kafka/core/src/main/scala/kafka/server/ReplicaFetcherThread.scala:234: value offsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
          responsePartitionData.offsets.get(0)
                                ^
/mydata/kafka/core/src/main/scala/kafka/tools/ConsoleConsumer.scala:573: method checksum in class ConsumerRecord is deprecated: see corresponding Javadoc for more information.
    output.println(topicStr + "checksum:" + consumerRecord.checksum)
                                                           ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:197: class BaseConsumerRecord in package consumer is deprecated: This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    private def toBaseConsumerRecord(record: ConsumerRecord[Array[Byte], Array[Byte]]): BaseConsumerRecord =
                                                                                        ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:417: class BaseConsumerRecord in package consumer is deprecated: This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    def handle(record: BaseConsumerRecord): util.List[ProducerRecord[Array[Byte], Array[Byte]]]
                       ^
/mydata/kafka/core/src/main/scala/kafka/tools/MirrorMaker.scala:421: class BaseConsumerRecord in package consumer is deprecated: This class has been deprecated and will be removed in a future release. Please use org.apache.kafka.clients.consumer.ConsumerRecord instead.
    override def handle(record: BaseConsumerRecord): util.List[ProducerRecord[Array[Byte], Array[Byte]]] = {
                                ^
16 warnings found
Note: /mydata/kafka/core/src/main/scala/kafka/tools/StreamsResetter.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

> Task :kafka:core:processResources NO-SOURCE
> Task :kafka:core:classes
> Task :kafka:core:checkstyleMain
> Task :kafka:core:compileTestJava NO-SOURCE

> Task :kafka:core:compileTestScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:395: value DEFAULT_TIMESTAMP in object OffsetCommitRequest is deprecated: see corresponding Javadoc for more information.
                  .setCommitTimestamp(OffsetCommitRequest.DEFAULT_TIMESTAMP)
                                                          ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2009: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    val alterResult = client.alterConfigs(Map(brokerLoggerConfigResource -> new Config(alterLogLevelsEntries)).asJava)
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2062: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2094: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2134: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientIntegrationTest.scala:2162: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:125: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    var alterResult = client.alterConfigs(Map(
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AdminClientWithPoliciesIntegrationTest.scala:155: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    alterResult = client.alterConfigs(Map(
                         ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:900: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(50)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:947: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(0)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/AuthorizerIntegrationTest.scala:973: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
    consumer.poll(0)
             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/BaseProducerSendTest.scala:122: method checksum in class RecordMetadata is deprecated: see corresponding Javadoc for more information.
          assertNotEquals(metadata.checksum(), 0)
                                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:101: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
      val records = consumer.poll(100).asScala
                             ^
/mydata/kafka/core/src/test/scala/integration/kafka/api/ConsumerBounceTest.scala:395: method poll in class KafkaConsumer is deprecated: see corresponding Javadoc for more information.
          consumer.poll(0L)
                   ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1211: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs).all.get
                ^
/mydata/kafka/core/src/test/scala/integration/kafka/server/DynamicBrokerReconfigurationTest.scala:1229: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClients.head.alterConfigs(configs).all.get
                      ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:120: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
        new ListOffsetRequest.PartitionData(ListOffsetRequest.LATEST_TIMESTAMP, 15)).asJava).build()
        ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:121: value offsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
    val consumerOffsets = sendListOffsetsRequest(request).responseData.get(topicPartition).offsets.asScala
                                                                                           ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:148: constructor PartitionData in class PartitionData is deprecated: see corresponding Javadoc for more information.
          new ListOffsetRequest.PartitionData(ListOffsetRequest.EARLIEST_TIMESTAMP, 1)).asJava).build()
          ^
/mydata/kafka/core/src/test/scala/unit/kafka/server/LogOffsetTest.scala:149: value offsets in class PartitionData is deprecated: see corresponding Javadoc for more information.
      val consumerOffsets = sendListOffsetsRequest(request).responseData.get(topicPartition).offsets.asScala
                                                                                             ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1441: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs)
                ^
/mydata/kafka/core/src/test/scala/unit/kafka/utils/TestUtils.scala:1462: method alterConfigs in trait Admin is deprecated: see corresponding Javadoc for more information.
    adminClient.alterConfigs(configs)
                ^
22 warnings found

> Task :kafka:core:processTestResources UP-TO-DATE
> Task :kafka:core:testClasses
> Task :kafka:core:checkstyleTest NO-SOURCE
> Task :kafka:spotlessScala UP-TO-DATE
> Task :kafka:spotlessScalaCheck UP-TO-DATE
> Task :kafka:core:copyDependantLibs
> Task :kafka:core:jar
> Task :kafka:connect:api:compileJava UP-TO-DATE
> Task :kafka:connect:api:processResources NO-SOURCE
> Task :kafka:connect:api:classes UP-TO-DATE
> Task :kafka:connect:api:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:api:jar UP-TO-DATE
> Task :kafka:connect:json:compileJava UP-TO-DATE
> Task :kafka:connect:json:processResources NO-SOURCE
> Task :kafka:connect:json:classes UP-TO-DATE
> Task :kafka:connect:json:copyDependantLibs UP-TO-DATE
> Task :kafka:connect:json:jar UP-TO-DATE
> Task :kafka:streams:compileJava UP-TO-DATE
> Task :kafka:streams:processResources NO-SOURCE
> Task :kafka:streams:classes UP-TO-DATE
> Task :kafka:streams:copyDependantLibs
> Task :kafka:streams:jar UP-TO-DATE
> Task :kafka:streams:test-utils:compileJava UP-TO-DATE
> Task :kafka:streams:test-utils:processResources NO-SOURCE
> Task :kafka:streams:test-utils:classes UP-TO-DATE
> Task :kafka:streams:test-utils:copyDependantLibs
> Task :kafka:streams:test-utils:jar UP-TO-DATE
> Task :kafka:streams:compileTestJava
> Task :kafka:streams:processTestResources UP-TO-DATE
> Task :kafka:streams:testClasses
> Task :kafka:streams:streams-scala:compileJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileScala
Pruning sources from previous analysis, due to incompatible CompileSetup.
/mydata/kafka/streams/streams-scala/src/main/scala/org/apache/kafka/streams/scala/kstream/KTable.scala:24: imported `Suppressed' is permanently hidden by definition of object Suppressed in package kstream
import org.apache.kafka.streams.kstream.{Suppressed, ValueTransformerWithKeySupplier, KTable => KTableJ}
                                         ^
one warning found

> Task :kafka:streams:streams-scala:processResources NO-SOURCE
> Task :kafka:streams:streams-scala:classes
> Task :kafka:streams:streams-scala:checkstyleMain NO-SOURCE
> Task :kafka:streams:streams-scala:compileTestJava NO-SOURCE

> Task :kafka:streams:streams-scala:compileTestScala
Pruning sources from previous analysis, due to incompatible CompileSetup.

> Task :kafka:streams:streams-scala:processTestResources UP-TO-DATE
> Task :kafka:streams:streams-scala:testClasses
> Task :kafka:streams:streams-scala:checkstyleTest NO-SOURCE
> Task :kafka:streams:streams-scala:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaJoin PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaSimple PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaAggregate PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilWindowCloses should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > Suppressed.untilTimeLimit should produce the correct suppression PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxRecords should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.maxBytes should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig.unbounded should produce the correct buffer config PASSED

org.apache.kafka.streams.scala.kstream.SuppressedTest > BufferConfig should support very long chains of factory methods PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaProperties PASSED

org.apache.kafka.streams.scala.TopologyTest > shouldBuildIdenticalTopologyInJavaNScalaTransform PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialized should create a Materialized with Serdes PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed should create a Consumed with Serdes PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a store name should create a Materialized with Serdes and a store name PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a window store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a key value store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.MaterializedTest > Create a Materialize with a session store supplier should create a Materialized with Serdes and a store supplier PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with timestampExtractor should create a Consumed with Serdes and timestampExtractor PASSED

org.apache.kafka.streams.scala.kstream.ConsumedTest > Create a Consumed with resetPolicy should create a Consumed with Serdes and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced should create a Produced with Serdes PASSED

org.apache.kafka.streams.scala.kstream.ProducedTest > Create a Produced with timestampExtractor and resetPolicy should create a Consumed with Serdes, timestampExtractor and resetPolicy PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped should create a Grouped with Serdes PASSED

org.apache.kafka.streams.scala.kstream.GroupedTest > Create a Grouped with repartition topic name should create a Grouped with Serdes, and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes PASSED

org.apache.kafka.streams.scala.kstream.JoinedTest > Create a Joined should create a Joined with Serdes and repartition topic name PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filter a KStream should filter records satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > filterNot a KStream should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > foreach a KStream should run foreach actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > peek a KStream should run peek actions on records PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > selectKey a KStream should select a new key PASSED

org.apache.kafka.streams.scala.kstream.KStreamTest > join 2 KStreams should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > filter a KTable should filter records satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > filterNot a KTable should filter records not satisfying the predicate PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables should join correctly records PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > join 2 KTables with a Materialized should join correctly records and state store PASSED

> Task :kafka:core:spotbugsMain

> Task :kafka:streams:streams-scala:test

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > session windowed KTable#suppress should correctly suppress results using Suppressed.untilWindowCloses PASSED

org.apache.kafka.streams.scala.kstream.KTableTest > non-windowed KTable#suppress should correctly suppress results using Suppressed.untilTimeLimit PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionWithNamedRepartitionTopic PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegionJava PASSED

org.apache.kafka.streams.scala.StreamToTableJoinScalaIntegrationTestImplicitSerdes > testShouldCountClicksPerRegion PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsMaterialized PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWordsJava PASSED

org.apache.kafka.streams.scala.WordCountTest > testShouldCountWords PASSED

> Task :kafka:core:test

kafka.metrics.KafkaTimerTest > testKafkaTimer PASSED

kafka.security.auth.OperationTest > testJavaConversions PASSED

kafka.security.auth.PermissionTypeTest > testJavaConversions PASSED

kafka.security.auth.PermissionTypeTest > testFromString PASSED

kafka.security.auth.AclTest > testAclJsonConversion PASSED

kafka.security.auth.ResourceTypeTest > testJavaConversions PASSED

kafka.security.auth.ResourceTypeTest > testFromString PASSED

kafka.server.ServerMetricsTest > testMetricsConfig PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfBlankArg PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartString PASSED

kafka.security.auth.ResourceTest > shouldParseOldTwoPartWithEmbeddedSeparators PASSED

kafka.admin.TimeConversionTests > testDateTimeFormats PASSED

kafka.security.auth.ResourceTest > shouldThrowOnTwoPartStringWithUnknownResourceType PASSED

kafka.security.auth.ResourceTest > shouldThrowOnBadResourceTypeSeparator PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartString PASSED

kafka.security.auth.ResourceTest > shouldRoundTripViaString PASSED

kafka.security.auth.ResourceTest > shouldParseThreePartWithEmbeddedSeparators PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowVerifyWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowTopicsOptionWithVerify PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithThrottleOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldFailIfNoArgs PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithoutReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowBrokersListWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumExecuteOptions PASSED

kafka.server.AbstractFetcherThreadTest > testSimpleFetch PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenRacks PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithReassignmentOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumGenerateOptions PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAware PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochInfoNotAvailable PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutBrokersAndTopicsOptions PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithUnevenReplicas PASSED

kafka.admin.AdminRackAwareTest > testSkipBrokerWithReplicaAlreadyAssigned PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowThrottleWithVerifyOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldUseDefaultsIfEnabled PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldAllowThrottleOptionOnExecute PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeHigh PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAware PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithBrokers PASSED

kafka.security.auth.ZkAuthorizationTest > testIsZkSecurityEnabled PASSED

kafka.admin.AdminRackAwareTest > testRackAwareExpansion PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6Partitions PASSED

kafka.server.AbstractFetcherThreadTest > testFencedTruncation PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWith2ReplicasRackAwareWith6PartitionsAnd3Brokers PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowExecuteWithTopicsOption PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldCorrectlyParseValidMinimumVerifyOptions PASSED

kafka.admin.ReassignPartitionsCommandArgsTest > shouldNotAllowGenerateWithoutTopicsOption PASSED

kafka.admin.AdminRackAwareTest > testReplicaAssignment PASSED

kafka.admin.AdminRackAwareTest > testGetRackAlternatedBrokerListAndAssignReplicasToBrokers PASSED

kafka.admin.AdminRackAwareTest > testMoreReplicasThanRacks PASSED

kafka.admin.AdminRackAwareTest > testSingleRack PASSED

kafka.admin.AdminRackAwareTest > testAssignmentWithRackAwareWithRandomStartIndex PASSED

kafka.admin.AdminRackAwareTest > testLargeNumberPartitionsAssignment PASSED

kafka.admin.AdminRackAwareTest > testLessReplicasThanRacks PASSED

kafka.server.AbstractFetcherThreadTest > testRetryAfterUnknownLeaderEpochInLatestOffsetFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToEpochEndOffsetsDuringRemovePartitions PASSED

kafka.server.DelayedOperationTest > testRequestPurge PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationSkippedIfNoEpochChange PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochInTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testConsumerLagRemovedWithPartition PASSED

kafka.server.AbstractFetcherThreadTest > testFollowerFetchOutOfRangeLow PASSED

kafka.server.AbstractFetcherThreadTest > testFencedOffsetResetAfterOutOfRange PASSED

kafka.server.AbstractFetcherThreadTest > testUnknownLeaderEpochWhileFetching PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringSuccessfulFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testTruncationThrowsExceptionIfLeaderReturnsPartitionsNotRequestedInFetchEpochs PASSED

kafka.server.AbstractFetcherThreadTest > testFencedFetch PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkIfLeaderEpochRequestNotSupported PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringAppending PASSED

kafka.server.DelayedOperationTest > testRequestExpiry PASSED

kafka.server.DelayedOperationTest > shouldReturnNilOperationsOnCancelForKeyWhenKeyDoesntExist PASSED

kafka.server.AbstractFetcherThreadTest > testMetricsRemovedOnShutdown PASSED

kafka.server.AbstractFetcherThreadTest > testTruncateToHighWatermarkDuringRemovePartitions PASSED

kafka.server.AbstractFetcherThreadTest > testFetcherThreadHandlingPartitionFailureDuringTruncation PASSED

kafka.server.AbstractFetcherThreadTest > testLeaderEpochChangeDuringFencedFetchEpochsFromLeader PASSED

kafka.server.AbstractFetcherThreadTest > testCorruptMessage PASSED

kafka.server.DynamicConfigTest > shouldFailFollowerConfigsWithInvalidValues PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLockOverride PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingUserUnknownConfig PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithDescribeBrokerLoggerIsNotAllowed PASSED

kafka.server.DelayedOperationTest > testTryCompleteLockContention PASSED

kafka.admin.AdminZkClientTest > testMockedConcurrentTopicCreation PASSED

kafka.server.AbstractFetcherThreadTest > testTruncation PASSED

kafka.server.DynamicConfigTest > shouldFailLeaderConfigsWithInvalidValues PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleReplicaListBasedOnProposedAssignment PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForSlowFollowers PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartup PASSED

kafka.server.DynamicConfigTest > shouldFailWhenChangingClientIdUnknownConfig PASSED

kafka.admin.ReassignPartitionsIntegrationTest > testRackAwareReassign PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsLeader PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForCaughtUpFollowers PASSED

kafka.server.ReplicaManagerTest > testReplicaSelector PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeader PASSED

kafka.server.MetadataCacheTest > getTopicMetadataWithNonSupportedSecurityProtocol PASSED

kafka.server.MetadataCacheTest > getTopicMetadataIsrNotAvailable PASSED

kafka.server.MetadataCacheTest > getTopicMetadata PASSED

kafka.server.MetadataCacheTest > getTopicMetadataReplicaNotAvailable PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionListenerNotAvailableOnLeaderOldMetadataVersion PASSED

kafka.server.MetadataCacheTest > getTopicMetadataPartitionLeaderNotAvailable PASSED

kafka.server.MetadataCacheTest > getAliveBrokersShouldNotBeMutatedByUpdateCache PASSED

kafka.server.MetadataCacheTest > getTopicMetadataNonExistingTopics PASSED

kafka.admin.ConfigCommandTest > testScramCredentials PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetBothMessagesIfQuotasAllow PASSED

kafka.security.auth.ZkAuthorizationTest > testKafkaZkClient PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForTopicsEntityType PASSED

kafka.admin.TopicCommandTest > testAlterPartitionCount PASSED

kafka.server.IsrExpirationTest > testIsrExpirationForStuckFollowers PASSED

kafka.server.ReplicaManagerTest > testHighWaterMarkDirectoryMapping PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testPeriodicTokenExpiry PASSED

kafka.server.ReplicaManagerQuotasTest > testCompleteInDelayedFetchWithReplicaThrottling PASSED

kafka.admin.ConfigCommandTest > shouldFailIfBrokerEntityTypeIsNotAnInteger PASSED

kafka.server.ReplicaManagerTest > testBecomeFollowerWhenLeaderIsUnchangedButMissedLeaderUpdate PASSED

kafka.server.DelayedOperationTest > testTryCompleteWithMultipleThreads PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testTokenRequestsWithDelegationTokenDisabled PASSED

kafka.server.DelayedOperationTest > shouldCancelForKeyReturningCancelledOperations PASSED

kafka.server.DelayedOperationTest > testRequestSatisfaction PASSED

kafka.server.ReplicaManagerTest > testFollowerStateNotUpdatedIfLogReadFails PASSED

kafka.server.ReplicaManagerQuotasTest > shouldExcludeSubsequentThrottledPartitions PASSED

kafka.server.IsrExpirationTest > testIsrExpirationIfNoFetchRequestMade PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.LeaderEpochCheckpointFileTest > shouldRetainValuesEvenIfCheckpointIsRecreated PASSED

kafka.server.ReplicaManagerTest > testFetchBeyondHighWatermarkReturnEmptyResponse PASSED

kafka.server.DelayedOperationTest > testDelayedOperationLock PASSED

kafka.server.ReplicaManagerTest > testFetchMessagesWhenNotFollowerForOnePartition PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithPrefixedResource PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerDynamicConfig PASSED

kafka.admin.TopicCommandTest > testAlterInternalTopicPartitionCount PASSED

kafka.admin.AdminZkClientTest > testGetBrokerMetadatas PASSED

kafka.server.ReplicaManagerTest > testIllegalRequiredAcks PASSED

kafka.server.ReplicaManagerQuotasTest > shouldGetNoMessagesIfQuotasExceededOnSubsequentPartitions PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnZkCommandError PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativeReplicationFactor PASSED

kafka.admin.ConfigCommandTest > testUserClientQuotaOpts PASSED

kafka.security.auth.ZkAuthorizationTest > testZkAntiMigration PASSED

kafka.server.ReplicaManagerTest > testClearPurgatoryOnBecomingFollower PASSED

kafka.server.ReplicaManagerQuotasTest > shouldIncludeInSyncThrottledReplicas PASSED

kafka.admin.TopicCommandTest > testCreateWithInvalidReplicationFactor PASSED

kafka.admin.ConfigCommandTest > shouldAddTopicConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testConsumerOffsetPathAcls PASSED

kafka.admin.ConfigCommandTest > shouldAddClientConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAllAccess PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testDescribeToken PASSED

kafka.server.ReplicaManagerTest > testOldLeaderLosesMetricsWhenReassignPartitions PASSED

kafka.admin.TopicCommandTest > testListTopicsWithExcludeInternal PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testCreateToken PASSED

kafka.server.ReplicaManagerTest > testHighwaterMarkRelativeDirectoryMapping PASSED

kafka.admin.TopicCommandTest > testCreateWithNegativePartitionCount PASSED

kafka.admin.ConfigCommandTest > shouldDeleteBrokerConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testZkMigration PASSED

kafka.admin.ConfigCommandTest > shouldAddDefaultBrokerDynamicConfig PASSED

kafka.server.KafkaMetricReporterClusterIdTest > testClusterIdPresent PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchLatestEpochOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotUpdateEpochAndStartOffsetIfItDidNotChange PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesBetweenEpochBoundaryWhenRemovingNewest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnLogEndOffsetIfLatestEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToEarly PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsFollowerReceivesManyMessages PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldTruncateIfMatchingEpochButEarlierStartingOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotOverwriteLogEndOffsetForALeaderEpochOnceItHasBeenAssigned PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUndefinedOffsetIfUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldIncreaseAndTrackEpochsAsLeadersChangeManyTimes PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnFirstEpochIfRequestedEpochLessThanFirstEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldSupportEpochsThatDoNotStartFromZero PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnNextAvailableEpochIfThereIsNoExactEpochForTheOneRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldAddEpochAndMessageOffsetToCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldDropEntriesOnEpochBoundaryWhenRemovingLatestEntries PASSED

kafka.server.ReplicaManagerTest > testOldFollowerLosesMetricsWhenReassignPartitions PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateSavedOffsetWhenOffsetToClearToIsBetweenEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryTailIfUndefinedPassed PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecorded PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnUnsupportedIfNoEpochRecordedAndUndefinedEpochRequested PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPersistEpochsBetweenInstances PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingEpochs PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotClearAnythingIfOffsetToFirstOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldGetFirstOffsetOfSubsequentEpochWhenOffsetRequestedForPreviousEpoch PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceOffsetsIncreaseMonotonically PASSED

kafka.server.ReplicaManagerTest > testUnknownReplicaSelector PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest2 PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearEarliestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldPreserveResetOffsetOnClearEarliestIfOneExists PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldUpdateOffsetBetweenEpochBoundariesOnClearEarliest PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldReturnInvalidOffsetIfEpochIsRequestedWhichIsNotCurrentlyTracked PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldEnforceMonotonicallyIncreasingStartOffsets PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldFetchEndOffsetOfEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldRetainLatestEpochOnClearAllEarliestAndUpdateItsOffset PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearAllEntries PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldClearLatestOnEmptyCache PASSED

kafka.server.epoch.LeaderEpochFileCacheTest > shouldNotResetEpochHistoryHeadIfUndefinedPassed PASSED

kafka.admin.ConfigCommandTest > testQuotaConfigEntity PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLocalConcurrentModificationOfResourceAcls PASSED

kafka.server.ReplicaManagerTest > testReceiveOutOfOrderSequenceExceptionWithLogStartOffset PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedBracketConfig PASSED

kafka.admin.TopicCommandTest > testCreateIfNotExists PASSED

kafka.server.ReplicaManagerTest > testPreferredReplicaAsFollower PASSED

kafka.server.ReplicaManagerTest > testDefaultReplicaSelector PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testExpireToken PASSED

kafka.server.ReplicaManagerTest > testReadCommittedFetchLimitedAtLSO PASSED

kafka.admin.BrokerApiVersionsCommandTest > checkBrokerApiVersionCommandOutput PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerLoggerConfig PASSED

kafka.server.KafkaMetricReporterExceptionHandlingTest > testBothReportersAreInvoked PASSED

kafka.server.ReplicaManagerTest > testDelayedFetchIncludesAbortedTransactions PASSED

kafka.admin.ConfigCommandTest > shouldFailIfUnrecognisedEntityType PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInBootstrapServerIsNotAllowed PASSED

kafka.security.auth.ZkAuthorizationTest > testChroot PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfNonExistingConfigIsDeleted PASSED

kafka.admin.ListConsumerGroupTest > testListWithUnrecognizedNewConsumerOption PASSED

kafka.admin.TopicCommandTest > testCreateAlterTopicWithRackAware PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRenewToken PASSED

kafka.admin.ConfigCommandTest > shouldAddBrokerQuotaConfig PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnWildcardResource PASSED

kafka.server.RequestQuotaTest > testUnauthorizedThrottle PASSED

kafka.admin.AdminZkClientTest > testBootstrapClientIdConfig PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedEntityName PASSED

kafka.metrics.MetricsTest > testMetricsReporterAfterDeletingTopic PASSED

kafka.server.ScramServerStartupTest > testAuthentications PASSED

kafka.security.token.delegation.DelegationTokenManagerTest > testRemoveTokenHmac PASSED

kafka.admin.ConfigCommandTest > shouldRaiseInvalidConfigurationExceptionWhenAddingInvalidBrokerLoggerConfig PASSED

kafka.server.ServerShutdownTest > testConsecutiveShutdown PASSED

kafka.server.StopReplicaRequestTest > testStopReplicaRequest PASSED

kafka.security.auth.ZkAuthorizationTest > testDelete PASSED
kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest failed, log available in /mydata/kafka/core/build/reports/testOutput/kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest.test.stdout

kafka.server.DescribeLogDirsRequestTest > testDescribeLogDirsRequest FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at kafka.server.DescribeLogDirsRequestTest.testDescribeLogDirsRequest(DescribeLogDirsRequestTest.scala:60)

kafka.server.FetchSessionTest > testFetchRequests PASSED

kafka.server.FetchSessionTest > testIncrementalFetchSession PASSED

kafka.server.FetchSessionTest > testResizeCachedSessions PASSED

kafka.server.FetchSessionTest > testSessionCache PASSED

kafka.admin.TopicCommandTest > testTopicDeletion PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonEmptyGroup PASSED

kafka.server.FetchSessionTest > testZeroSizeFetchSession PASSED

kafka.server.FetchSessionTest > testNewSessionId PASSED

kafka.admin.ConfigCommandTest > shouldSupportCommaSeparatedValues PASSED

kafka.server.ServerShutdownTest > testControllerShutdownDuringSend PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfNonExistingGroup PASSED

kafka.admin.ConfigCommandTest > testEntityDefaultOptionWithAlterBrokerLoggerIsNotAllowed PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.admin.TopicCommandTest > testDescribeIfTopicNotExists PASSED

kafka.admin.ConfigCommandTest > shouldNotUpdateBrokerConfigIfMalformedConfig PASSED

kafka.security.auth.ZkAuthorizationTest > testDeleteRecursive PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokerLoggersEntityType PASSED

kafka.admin.ReassignPartitionsCommandTest > testReassigningNonExistingPartition PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegmentSize PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnBrokerCommandError PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyDeletionOfResourceAcls PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopics PASSED

kafka.admin.TopicCommandTest > testDescribeReportOverriddenConfigs PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForBrokersEntityType PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteExistingPropertiesWhenLimitIsAdded PASSED

kafka.server.DelegationTokenRequestsTest > testDelegationTokenRequests PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldReturnEmptyMapForEmptyFile PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldThrowIfVersionIsNotRecognised PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultipleTopicsAndPartitions PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldRemoveThrottleLimitFromAllBrokers PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicas PASSED

kafka.admin.DelegationTokenCommandTest > testDelegationTokenRequests PASSED

kafka.admin.TopicCommandTest > testListTopicsWithWhitelist PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpointFileInvalidLogDir PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldPersistAndOverwriteAndReloadFile PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > shouldHandleMultipleLines PASSED

kafka.server.checkpoints.OffsetCheckpointFileTest > testLazyOffsetCheckpoint PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresMultipleLogSegments PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasMultiplePartitions PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFound PASSED

kafka.admin.TopicCommandTest > testListTopics PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedForMessageFormatOnHandleWriteTxnMarkersWhenMagicLowerThanRequired PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleTxnOffsetCommitRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testOffsetCommitWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesNotLeaderForPartition PASSED

kafka.server.KafkaApisTest > testJoinGroupProtocolsOrder PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddPartitionsToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testReadUncommittedConsumerListOffsetLatest PASSED

kafka.admin.ConfigCommandTest > testDynamicBrokerConfigUpdateUsingZooKeeper PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnDistinctListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.server.KafkaApisTest > shouldAppendToLogOnWriteTxnMarkersWhenCorrectMagicVersion PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleWriteTxnMarkersRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesFencedLeaderEpoch PASSED

kafka.server.KafkaApisTest > testFetchRequestV9WithNoLogConfig PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicWhenPartitionIsNotHosted PASSED

kafka.server.KafkaApisTest > rejectSyncGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > rejectHeartbeatRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > testReadCommittedConsumerListOffsetLatest PASSED

kafka.server.KafkaApisTest > testMetadataRequestOnSharedListenerWithInconsistentListenersAcrossBrokers PASSED

kafka.server.KafkaApisTest > testAddPartitionsToTxnWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownTopicOrPartition PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleAddOffsetToTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testLeaderReplicaIfLocalRaisesUnknownLeaderEpoch PASSED

kafka.admin.ConfigCommandTest > testNoSpecifiedEntityOptionWithDescribeBrokersInZKIsAllowed PASSED

kafka.server.KafkaApisTest > testTxnOffsetCommitWithInvalidPartition PASSED

kafka.server.KafkaApisTest > testSingleLeaveGroup PASSED

kafka.server.KafkaApisTest > rejectJoinGroupRequestWhenStaticMembershipNotSupported PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnsupportedMessageFormatForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.KafkaApisTest > shouldThrowUnsupportedVersionExceptionOnHandleEndTxnRequestWhenInterBrokerProtocolNotSupported PASSED

kafka.server.KafkaApisTest > testMultipleLeaveGroup PASSED

kafka.server.KafkaApisTest > shouldRespondWithUnknownTopicOrPartitionForBadPartitionAndNoErrorsForGoodPartition PASSED

kafka.server.KafkaApisTest > rejectOffsetCommitRequestWhenStaticMembershipNotSupported PASSED

kafka.admin.TopicCommandTest > testDeleteInternalTopic PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothFetchAndRequestQuotasViolated PASSED

kafka.metrics.MetricsTest > testSessionExpireListenerMetrics PASSED

kafka.admin.ConfigCommandTest > testQuotaDescribeEntities PASSED

kafka.admin.TopicCommandTest > testInvalidTopicLevelConfig PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementAllServers PASSED

kafka.admin.ConfigCommandTest > shouldParseArgumentsForClientsEntityType PASSED

kafka.admin.ConfigCommandTest > shouldExitWithNonZeroStatusOnArgError PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldIncreaseLeaderEpochBetweenLeaderRestarts PASSED

kafka.api.test.ProducerCompressionTest > testCompression[0 compressionType = none] PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclInheritance PASSED

kafka.server.LeaderElectionTest > testLeaderElectionWithStaleControllerEpoch PASSED

kafka.admin.TopicCommandTest > testAlterConfigs PASSED

kafka.admin.AdminZkClientTest > testTopicConfigChange PASSED

kafka.server.AddPartitionsToTxnRequestTest > shouldReceiveOperationNotAttemptedWhenOtherPartitionHasError PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroup PASSED

kafka.server.ApiVersionsRequestTest > testApiVersionsRequest PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testBasicPreferredReplicaElection PASSED

kafka.admin.AdminZkClientTest > testManualReplicaAssignment PASSED

kafka.admin.TopicCommandTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlanSingleGroupArg PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithLogAppendTime PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdWithMixOfSuccessAndError PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeEarliestTime PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDistributedConcurrentModificationOfResourceAcls PASSED

kafka.server.ServerShutdownTest > testCleanShutdownAfterFailedStartupDueToCorruptLogs PASSED

kafka.admin.TopicCommandTest > testTopicOperationsWithRegexSymbolInTopicName PASSED

kafka.admin.AdminZkClientTest > testConcurrentTopicCreation PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testListenerName PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testZkAclsDisabled PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testInvalidBrokerGiven PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testValidCreateTopicsRequests PASSED

kafka.admin.TopicCommandTest > testCreateWithConfigs PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testPreferredReplicaJsonData PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=true] PASSED

kafka.api.PlaintextConsumerTest > testEarliestOrLatestOffsets PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnWildcardResource PASSED

kafka.server.DeleteTopicsRequestTest > testValidDeleteTopicRequests PASSED

kafka.admin.TopicCommandTest > testAlterIfExists PASSED

kafka.api.test.ProducerCompressionTest > testCompression[1 compressionType = gzip] PASSED

kafka.server.RequestQuotaTest > testUnthrottledClient PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsUnregisteredAfterDeletingTopic PASSED

kafka.server.ServerGenerateBrokerIdTest > testBrokerMetadataOnIdCollision PASSED

kafka.admin.TopicCommandTest > testCreateWithReplicaAssignment PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventWhenInterBrokerProtocolAtLeastKafkaV2 PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequest PASSED

kafka.admin.ListConsumerGroupTest > testListConsumerGroups PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentNonOverlappingReplicas PASSED

kafka.admin.TopicCommandTest > testAlterWithInvalidPartitionCount PASSED

kafka.api.PlaintextProducerSendTest > testAutoCreateTopic PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExecuteThrottledReassignment PASSED

kafka.admin.TopicCommandTest > testCreate PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithTopicOption PASSED

kafka.server.LogOffsetTest > testGetOffsetsForUnknownTopic PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroup PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAclManagementAPIs PASSED

kafka.api.test.ProducerCompressionTest > testCompression[2 compressionType = snappy] PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.admin.AddPartitionsTest > testMissingPartition0 PASSED

kafka.admin.TopicCommandTest > testDescribeAndListTopicsMarkedForDeletion PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresMultipleLogSegments PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=true, consumerTopicCreation=false] PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForAutoCreate PASSED

kafka.admin.AdminZkClientTest > shouldPropagateDynamicBrokerConfigs PASSED

kafka.admin.TopicCommandTest > testDeleteIfExists PASSED

kafka.server.RequestQuotaTest > testExemptRequestTime PASSED

kafka.admin.AclCommandTest > testAclCliWithAuthorizer PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWildCardAcls PASSED

kafka.admin.LeaderElectionCommandTest > testAllTopicPartition PASSED

kafka.server.CreateTopicsRequestWithPolicyTest > testErrorCreateTopicsRequests PASSED

kafka.admin.AclCommandTest > testInvalidAuthorizerProperty PASSED

kafka.admin.TopicCommandTest > testDescribe PASSED

kafka.admin.AdminZkClientTest > testTopicCreationWithCollision PASSED

kafka.metrics.MetricsTest > testClusterIdMetric PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithCleaner PASSED

kafka.admin.AdminZkClientTest > testTopicCreationInZK PASSED

kafka.admin.TopicCommandTest > testAlterAssignment PASSED

kafka.server.DeleteTopicsRequestTest > testErrorDeleteTopicRequests PASSED

kafka.api.test.ProducerCompressionTest > testCompression[3 compressionType = lz4] PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralAclChangeEventWhenInterBrokerProtocolIsKafkaV2 PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldAddCurrentLeaderEpochToMessagesAsTheyAreWrittenToLeader PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.server.ServerGenerateBrokerIdTest > testAutoGenerateBrokerId PASSED

kafka.server.SimpleFetchTest > testReadFromLog PASSED

kafka.server.LogOffsetTest > testEmptyLogsGetOffsets PASSED

kafka.server.DynamicBrokerReconfigurationTest > testDefaultTopicConfig PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchLeaderEpochOnFirstFetchOnly PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > issuesEpochRequestFromLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToInitialFetchOffsetIfReplicaReturnsUndefinedOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToReplicaOffset PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchOneReplicaAtATime PASSED

kafka.api.PlaintextProducerSendTest > testSendWithInvalidCreateTime PASSED

kafka.server.ServerShutdownTest > testCleanShutdown PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testTopicAcl PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterPartitionCount PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteNonExistingGroup PASSED

kafka.server.AlterReplicaLogDirsRequestTest > testAlterReplicaLogDirsRequestErrorCode PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartitionWithinBroker PASSED

kafka.server.ProduceRequestTest > testSimpleProduceRequest PASSED

kafka.admin.LeaderElectionCommandTest > testTopicWithoutPartition PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserHasAccess PASSED

kafka.server.LeaderElectionTest > testLeaderElectionAndEpoch PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByHigherThanLatest PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=true] PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderNotInNewReplicas PASSED

kafka.server.LogRecoveryTest > testHWCheckpointNoFailuresSingleLogSegment PASSED

kafka.api.PlaintextConsumerTest > testShrinkingTopicSubscriptions PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTime PASSED

kafka.metrics.MetricsTest > testControllerMetrics PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAdminAPI PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnPrefixedResource PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldPollIndefinitelyIfReplicaNotAvailable PASSED

kafka.admin.AddPartitionsTest > testWrongReplicaCount PASSED

kafka.server.DeleteTopicsRequestTest > testNotController PASSED

kafka.server.DelegationTokenRequestsOnPlainTextTest > testDelegationTokenRequests PASSED

kafka.server.LogOffsetTest > testFetchOffsetsBeforeWithChangingSegments PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.ApiUtilsTest > testShortStringNonASCII PASSED

kafka.api.ApiUtilsTest > testShortStringASCII PASSED

kafka.api.test.ProducerCompressionTest > testCompression[4 compressionType = zstd] PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithConsumersWithoutAssignedPartitions PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestIsNew PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicQueuedForDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSentToLiveOrShuttingDownBrokers PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldTruncateToEndOffsetOfLargestCommonEpoch PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > fetchEpochsFromLeaderShouldHandleExceptionFromGetLocalReplica PASSED

kafka.server.ReplicaAlterLogDirsThreadTest > shouldFetchNonDelayedAndNonTruncatingReplicas PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaSentOnlyToLiveAndShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaGroupsByBroker PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataDoesNotIncludePartitionsWithoutLeaderAndIsr PASSED

kafka.controller.ControllerChannelManagerTest > testMixedDeleteAndNotDeleteStopReplicaRequests PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrInterBrokerProtocolVersion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataRequestDuringTopicDeletion PASSED

kafka.controller.ControllerChannelManagerTest > testUpdateMetadataIncludesLiveOrShuttingDownBrokers PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestSent PASSED

kafka.controller.ControllerChannelManagerTest > testStopReplicaRequestsWhileTopicDeletionStarted PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDenyTakesPrecedence PASSED

kafka.controller.ControllerChannelManagerTest > testLeaderAndIsrRequestSent PASSED

kafka.server.epoch.LeaderEpochIntegrationTest > shouldSendLeaderEpochRequestAndGetAResponse PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonEmptyGroup PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedDoesNotMatchExisting PASSED

kafka.server.ServerGenerateBrokerIdTest > testMultipleLogDirsMetaProps PASSED

kafka.log.LogCleanerIntegrationTest > testMarksPartitionsAsOfflineAndPopulatesUncleanableMetrics PASSED

kafka.zk.KafkaZkClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.server.ServerShutdownTest > testCleanShutdownWithDeleteTopicEnabled PASSED

kafka.api.PlaintextProducerSendTest > testBatchSizeZero PASSED

kafka.server.ProduceRequestTest > testCorruptLz4ProduceRequest PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSingleCharacterResourceAcls PASSED

kafka.zk.KafkaZkClientTest > testCreateAndGetTopicPartitionStatesRaw PASSED

kafka.admin.ReassignPartitionsCommandTest > testResumePartitionReassignmentThatWasCompleted PASSED

kafka.server.MetadataRequestTest > testIsrAfterBrokerShutDownAndJoinsBack PASSED

kafka.api.SaslPlainPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.TopicFilterTest > testWhitelists PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testExceedProducerIdLimit PASSED

kafka.coordinator.transaction.ProducerIdManagerTest > testGetProducerId PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldSetQuotaLimit PASSED

kafka.api.ConsumerTopicCreationTest > testAutoTopicCreation[brokerTopicCreation=false, consumerTopicCreation=false] PASSED

kafka.log.LogConfigTest > testGetConfigValue PASSED

kafka.log.LogConfigTest > testToRst PASSED

kafka.log.LogConfigTest > ensureNoStaticInitializationOrderDependency PASSED

kafka.log.LogConfigTest > testToEnrichedRst PASSED

kafka.log.LogConfigTest > shouldValidateThrottledReplicasConfig PASSED

kafka.log.LogConfigTest > testFromPropsEmpty PASSED

kafka.log.LogConfigTest > testInvalidCompactionLagConfig PASSED

kafka.log.LogConfigTest > testKafkaConfigToProps PASSED

kafka.log.LogConfigTest > testFromPropsInvalid PASSED

kafka.log.LogConfigTest > testToHtml PASSED

kafka.zk.KafkaZkClientTest > testLogDirGetters PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultipleSubActions PASSED

kafka.log.LogCleanerIntegrationTest > testMaxLogCompactionLag PASSED

unit.kafka.utils.ThrottlerTest > testThrottleDesiredRate PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testNoAclFoundOverride PASSED

kafka.admin.AclCommandTest > testPatternTypes PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.metrics.MetricsTest > testWindowsStyleTagNames PASSED

kafka.server.FetchRequestTest > testZStdCompressedRecords PASSED

kafka.server.RequestQuotaTest > testResponseThrottleTimeWhenBothProduceAndRequestQuotasViolated PASSED

kafka.zk.KafkaZkClientTest > testSetGetAndDeletePartitionReassignment PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicOnControllerFailover PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeLatestTime PASSED

kafka.server.ServerGenerateBrokerIdTest > testDisableGeneratedBrokerId PASSED

kafka.api.SaslMultiMechanismConsumerTest > testMultipleBrokerMechanisms PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testEmptyAclThrowsException PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationsDeletion PASSED

kafka.server.MultipleListenersWithAdditionalJaasContextTest > testProduceConsume PASSED

kafka.integration.MinIsrConfigTest > testDefaultKafkaConfig PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTimeout PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndVersion PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupOffsetsWithShortInitializationTimeout PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testSuperUserWithCustomPrincipalHasAccess PASSED

kafka.admin.AddPartitionsTest > testReplicaPlacementPartialServers PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.zk.KafkaZkClientTest > testGetChildren PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdNonExistingGroup PASSED

kafka.zk.KafkaZkClientTest > testSetAndGetConsumerOffset PASSED

kafka.server.DynamicBrokerReconfigurationTest > testMetricsReporterUpdate PASSED

kafka.api.PlaintextProducerSendTest > testWrongSerializer PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAllowAccessWithCustomPrincipal PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMs PASSED

kafka.api.TransactionsTest > testBasicTransactions PASSED

kafka.server.ProduceRequestTest > testProduceToNonReplica PASSED

kafka.server.ReplicaFetchTest > testReplicaFetcherThread PASSED

kafka.zk.KafkaZkClientTest > testClusterIdMethods PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftMinus PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAclOnWildcardResource PASSED

kafka.server.LogRecoveryTest > testHWCheckpointWithFailuresSingleLogSegment PASSED

kafka.server.AdvertiseBrokerTest > testBrokerAdvertiseHostNameAndPortToZK PASSED

kafka.zk.KafkaZkClientTest > testEntityConfigManagementMethods PASSED

kafka.admin.LeaderElectionCommandTest > testPathToJsonFile PASSED

kafka.server.FetchRequestTest > testFetchRequestToNonReplica PASSED

kafka.server.LogOffsetTest > testGetOffsetsBeforeNow PASSED

kafka.admin.ReassignPartitionsCommandTest > testPartitionReassignmentWithLeaderInNewReplicas PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroupWithNoMembers PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindMovingReplicasWhenProposedIsSubsetOfExisting PASSED

kafka.zk.KafkaZkClientTest > testUpdateLeaderAndIsr PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldUpdateQuotaLimit PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testChangeListenerTiming PASSED

kafka.metrics.MetricsTest > testBrokerTopicMetricsBytesInOut PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldFindTwoMovingReplicasInSamePartition PASSED

kafka.admin.ReassignPartitionsCommandTest > shouldNotOverwriteEntityConfigsWhenUpdatingThrottledReplicas PASSED

kafka.zk.KafkaZkClientTest > testUpdateBrokerInfo PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithLogAppendTime PASSED

kafka.server.MetadataRequestTest > testReplicaDownResponse PASSED

kafka.zk.KafkaZkClientTest > testCreateRecursive PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDescribe PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesLiteralWritesLiteralAclChangeEventWhenInterBrokerProtocolLessThanKafkaV2eralAclChangesForOlderProtocolVersions PASSED

kafka.api.TransactionsBounceTest > testBrokerFailure PASSED

kafka.server.KafkaServerTest > testAlreadyRegisteredAdvertisedListeners PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNonexistentReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testOfflineReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionSuccessfulToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOfflineReplicaToNonexistentReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOnlinePartition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupOfflinePartition PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteEmptyGroup PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testStartupWithReplicaWithoutLeader PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToReplicaDeletionStartedTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionStartedTransition PASSED

kafka.zk.KafkaZkClientTest > testGetConsumerOffsetNoData PASSED

kafka.controller.ReplicaStateMachineTest > testOnlineReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNewReplicaToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidOnlineReplicaToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionStartedToReplicaDeletionIneligibleTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionSuccessfulToOfflineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionIneligibleToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testReplicaDeletionIneligibleToOnlineReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidReplicaDeletionStartedToNewReplicaTransition PASSED

kafka.controller.ReplicaStateMachineTest > testInvalidNonexistentReplicaToReplicaDeletionSuccessfulTransition PASSED

kafka.controller.ReplicaStateMachineTest > testNewReplicaToOnlineReplicaTransition PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.server.MultipleListenersWithDefaultJaasContextTest > testProduceConsume PASSED

kafka.server.ProduceRequestTest > testZSTDProduceRequest PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupMembersWithShortInitializationTimeout PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testTransactionalProducerWithAuthenticationFailure PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testThrowsOnAddPrefixedAclIfInterBrokerProtocolVersionTooLow PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicPathMethods PASSED

kafka.admin.LeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.admin.AddPartitionsTest > testIncrementPartitions PASSED

kafka.tools.CustomDeserializerTest > checkDeserializerTopicIsNotNull PASSED

kafka.server.LogOffsetTest > testGetOffsetsAfterDeleteRecords PASSED

kafka.server.ServerGenerateBrokerIdTest > testUserConfigAndGeneratedBrokerId PASSED

kafka.zk.KafkaZkClientTest > testSetTopicPartitionStatesRaw PASSED

kafka.api.PlaintextConsumerTest > testOffsetsForTimes PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnPrefixedResource PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldTriggerReassignmentOnControllerStartup PASSED

kafka.admin.DeleteTopicTest > testResumeDeleteTopicWithRecoveredFollower PASSED

kafka.server.DelegationTokenRequestsWithDisableTokenFeatureTest > testDelegationTokenRequests PASSED

kafka.api.TransactionsTest > testFencingOnSendOffsets PASSED

kafka.api.GroupCoordinatorIntegrationTest > testGroupCoordinatorPropagatesOffsetsTopicCompressionCodec PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testOffsetsForLeaderEpochErrorCodes PASSED

kafka.zk.KafkaZkClientTest > testAclManagementMethods PASSED

kafka.api.SslProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.log.LogSegmentTest > testRecoveryWithCorruptMessage PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptIndex PASSED

kafka.log.LogSegmentTest > testReadFromGap PASSED

kafka.log.LogSegmentTest > testReloadLargestTimestampAndNextOffsetAfterTruncation PASSED

kafka.log.LogSegmentTest > testTruncate PASSED

kafka.log.LogSegmentTest > testRecoverTransactionIndex PASSED

kafka.log.LogSegmentTest > testReadBeforeFirstOffset PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeAppendMessage PASSED

kafka.log.LogSegmentTest > testChangeFileSuffixes PASSED

kafka.log.LogSegmentTest > testTruncateEmptySegment PASSED

kafka.log.LogSegmentTest > testRecoveryFixesCorruptTimeIndex PASSED

kafka.log.LogSegmentTest > shouldTruncateEvenIfOffsetPointsToAGapInTheLog PASSED

kafka.log.LogSegmentTest > testNextOffsetCalculation PASSED

kafka.log.LogSegmentTest > testFindOffsetByTimestamp PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.log.LogSegmentTest > testReadOnEmptySegment PASSED

kafka.log.LogSegmentTest > testReadAfterLast PASSED

kafka.log.LogSegmentTest > testCreateWithInitFileSizeClearShutdown PASSED

kafka.log.LogSegmentTest > testAppendFromFile PASSED

kafka.log.LogSegmentTest > testTruncateFull PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.LiteralAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.LiteralAclStoreTest > shouldThrowFromEncodeOnNoneLiteral PASSED

kafka.zk.LiteralAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.LiteralAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.zk.LiteralAclStoreTest > shouldDecodeResourceUsingTwoPartLogic PASSED

kafka.api.PlaintextProducerSendTest > testSendNonCompressedMessageWithCreateTime PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.zk.KafkaZkClientTest > testPreferredReplicaElectionMethods PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultReplication PASSED

kafka.server.MetadataRequestTest > testAutoCreateOfCollidingTopics PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testHighConcurrencyModificationOfResourceAcls PASSED

kafka.zk.KafkaZkClientTest > testPropagateLogDir PASSED

kafka.server.ServerGenerateBrokerIdTest > testConsistentBrokerIdFromUserConfigAndMetaProps PASSED

kafka.api.ProducerFailureHandlingTest > testCannotSendToInternalTopic PASSED

kafka.zk.KafkaZkClientTest > testGetDataAndStat PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAuthenticationFailure PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithMixOfSuccessAndError PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInconsistentReplicasAndLogDirs PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeWithEmptyResourceName PASSED

kafka.zk.KafkaZkClientTest > testReassignPartitionsInProgress PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroup PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToCurrentOffset PASSED

kafka.api.SaslMultiMechanismConsumerTest > testCoordinatorFailover PASSED

kafka.admin.AddPartitionsTest > testManualAssignmentOfReplicas PASSED

kafka.zk.KafkaZkClientTest > testCreateTopLevelPaths PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicAlreadyMarkedAsDeleted PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testDeleteAllAclOnPrefixedResource PASSED

kafka.api.SslProducerSendTest > testClose PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAdminAPI PASSED

kafka.api.AuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterParallel PASSED

kafka.api.UserQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.zk.KafkaZkClientTest > testIsrChangeNotificationGetters PASSED

kafka.api.SaslSslConsumerTest > testCoordinatorFailover PASSED

kafka.api.PlaintextConsumerTest > testSubsequentPatternSubscription PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testAuthzFailure PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnLiteralResource PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteWithUnrecognizedNewConsumerOption PASSED

kafka.zk.KafkaZkClientTest > testLogDirEventNotificationsDeletion PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithDownConversionDisabled PASSED

kafka.api.TransactionsTest > testFencingOnAddPartitions PASSED

kafka.admin.AclCommandTest > testAclsOnPrefixedResourcesWithAuthorizer PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckOne PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfExistingGroup PASSED

kafka.server.MetadataRequestTest > testRack PASSED

kafka.server.FetchRequestTest > testBrokerRespectsPartitionsOrderAndSizeLimits PASSED

kafka.zk.KafkaZkClientTest > testGetLogConfigs PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAuthorizeThrowsOnNoneLiteralResource PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.PlaintextProducerSendTest > testClose PASSED

kafka.zk.KafkaZkClientTest > testBrokerSequenceIdMethods PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationSuccess PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestWithUnsupportedVersion PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAdvertisedListenerUpdate PASSED

kafka.zk.KafkaZkClientTest > testAclMethods PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testGetAclsPrincipal PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterId PASSED

kafka.server.OffsetsForLeaderEpochRequestTest > testCurrentEpochValidation PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLegacyAclOpsNeverAffectOrReturnPrefixed PASSED

kafka.zk.KafkaZkClientTest > testCreateSequentialPersistentPath PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAddAclsOnPrefiexedResource PASSED

kafka.zk.KafkaZkClientTest > testConditionalUpdatePath PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoopElection PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithConsumersWithoutAssignedPartitions PASSED

kafka.api.UserClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.zk.KafkaZkClientTest > testDeleteTopicZNode PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testWritesExtendedAclChangeEventIfInterBrokerProtocolNotSet PASSED

kafka.api.CustomQuotaCallbackTest > testCustomQuotaCallback PASSED

kafka.utils.SchedulerTest > testMockSchedulerNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testUnscheduleProducerTask PASSED

kafka.utils.SchedulerTest > testMockSchedulerPeriodicTask PASSED

kafka.utils.SchedulerTest > testNonPeriodicTask PASSED

kafka.utils.SchedulerTest > testRestart PASSED

kafka.utils.SchedulerTest > testReentrantTaskInMockScheduler PASSED

kafka.server.MetadataRequestTest > testIsInternal PASSED

kafka.utils.SchedulerTest > testPeriodicTask PASSED

kafka.server.FetchRequestTest > testZStdCompressedTopic PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyProtocolType PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoinedFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteNonEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForStaticMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRebalanceCompletesBeforeMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberHeartbeatLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersWrongCoordinatorBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupStaticMemberWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupRebalancing PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailureInSyncGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownMemberId PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdAllGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testGenerationIdIncrementsOnRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSecondJoinInconsistentProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersValidBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromIllegalGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsLeaderWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWithEmptyGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithExplicitUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupStableForDynamicMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetsRetentionMsIntegerOverflow PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesStableGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatDuringRebalanceCausesRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMemberWithUnexpectedInstanceIdBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSingleLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsMultipleProducersOneGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSecondMemberPartiallyJoinAndTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayInitialRebalanceByGroupInitialRebalanceDelayOnEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithKnownMemberIdAndNoProtocolChange PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentGroupProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithInvalidGroupId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberCommitOffsetWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooLarge PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupSessionTimeoutTooSmall PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupEmptyAssignment PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestBeforeSaslHandshakeRequest PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupShouldReceiveErrorIfGroupOverMaxSize PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetWithDefaultGeneration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchAllOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteGroupWithWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedLeaderShouldRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalArgumentAsMissingOldMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberTimesOut PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatRebalanceInProgress PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithUnknownMemberIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testListGroupsIncludesRebalancingGroups PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFollowerAfterLeader PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroupWithStoredOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetsAfterGroupIsEmpty PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetForUnknownPartition PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitAndFetchOffsetsWithEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupInconsistentProtocolType PASSED

kafka.zk.KafkaZkClientTest > testDeletePath PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsOneProducerMultipleGroups PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithAssign PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersUnknownGroupBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupCompletionWhenPendingMemberJoins PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberFollowerFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinAsFollowerWithMismatchedMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberReJoinWithIllegalStateAsUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldGetDifferentStaticMemberIdAfterEachRejoin PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetFromUnknownGroup PASSED

kafka.api.SslProducerSendTest > testFlush PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWithFencedInstanceId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDeleteEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinAsFirstMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupWrongCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateSyncingFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithKnownLeaderIdToTriggerRebalanceAndFollowerWithChangeofProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitMaintainsSession PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaderFailToRejoinBeforeFinalRebalanceTimeoutWithLongSessionTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsetNotCoordinatorForGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberFenceDuplicateRejoiningFollowerAfterMemberIdChanged PASSED

kafka.coordinator.group.GroupCoordinatorTest > testOffsetCommitDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberLeaveWithIllegalStateAsPendingMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testLeaveGroupUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupUnknownConsumerNewGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberJoinWithUnknownInstanceIdAndKnownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberSyncAsLeaderWithInvalidMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBatchLeaveDeadGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testJoinGroupFromUnchangedFollowerDoesNotRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidJoinGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldDelayRebalanceUptoRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > testheartbeatEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSessionTimeoutDuringRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithFollowerIdAndChangeOfProtocol PASSED

kafka.coordinator.group.GroupCoordinatorTest > testNewMemberJoinExpiration PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsWithAbort PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupLeaderAfterFollower PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupFromUnknownMember PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMemberLeaderFailToRejoinBeforeRebalanceTimeout PASSED

kafka.coordinator.group.GroupCoordinatorTest > staticMemberRejoinWithLeaderIdAndUnexpectedEmptyGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testCommitOffsetInCompletingRebalanceFromUnknownMemberId PASSED

kafka.coordinator.group.GroupCoordinatorTest > testDescribeGroupInactiveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testFetchTxnOffsetsIgnoreSpuriousCommit PASSED

kafka.coordinator.group.GroupCoordinatorTest > testPendingMembersLeavesGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testSyncGroupNotCoordinator PASSED

kafka.coordinator.group.GroupCoordinatorTest > testBasicFetchTxnOffsets PASSED

kafka.coordinator.group.GroupCoordinatorTest > shouldResetRebalanceDelayWhenNewMemberJoinsGroupInInitialRebalance PASSED

kafka.coordinator.group.GroupCoordinatorTest > testHeartbeatUnknownConsumerExistingGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testStaticMembersFencedInstanceBatchLeaveGroup PASSED

kafka.coordinator.group.GroupCoordinatorTest > testValidHeartbeat PASSED

kafka.coordinator.group.GroupCoordinatorTest > testRequestHandlingWhileLoadingInProgress PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testAccessAllowedIfAllowAclExistsOnWildcardResource PASSED

kafka.server.DynamicConfigChangeTest > testProcessNotification PASSED

kafka.zk.KafkaZkClientTest > testGetBrokerMethods PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldOnlyThrottleMovingReplicas PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchFromReplica PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testProducerWithAuthenticationFailure PASSED

kafka.security.auth.SimpleAclAuthorizerTest > testLoadCache PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringLogRoll PASSED

kafka.server.KafkaConfigTest > testAdvertiseConfigured PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeBothMsAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testLogRetentionValid PASSED

kafka.server.KafkaConfigTest > testSpecificProperties PASSED

kafka.server.KafkaConfigTest > testDefaultCompressionType PASSED

kafka.server.KafkaConfigTest > testControlPlaneListenerName PASSED

kafka.server.KafkaConfigTest > testDuplicateListeners PASSED

kafka.server.KafkaConfigTest > testLogRetentionUnlimited PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testMaxConnectionsPerIpProp PASSED

kafka.server.KafkaConfigTest > testLogRollTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testInvalidInterBrokerSecurityProtocol PASSED

kafka.server.KafkaConfigTest > testAdvertiseDefaults PASSED

kafka.server.KafkaConfigTest > testBadListenerProtocol PASSED

kafka.server.KafkaConfigTest > testListenerDefaults PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndHoursProvided PASSED

kafka.server.KafkaConfigTest > testUncleanElectionDisabled PASSED

kafka.server.KafkaConfigTest > testListenerNameMissingFromListenerSecurityProtocolMap PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeNoConfigProvided PASSED

kafka.server.KafkaConfigTest > testCaseInsensitiveListenerProtocol PASSED

kafka.server.KafkaConfigTest > testListenerAndAdvertisedListenerNames PASSED

kafka.server.KafkaConfigTest > testNonroutableAdvertisedListeners PASSED

kafka.server.KafkaConfigTest > testInterBrokerListenerNameAndSecurityProtocolSet PASSED

kafka.zk.KafkaZkClientTest > testCreateTokenChangeNotification PASSED

kafka.server.KafkaConfigTest > testFromPropsInvalid PASSED

kafka.server.KafkaConfigTest > testInvalidCompressionType PASSED

kafka.server.KafkaConfigTest > testAdvertiseHostNameDefault PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeMinutesProvided PASSED

kafka.server.KafkaConfigTest > testValidCompressionType PASSED

kafka.server.KafkaConfigTest > testUncleanElectionInvalid PASSED

kafka.server.KafkaConfigTest > testListenerNamesWithAdvertisedListenerUnset PASSED

kafka.server.KafkaConfigTest > testLogRetentionTimeBothMinutesAndMsProvided PASSED

kafka.server.KafkaConfigTest > testLogRollTimeMsProvided PASSED

kafka.server.KafkaConfigTest > testUncleanLeaderElectionDefault PASSED

kafka.server.KafkaConfigTest > testInvalidAdvertisedListenersProtocol PASSED

kafka.server.KafkaConfigTest > testUncleanElectionEnabled PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.zk.KafkaZkClientTest > testGetTopicsAndPartitions PASSED

kafka.server.KafkaConfigTest > testInterBrokerVersionMessageFormatCompatibility PASSED

kafka.server.KafkaConfigTest > testAdvertisePortDefault PASSED

kafka.server.KafkaConfigTest > testVersionConfiguration PASSED

kafka.server.KafkaConfigTest > testEqualAdvertisedListenersProtocol PASSED

kafka.admin.DeleteTopicTest > testIncreasePartitionCountDuringDeleteTopic PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncryption PASSED

kafka.server.DynamicBrokerConfigTest > testSecurityConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testSynonyms PASSED

kafka.zk.KafkaZkClientTest > testRegisterBrokerInfo PASSED

kafka.api.SaslMultiMechanismConsumerTest > testSimpleConsumption PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicConfigInitializationWithoutConfigsInZK PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithSomeInvalidConfigs PASSED

kafka.server.DynamicBrokerConfigTest > testDynamicListenerConfig PASSED

kafka.server.DynamicBrokerConfigTest > testReconfigurableValidation PASSED

kafka.server.DynamicBrokerConfigTest > testConnectionQuota PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdate PASSED

kafka.server.DynamicConfigChangeTest > shouldParseWildcardReplicationQuotaProperties PASSED

kafka.api.PlaintextProducerSendTest > testFlush PASSED

kafka.server.DynamicBrokerConfigTest > testPasswordConfigEncoderSecretChange PASSED

kafka.server.DynamicBrokerConfigTest > testConfigUpdateWithReconfigurableValidationFailure PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopicAndPartition PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithCreateTime PASSED

kafka.api.SaslSslConsumerTest > testSimpleConsumption PASSED

kafka.admin.DeleteConsumerGroupsTest > testDeleteCmdEmptyGroup PASSED

kafka.log.LogCleanerTest > testCleanCorruptMessageSet PASSED

kafka.zk.KafkaZkClientTest > testRetryRegisterBrokerInfo PASSED

kafka.server.SaslApiVersionsRequestTest > testApiVersionsRequestAfterSaslHandshakeRequest PASSED

kafka.log.LogCleanerTest > testAbortedTransactionSpanningSegments PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsLastSequenceEvenIfTransactionAborted PASSED

kafka.server.MetadataRequestTest > testControllerId PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.log.LogCleanerTest > testBuildOffsetMap PASSED

kafka.log.LogCleanerTest > testAbortMarkerRemoval PASSED

kafka.log.LogCleanerTest > testBuildOffsetMapFakeLarge PASSED

kafka.log.LogCleanerTest > testSegmentGrouping PASSED

kafka.api.SslProducerSendTest > testSendToPartition PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerGroupServiceWithAuthenticationFailure PASSED

kafka.admin.LeaderElectionCommandTest > testPreferredReplicaElection PASSED

kafka.zk.KafkaZkClientTest > testConsumerOffsetPath PASSED

kafka.api.TransactionsTest > testFencingOnTransactionExpiration PASSED

kafka.log.LogCleanerTest > testCorruptMessageSizeLargerThanBytesAvailable PASSED

kafka.log.LogCleanerTest > testSizeTrimmedForPreallocatedAndCompactedTopic PASSED

kafka.log.LogCleanerTest > testCommitMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testLogCleanerRetainsProducerLastSequence PASSED

kafka.server.FetchRequestTest > testDownConversionFromBatchedToUnbatchedRespectsOffset PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithAbort PASSED

kafka.log.LogCleanerTest > testDeletedBatchesWithNoMessagesRead PASSED

kafka.log.LogCleanerTest > testSegmentGroupingWithSparseOffsets PASSED

kafka.server.FetchRequestDownConversionConfigTest > testLatestFetchWithDownConversionDisabled PASSED

kafka.server.DynamicConfigChangeTest > testDefaultClientIdQuotaConfigChange PASSED

kafka.log.LogCleanerTest > testLargeMessage PASSED

kafka.log.LogCleanerTest > testCleanEmptyControlBatch PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursiveWithControllerEpochVersionCheck PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldExpandCluster PASSED

kafka.log.LogCleanerTest > testRecoveryAfterCrash PASSED

kafka.log.LogCleanerTest > testCleanTombstone PASSED

kafka.log.LogCleanerTest > testDuplicateCheckAfterCleaning PASSED

kafka.log.LogCleanerTest > testAbortMarkerRetentionWithEmptyBatch PASSED

kafka.log.LogCleanerTest > testCleaningWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testLogToClean PASSED

kafka.log.LogCleanerTest > testCleaningWithDeletes PASSED

kafka.log.LogCleanerTest > testClientHandlingOfCorruptMessageSet PASSED

kafka.log.LogCleanerTest > testCleanWithTransactionsSpanningSegments PASSED

kafka.log.LogCleanerTest > testEmptyBatchRemovalWithSequenceReuse PASSED

kafka.log.LogCleanerTest > testCommittedTransactionSpanningSegments PASSED

kafka.zk.KafkaZkClientTest > testControllerManagementMethods PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSize PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetWithUnrecognizedNewConsumerOption PASSED

kafka.log.LogCleanerTest > testMessageLargerThanMaxMessageSizeWithCorruptHeader PASSED

kafka.log.LogCleanerTest > testCleanSegments PASSED

kafka.log.LogCleanerTest > testBasicTransactionAwareCleaning PASSED

kafka.log.LogCleanerTest > testSegmentGroupingFollowingLoadOfZeroIndex PASSED

kafka.log.LogCleanerTest > testLogToCleanWithUncleanableSection PASSED

kafka.log.LogCleanerTest > testBuildPartialOffsetMap PASSED

kafka.log.LogCleanerTest > testCleaningWithUnkeyedMessages PASSED

kafka.log.LogCleanerTest > testSegmentWithOffsetOverflow PASSED

kafka.log.LogCleanerTest > testPartialSegmentClean PASSED

kafka.zk.KafkaZkClientTest > testTopicAssignmentMethods PASSED

kafka.log.LogCleanerTest > testCommitMarkerRemoval PASSED

kafka.log.LogCleanerTest > testCleanSegmentsWithConcurrentSegmentDeletion PASSED

kafka.cluster.BrokerEndPointTest > testEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testHashAndEquals PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNoRack PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonFutureVersion PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV4WithNullRack PASSED

kafka.cluster.BrokerEndPointTest > testBrokerEndpointFromUri PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV1 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV2 PASSED

kafka.cluster.BrokerEndPointTest > testFromJsonV3 PASSED

kafka.api.PlaintextProducerSendTest > testSendToPartition PASSED

kafka.zk.KafkaZkClientTest > testPropagateIsrChanges PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicConnectionQuota PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.zk.KafkaZkClientTest > testControllerEpochMethods PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.api.PlaintextConsumerTest > testAsyncCommit PASSED

kafka.server.DynamicConfigChangeTest > testQuotaInitialization PASSED

kafka.zk.KafkaZkClientTest > testDeleteRecursive PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidLogDir PASSED

kafka.server.ServerGenerateClusterIdTest > testAutoGenerateClusterIdForKafkaClusterSequential PASSED

kafka.server.MetadataRequestTest > testAliveBrokersWithNoTopics PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAttemptToCreateInvalidAcls PASSED

kafka.zk.KafkaZkClientTest > testGetTopicPartitionStates PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testManualAssignmentConsumerWithAutoCommitDisabledWithAuthenticationFailure PASSED

kafka.server.CreateTopicsRequestTest > testValidCreateTopicsRequests PASSED

kafka.admin.DeleteTopicTest > testPartitionReassignmentDuringDeleteTopic PASSED

kafka.api.RackAwareAutoTopicCreationTest > testAutoCreateTopic PASSED

kafka.log.LogValidatorTest > testRecompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testCompressedV1 PASSED

kafka.log.LogValidatorTest > testCompressedV2 PASSED

kafka.log.LogValidatorTest > testDownConversionOfIdempotentRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentCompressed PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithRecompressionV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV1 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV0ToV2 PASSED

kafka.log.LogValidatorTest > testCreateTimeUpConversionV1ToV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0Compressed PASSED

kafka.log.LogValidatorTest > testZStdCompressedWithUnavailableIBPVersion PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1NonCompressed PASSED

kafka.log.LogValidatorTest > testDownConversionOfTransactionalRecordsNotPermitted PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV1Compressed PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testControlRecordsNotAllowedFromClients PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV1 PASSED

kafka.log.LogValidatorTest > testRelativeOffsetAssignmentCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1NonCompressed PASSED

kafka.log.LogValidatorTest > testMisMatchMagic PASSED

kafka.log.LogValidatorTest > testLogAppendTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testControlRecordsNotCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testCompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOnlyOneBatch PASSED

kafka.log.LogValidatorTest > testAllowMultiBatch PASSED

kafka.log.LogValidatorTest > testInvalidOffsetRangeAndRecordCount PASSED

kafka.server.LogDirFailureTest > testIOExceptionDuringCheckpoint PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV1 PASSED

kafka.log.LogValidatorTest > testLogAppendTimeWithoutRecompressionV2 PASSED

kafka.log.LogValidatorTest > testUncompressedBatchWithoutRecordsNotAllowed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0NonCompressed PASSED

kafka.log.LogValidatorTest > testAbsoluteOffsetAssignmentNonCompressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV2ToV1Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterDownConversionV1ToV0Compressed PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV0ToV2Compressed PASSED

kafka.log.LogValidatorTest > testNonCompressedV1 PASSED

kafka.log.LogValidatorTest > testNonCompressedV2 PASSED

kafka.log.LogValidatorTest > testOffsetAssignmentAfterUpConversionV1ToV2NonCompressed PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV1 PASSED

kafka.log.LogValidatorTest > testInvalidCreateTimeCompressedV2 PASSED

kafka.log.LogValidatorTest > testRecompressionV1 PASSED

kafka.log.LogValidatorTest > testRecompressionV2 PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeInvalidJson PASSED

kafka.zk.ReassignPartitionsZNodeTest > testEncode PASSED

kafka.zk.ReassignPartitionsZNodeTest > testDecodeValidJson PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.zk.KafkaZkClientTest > testCreateConfigChangeNotification PASSED

kafka.api.SslProducerSendTest > testSendOffset PASSED

kafka.server.DynamicConfigChangeTest > testUserQuotaConfigChange PASSED

kafka.api.PlaintextProducerSendTest > testSendOffset PASSED

kafka.zk.KafkaZkClientTest > testDelegationTokenMethods PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.admin.LeaderElectionCommandTest > testInvalidBroker PASSED

kafka.server.FetchRequestDownConversionConfigTest > testV1FetchWithTopicLevelOverrides PASSED

kafka.server.FetchRequestTest > testFetchRequestV2WithOversizedMessage PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.api.TransactionsTest > testDelayedFetchIncludesAbortedTransaction PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasEmptyReplicaList PASSED

kafka.server.DynamicConfigChangeTest > testClientIdQuotaConfigChange PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testSingletonPartitionGiven PASSED

kafka.api.PlaintextProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.api.ProducerFailureHandlingTest > testWrongBrokerList PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testKafkaAdminClientWithAuthenticationFailure PASSED

kafka.admin.AclCommandTest > testProducerConsumerCliWithAuthorizer PASSED

kafka.admin.DeleteTopicTest > testDeleteNonExistingTopic PASSED

kafka.server.MetadataRequestTest > testAllTopicsRequest PASSED

kafka.server.DynamicConfigChangeTest > testUserClientIdQuotaChange PASSED

kafka.api.SslProducerSendTest > testSendCompressedMessageWithCreateTime PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldFailIfProposedHasInvalidBrokerID PASSED

kafka.admin.LeaderElectionCommandTest > testPartitionWithoutTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAtMinIsrPartitions PASSED

kafka.server.CreateTopicsRequestTest > testErrorCreateTopicsRequests PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicas PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaProperties PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.network.DynamicConnectionQuotaTest > testDynamicListenerConnectionQuota PASSED

kafka.tools.ConsumerPerformanceTest > testDetailedHeaderMatchBody PASSED

kafka.tools.ConsumerPerformanceTest > testConfigWithUnrecognizedOption PASSED

kafka.tools.ConsumerPerformanceTest > testConfig PASSED

kafka.tools.ConsumerPerformanceTest > testNonDetailedHeaderMatchBody PASSED

kafka.admin.DeleteTopicTest > testRecreateTopicAfterDeletion PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.server.MetadataRequestTest > testClusterIdIsValid PASSED

kafka.server.DynamicBrokerReconfigurationTest > testThreadPoolResize PASSED

kafka.server.DynamicConfigChangeTest > shouldParseRegardlessOfWhitespaceAroundValues PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSinglePartition PASSED

kafka.api.SaslClientsWithInvalidCredentialsTest > testConsumerWithAuthenticationFailure PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[0] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[1] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[2] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[3] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[4] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[5] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[6] PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDurationToEarliest PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[7] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[8] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[9] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[10] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[11] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[12] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[13] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[14] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[15] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[16] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[17] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[18] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[19] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[20] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[21] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[22] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[23] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[24] PASSED

kafka.admin.LeaderElectionCommandTest > testMissingElectionType PASSED

kafka.api.AuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[25] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[26] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[27] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[28] PASSED

kafka.log.BrokerCompressionTest > testBrokerSideCompression[29] PASSED

kafka.server.LogDirFailureTest > brokerWithOldInterBrokerProtocolShouldHaltOnLogDirFailure PASSED

kafka.server.CreateTopicsRequestTest > testInvalidCreateTopicsRequests PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentDuplicateEntries PASSED

kafka.server.FetchRequestTest > testDownConversionWithConnectionFailure PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserQuotaConfigChange PASSED

kafka.api.ProducerFailureHandlingTest > testResponseTooLargeForReplicationWithAckAll PASSED

kafka.admin.DeleteTopicTest > testDisableDeleteTopic PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.api.UserQuotaTest > testThrottledProducerConsumer PASSED

kafka.api.TransactionsTest > testOffsetMetadataInSendOffsetsToTransaction PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeSimpleConsumerGroup PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclAuthorizationDenied PASSED

kafka.server.DynamicConfigChangeTest > shouldParseReplicationQuotaReset PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.server.MetadataRequestTest > testNoTopicsRequest PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.admin.LeaderElectionCommandTest > testMissingTopicPartitionSelection PASSED

kafka.server.CreateTopicsRequestTest > testNotController PASSED

kafka.api.ApiVersionTest > testApiVersionUniqueIds PASSED

kafka.api.ApiVersionTest > testMinSupportedVersionFor PASSED

kafka.api.ApiVersionTest > testShortVersion PASSED

kafka.api.ApiVersionTest > testApply PASSED

kafka.api.ApiVersionTest > testApiVersionValidator PASSED

kafka.log.OffsetIndexTest > lookupExtremeCases PASSED

kafka.log.OffsetIndexTest > appendTooMany PASSED

kafka.log.OffsetIndexTest > testEntry PASSED

kafka.log.OffsetIndexTest > testSanityLastOffsetEqualToBaseOffset PASSED

kafka.log.OffsetIndexTest > forceUnmapTest PASSED

kafka.log.OffsetIndexTest > testFetchUpperBoundOffset PASSED

kafka.log.OffsetIndexTest > randomLookupTest PASSED

kafka.log.OffsetIndexTest > testEntryOverflow PASSED

kafka.log.OffsetIndexTest > testReopen PASSED

kafka.log.OffsetIndexTest > appendOutOfOrder PASSED

kafka.log.OffsetIndexTest > truncate PASSED

kafka.server.DynamicConfigChangeTest > testDefaultUserClientIdQuotaConfigChange PASSED

kafka.api.ConsumerBounceTest > testCloseDuringRebalance PASSED

kafka.admin.DeleteTopicTest > testAddPartitionDuringDeleteTopic PASSED

kafka.api.UserClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfNonExistingGroup PASSED

kafka.server.FetchRequestTest > testCurrentEpochValidation PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativeReplicationFactor PASSED

kafka.admin.AclCommandTest > testAclCliWithAdminAPI PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.server.DynamicConfigChangeTest > testConfigChangeOnNonExistingTopic PASSED

kafka.server.LogDirFailureTest > testReplicaFetcherThreadAfterLogDirFailureOnFollower PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.TransactionsTest > testConsecutivelyRunInitTransactions PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultiplePartitionsSameAssignment PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformMultipleReassignmentOperationsOverVariousTopics PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicWithAllAliveReplicas PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithLeaderThrottle PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnOneTopic PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.api.PlaintextConsumerTest > testLowMaxFetchSizeForRequestAndPartition PASSED

kafka.integration.UncleanLeaderElectionTest > testTopicUncleanLeaderElectionEnable PASSED

kafka.server.MetadataRequestTest > testAutoCreateTopicWithInvalidReplicationFactor PASSED

kafka.api.PlaintextProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.server.FetchRequestTest > testCreateIncrementalFetchWithPartitionsInError PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiVersionRequest PASSED

kafka.server.DynamicConfigChangeTest > testConfigChange PASSED

kafka.api.MetricsTest > testMetrics PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithInvalidReplicationFactor PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testTopicDoesNotExist PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsNotExistingGroup PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldShrinkCluster PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.server.MetadataRequestTest > testPreferredReplica PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithConsumersWithoutAssignedPartitions PASSED

kafka.server.DynamicConfigChangeTest > testDynamicTopicConfigChange PASSED

kafka.server.EdgeCaseRequestTest > testMalformedHeaderRequest PASSED

kafka.server.FetchRequestTest > testFetchRequestV4WithReadCommitted PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations PASSED

kafka.admin.LeaderElectionCommandTest > testTopicPartition PASSED

kafka.admin.DeleteTopicTest > testDeleteTopicDuringAddPartition PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.controller.ControllerIntegrationTest > testControllerDetectsBouncedBrokers PASSED

kafka.api.TransactionsTest > testReadCommittedConsumerShouldNotSeeUndecidedData PASSED

kafka.admin.ReassignPartitionsClusterTest > testHwAfterPartitionReassignment PASSED

kafka.server.MetadataRequestTest > testClusterIdWithRequestVersion1 PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersOfExistingGroupWithNoMembers PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnStopPolling PASSED

kafka.server.EdgeCaseRequestTest > testProduceRequestWithNullClientId PASSED

kafka.api.LogAppendTimeTest > testProduceConsume PASSED

kafka.log.TransactionIndexTest > testTruncate PASSED

kafka.log.TransactionIndexTest > testAbortedTxnSerde PASSED

kafka.log.TransactionIndexTest > testRenameIndex PASSED

kafka.log.TransactionIndexTest > testPositionSetCorrectlyWhenOpened PASSED

kafka.log.TransactionIndexTest > testLastOffsetCannotDecrease PASSED

kafka.log.TransactionIndexTest > testLastOffsetMustIncrease PASSED

kafka.log.TransactionIndexTest > testSanityCheck PASSED

kafka.log.TransactionIndexTest > testCollectAbortedTransactions PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabled PASSED

kafka.cluster.ReplicaTest > testCannotIncrementLogStartOffsetPastHighWatermark PASSED

kafka.cluster.ReplicaTest > testSegmentDeletionWithHighWatermarkInitialization PASSED

kafka.controller.ControllerIntegrationTest > testControlledShutdown PASSED

kafka.cluster.ReplicaTest > testCannotDeleteSegmentsAtOrAboveHighWatermark PASSED

kafka.server.ReplicationQuotasTest > shouldThrottleOldSegments PASSED

kafka.api.ProducerFailureHandlingTest > testNonExistentTopic PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSaslListeners PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromCallerThread PASSED

kafka.server.MetadataRequestTest > testAutoTopicCreation PASSED

kafka.server.EdgeCaseRequestTest > testInvalidApiKeyRequest PASSED

kafka.api.ClientIdQuotaTest > testProducerConsumerOverrideUnthrottled PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithUnrecognizedNewConsumerOption PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclOperations2 PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.PlaintextProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.log.LogCleanerManagerTest > testUndecidedTransactionalDataNotCleanable PASSED

kafka.log.LogCleanerManagerTest > testLogsUnderCleanupIneligibleForCompaction PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresInProgressPartitions PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForNone PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactLogs PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldConsiderCleanupPolicyCompactDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndLogTruncation PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderUncleanablePartitions PASSED

kafka.log.LogCleanerManagerTest > testLogsWithSegmentsToDeleteShouldNotConsiderCleanupPolicyDeleteLogs PASSED

kafka.log.LogCleanerManagerTest > testConcurrentLogCleanupAndTopicDeletion PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupStateWithShortInitializationTimeout PASSED

kafka.log.LogCleanerManagerTest > testCleanableOffsetsForShortTime PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogReturnsLogWithDirtiestRatio PASSED

kafka.log.LogCleanerManagerTest > testGrabFilthiestCompactedLogIgnoresBothInProgressPartitionsAndUncleanablePartitions PASSED

kafka.server.EdgeCaseRequestTest > testHeaderOnlyRequest PASSED

kafka.log.LogCleanerManagerTest > testDoneCleaning PASSED

kafka.log.LogCleanerManagerTest > testDoneDeleting PASSED

kafka.api.TransactionsTest > testFencingOnSend PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldPerformThrottledReassignmentOverVariousTopics PASSED

kafka.admin.DeleteTopicTest > testDeletingPartiallyDeletedTopic PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInRevocation PASSED

kafka.server.GssapiAuthenticationTest > testServerNotFoundInKerberosDatabase PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsingWithDefaultClientIdQuota PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentWithOfflineReplicaHaltingProgress PASSED

kafka.server.ClientQuotaManagerTest > testUserQuotaParsing PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeMembersWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.controller.ControllerIntegrationTest > testControllerEpochPersistsWhenAllBrokersDown PASSED

kafka.server.ClientQuotaManagerTest > testClientIdQuotaParsing PASSED

kafka.api.PlaintextEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testWithOfflinePreferredReplica PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldChangeThrottleOnRerunAndRemoveOnVerify PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[0] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[0] PASSED

kafka.api.TransactionsTest > testFencingOnCommit PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[0] PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateIfItAlreadyExists PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAclDelete PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithAssign PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroups PASSED

kafka.server.ClientQuotaManagerTest > testQuotaViolation PASSED

kafka.api.SslConsumerTest > testCoordinatorFailover PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreationWithOfflineReplica PASSED

kafka.admin.ReassignPartitionsClusterTest > shouldMoveSubsetOfPartitions PASSED

kafka.server.ClientQuotaManagerTest > testRequestPercentageQuotaViolation PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonOffsetCommitGroup PASSED

kafka.server.ClientQuotaManagerTest > testQuotaConfigPrecedence PASSED

kafka.api.PlaintextConsumerTest > testPartitionsForInvalidTopic PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.server.ClientQuotaManagerTest > testExpireQuotaSensors PASSED

kafka.server.GssapiAuthenticationTest > testRequestIsAReplay PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeNonExistingGroup PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithStaleBrokerEpoch PASSED

kafka.server.DynamicBrokerReconfigurationTest > testTrustStoreAlter PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicSelectedGroups PASSED

kafka.server.ClientQuotaManagerTest > testClientIdNotSanitized PASSED

kafka.api.ProducerFailureHandlingTest > testInvalidPartition PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignmentResumesAfterReplicaComesOnline PASSED

kafka.api.TransactionsTest > testMultipleMarkersOneLeader PASSED

kafka.api.SslConsumerTest > testSimpleConsumption PASSED

kafka.utils.LoggingTest > testLog4jControllerIsRegistered PASSED

kafka.utils.LoggingTest > testLogName PASSED

kafka.utils.LoggingTest > testLogNameOverride PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotLeaderForPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRemoveTopicPartitionFromWaitingSetOnUnsupportedForMessageFormat PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenRecordListTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenInvalidProducerEpoch PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenInvalidRequiredAcksError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldReEnqueuePartitionsWhenBrokerDisconnected PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNoErrors PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenCorruptMessageError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorLoading PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWheCoordinatorEpochFenced PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenUnknownError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldCompleteDelayedOperationWhenCoordinatorEpochChanged PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenUnknownTopicOrPartitionError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldRetryPartitionWhenNotEnoughReplicasAfterAppendError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionWhenMessageTooLargeError PASSED

kafka.coordinator.transaction.TransactionMarkerRequestCompletionHandlerTest > shouldThrowIllegalStateExceptionIfErrorCodeNotAvailableForPid PASSED

kafka.server.ClientQuotaManagerTest > testExpireThrottleTimeSensor PASSED

kafka.api.ProducerFailureHandlingTest > testSendAfterClosed PASSED

kafka.api.SslProducerSendTest > testCloseWithZeroTimeoutFromSenderThread PASSED

kafka.server.BrokerEpochIntegrationTest > testControlRequestWithCorrectBrokerEpoch PASSED

kafka.server.ReplicationQuotasTest > shouldBootstrapTwoBrokersWithFollowerThrottle PASSED

kafka.server.ClientQuotaManagerTest > testUserClientIdQuotaParsing PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionDisabled PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.api.ProducerFailureHandlingTest > testTooLargeRecordWithAckZero PASSED

kafka.api.UserQuotaTest > testQuotaOverrideDelete PASSED

kafka.server.BrokerEpochIntegrationTest > testReplicaManagerBrokerEpochMatchesWithZk PASSED

kafka.server.ClientQuotaManagerTest > testUserClientQuotaParsingIdWithDefaultClientIdQuota PASSED

kafka.api.UserClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.ConsumerBounceTest > testClose PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabled PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testNoPartitionsGiven PASSED

kafka.server.GssapiAuthenticationTest > testServerAuthenticationFailure PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.ClientIdQuotaTest > testThrottledProducerConsumer PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionInvalidTopicOverride PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithRoundRobinAssignor PASSED

kafka.api.ProducerFailureHandlingTest > testPartitionTooLargeForReplicationWithAckAll PASSED

kafka.server.BrokerEpochIntegrationTest > testControllerBrokerEpochCacheMatchesWithZk PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansionWithOfflineReplica PASSED

kafka.server.DelayedFetchTest > testCompleteWhenFollowerLaggingHW PASSED

kafka.server.DelayedFetchTest > testFetchWithFencedEpoch PASSED

kafka.utils.json.JsonValueTest > testJsonObjectIterator PASSED

kafka.utils.json.JsonValueTest > testDecodeLong PASSED

kafka.utils.json.JsonValueTest > testAsJsonObject PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerStickyAssignment PASSED

kafka.utils.json.JsonValueTest > testDecodeDouble PASSED

kafka.utils.json.JsonValueTest > testDecodeOption PASSED

kafka.utils.json.JsonValueTest > testDecodeString PASSED

kafka.utils.json.JsonValueTest > testJsonValueToString PASSED

kafka.utils.json.JsonValueTest > testAsJsonObjectOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArrayOption PASSED

kafka.utils.json.JsonValueTest > testAsJsonArray PASSED

kafka.utils.json.JsonValueTest > testJsonValueHashCode PASSED

kafka.utils.json.JsonValueTest > testDecodeInt PASSED

kafka.utils.json.JsonValueTest > testDecodeMap PASSED

kafka.utils.json.JsonValueTest > testDecodeSeq PASSED

kafka.utils.json.JsonValueTest > testJsonObjectGet PASSED

kafka.utils.json.JsonValueTest > testJsonValueEquals PASSED

kafka.utils.json.JsonValueTest > testJsonArrayIterator PASSED

kafka.utils.json.JsonValueTest > testJsonObjectApply PASSED

kafka.utils.json.JsonValueTest > testDecodeBoolean PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldNotAbortExpiredTransactionsThatHaveAPendingStateTransition PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnInitPidWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenPidDosentMatchMapped PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnConcurrentTxnRequestOnEndTxnRequestWhenStatusIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnEndTxnWhenIsNotCoordinatorForId PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidTnxProduceEpochOnAddPartitionsWhenEpochsAreDifferent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidRequestWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidPidMappingOnAddPartitionsToTransactionWhenTransactionalIdNotPresent PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithInvalidPidMappingOnEndTxnWhenTxnIdDoesntExist PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldUseLastEpochToFenceWhenEpochsAreExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReplyWithProducerFencedOnEndTxnWhenEpochIsNotSameAsTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteCommitTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortTransactionOnHandleInitPidWhenExistingTransactionInOngoingState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnAddPartitionsWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnAddPartitionsWhenCoordintorLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteAbortAndResultIsNotAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsOngoing PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingEmptyTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteAbortAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareCommitToLogOnEndTxnWhenStatusIsOngoingAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendNewMetadataToLogOnAddPartitionsWhenPartitionsAdded PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithCoordinatorLoadInProgressOnEndTxnWhenCoordinatorIsLoading PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithSuccessOnAddPartitionsWhenStateIsCompleteAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithErrorsNoneOnAddPartitionWhenNoErrorsAndPartitionsTheSame PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestOnEndTxnWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithInvalidRequestAddPartitionsToTransactionWhenTransactionalIdIsEmpty PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAppendPrepareAbortToLogOnEndTxnWhenStatusIsOngoingAndResultIsAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAcceptInitPidAndReturnNextPidWhenTransactionalIdIsNull PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRemoveTransactionsForPartitionOnEmigration PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldWaitForCommitToCompleteOnHandleInitPidAndExistingTransactionInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldAbortExpiredTransactionsInOngoingStateAndBumpEpoch PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnInvalidTxnRequestOnEndTxnRequestWhenStatusIsCompleteCommitAndResultIsNotCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldReturnOkOnEndTxnWhenStatusIsCompleteCommitAndResultIsCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionsOnAddPartitionsWhenStateIsPrepareCommit PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldIncrementEpochAndUpdateMetadataOnHandleInitPidWhenExistingCompleteTransaction PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldGenerateNewProducerIdIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithNotCoordinatorOnInitPidWhenNotCoordinator PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldRespondWithConcurrentTransactionOnAddPartitionsWhenStateIsPrepareAbort PASSED

kafka.coordinator.transaction.TransactionCoordinatorTest > shouldInitPidWithEpochZeroForNewTransactionalId PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicWrite PASSED

kafka.api.DelegationTokenEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsOfNonExistingGroup PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToZonedDateTime PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithExcludeInternal PASSED

kafka.api.TransactionsTest > testCommitTransactionTimeout PASSED

kafka.api.UserQuotaTest > testThrottledRequest PASSED

kafka.log.OffsetMapTest > testClear PASSED

kafka.log.OffsetMapTest > testGetWhenFull PASSED

kafka.log.OffsetMapTest > testBasicValidation PASSED

kafka.api.ProducerFailureHandlingTest > testNotEnoughReplicasAfterBrokerShutdown PASSED

kafka.utils.PasswordEncoderTest > testEncoderConfigChange PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testAcls PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecodeAlgorithms PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElectionWithOfflinePreferredReplica PASSED

kafka.utils.PasswordEncoderTest > testEncodeDecode PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionBeatsConsumerOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailure PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithNonExistingMember PASSED

kafka.coordinator.group.GroupMetadataTest > testConsumerBeatsTransactionalOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGenerationEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenDead PASSED

kafka.coordinator.group.GroupMetadataTest > testInitNextGeneration PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToEmptyTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocol PASSED

kafka.coordinator.group.GroupMetadataTest > testCannotRebalanceWhenPreparingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testFailedTxnOffsetCommitLeavesNoPendingState PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenCompletingRebalance PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToAwaitingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeJoinCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolRaisesIfNoMembers PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstance PASSED

kafka.coordinator.group.GroupMetadataTest > testTransactionalCommitIsAbortedAndConsumerCommitWins PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToPreparingRebalanceTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToDeadTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testStableToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitFailureWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testDeadToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommit PASSED

kafka.coordinator.group.GroupMetadataTest > testAwaitingRebalanceToStableTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testSupportsProtocols PASSED

kafka.coordinator.group.GroupMetadataTest > testEmptyToStableIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testCanRebalanceWhenStable PASSED

kafka.coordinator.group.GroupMetadataTest > testNotInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testOffsetCommitWithAnotherPending PASSED

kafka.coordinator.group.GroupMetadataTest > testReplaceGroupInstanceWithEmptyGroupInstanceId PASSED

kafka.coordinator.group.GroupMetadataTest > testPreparingRebalanceToPreparingRebalanceIllegalTransition PASSED

kafka.coordinator.group.GroupMetadataTest > testInvokeSyncCallback PASSED

kafka.coordinator.group.GroupMetadataTest > testSelectProtocolChoosesCompatibleProtocol PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[0] PASSED

kafka.server.DeleteTopicsRequestWithDeletionDisabledTest > testDeleteRecordsRequest PASSED

kafka.api.SslProducerSendTest > testSendBeforeAndAfterPartitionExpansion PASSED

kafka.api.PlaintextConsumerTest > testPauseStateNotPreservedByRebalance PASSED

kafka.controller.TopicDeletionManagerTest > testBrokerFailureAfterDeletionStarted PASSED

kafka.controller.TopicDeletionManagerTest > testInitialization PASSED

kafka.controller.TopicDeletionManagerTest > testBasicDeletion PASSED

kafka.controller.TopicDeletionManagerTest > testDeletionWithBrokerOffline PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldInitTransactionsWhenAclSet PASSED

kafka.tools.ConsoleConsumerTest > shouldLimitReadsToMaxMessageLimit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseGroupIdFromBeginningGivenTogether PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnOffsetWithoutPartition PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithNegativePartitionCount PASSED

kafka.tools.ConsoleConsumerTest > shouldStopWhenOutputCheckErrorFails PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnInvalidConfigWithAutoOffsetResetAndConflictingFromBeginning PASSED

kafka.tools.ConsoleConsumerTest > shouldResetUnConsumedOffsetsBeforeExit PASSED

kafka.tools.ConsoleConsumerTest > shouldParseConfigsFromFile PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetLatest PASSED

kafka.tools.ConsoleConsumerTest > groupIdsProvidedInDifferentPlacesMustMatch PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetAndMatchingFromBeginning PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnGroupIdAndPartitionGivenTogether PASSED

kafka.tools.ConsoleConsumerTest > shouldExitOnUnrecognizedNewConsumerOption PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithNumericOffset PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithAutoOffsetResetEarliest PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidSimpleConsumerValidConfigWithStringOffset PASSED

kafka.tools.ConsoleConsumerTest > testCustomPropertyShouldBePassedToConfigureMethod PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerValidConfig PASSED

kafka.tools.ConsoleConsumerTest > shouldParseValidConsumerConfigWithNoOffsetReset PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnControlPlane PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeExistingGroupWithNoMembers PASSED

kafka.server.DynamicBrokerReconfigurationTest > testUncleanLeaderElectionEnable PASSED

kafka.server.ServerStartupTest > testBrokerStateRunningAfterZK PASSED

kafka.api.GroupEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.server.ServerStartupTest > testBrokerCreatesZKChroot PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionEnabledByTopicOverride PASSED

kafka.api.UserClientIdQuotaTest > testThrottledRequest PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWhenTopicDoesntExist PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeAllExistingGroups PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursFetchSizeIfLargeRecordNotFirst PASSED

kafka.admin.PreferredReplicaLeaderElectionCommandTest > testMultipleBrokersGiven PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldSurviveFastLeaderChange PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl PASSED

kafka.server.ServerStartupTest > testConflictBrokerStartupWithSamePort PASSED

kafka.api.TransactionsTest > testSendOffsets PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsExplicit PASSED

kafka.KafkaTest > testKafkaSslPasswordsWithSymbols PASSED

kafka.KafkaTest > testConnectionsMaxReauthMsDefault PASSED

kafka.KafkaTest > testKafkaSslPasswords PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgs PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheEnd PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsOnly PASSED

kafka.KafkaTest > testGetKafkaConfigFromArgsNonArgsAtTheBegging PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliest PASSED

kafka.controller.ControllerFailoverTest > testHandleIllegalStateException PASSED

kafka.tools.ReplicaVerificationToolTest > testReplicaBufferVerifyChecksum PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignmentPartitionsOfDifferentSize PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommaSeparatedRegex PASSED

kafka.server.ListOffsetsRequestTest > testListOffsetsErrorCodes PASSED

kafka.server.ServerStartupTest > testConflictBrokerRegistration PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicAndGroupRead PASSED

kafka.controller.ControllerIntegrationTest > testAutoPreferredReplicaLeaderElection PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.server.ServerStartupTest > testBrokerSelfAware PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.PlaintextConsumerTest > testSeek PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsRemoveNonExistentTopics PASSED

kafka.server.ListOffsetsRequestTest > testCurrentEpochValidation PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithNoTopicAccess PASSED

kafka.api.EndToEndClusterIdTest > testEndToEnd PASSED

kafka.tools.MirrorMakerIntegrationTest > testCommitOffsetsThrowTimeoutException PASSED

kafka.controller.PartitionStateMachineTest > testNonexistentPartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionErrorCodeFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToUncleanOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOfflineTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCount PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNonexistentPartitionToOfflinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidNewPartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNewPartitionTransition PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.controller.PartitionStateMachineTest > testUpdatingOfflinePartitionsCountDuringTopicDeletion PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransitionErrorCodeFromStateLookup PASSED

kafka.controller.PartitionStateMachineTest > testOnlinePartitionToOnlineTransitionForControlledShutdown PASSED

kafka.controller.PartitionStateMachineTest > testNewPartitionToOnlinePartitionTransitionZooKeeperClientExceptionFromCreateStates PASSED

kafka.controller.PartitionStateMachineTest > testNoOfflinePartitionsChangeForTopicsBeingDeleted PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOnlinePartitionToNonexistentPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testInvalidOfflinePartitionToNewPartitionTransition PASSED

kafka.controller.PartitionStateMachineTest > testOfflinePartitionToOnlinePartitionTransition PASSED

kafka.controller.ControllerIntegrationTest > testTopicCreation PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDataChange PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperSessionStateMetric PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.zookeeper.ZooKeeperClientTest > testExceptionInBeforeInitializingSession PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToWriteToNonExistentTopic PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNode PASSED

kafka.api.ConsumerBounceTest > testSeekAndCommitWithBrokerFailures PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnection PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForCreation PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreAlter PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclExistingZNode PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiryDuringClose PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicDeletion PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetAclNonExistentZNode PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeWithConsumersWithoutAssignedPartitions PASSED

kafka.server.ListOffsetsRequestTest > testResponseIncludesLeaderEpoch PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldGetEpochsFromReplica PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnUnknownTopicOrPartitionIfThrown PASSED

kafka.server.epoch.OffsetsForLeaderEpochTest > shouldReturnNoLeaderForPartitionIfThrown PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[0] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[1] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnClusterToReadFromNonExistentTopic PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[1] PASSED

kafka.controller.ControllerIntegrationTest > testPartitionReassignment PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[1] PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithNullGroupId PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExportImportPlan PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeGroupWithShortInitializationTimeout PASSED

kafka.api.ConsumerBounceTest > testConsumerReceivesFatalExceptionWhenGroupPassesMaxSize PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithDescribe PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.controller.ControllerIntegrationTest > testTopicPartitionExpansion PASSED

kafka.api.AuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.api.PlaintextConsumerTest > testPositionAndCommit PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.SaslScramSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.controller.ControllerEventManagerTest > testEventQueueTime PASSED

kafka.api.AdminClientIntegrationTest > testDescribeReplicaLogDirs PASSED

kafka.controller.ControllerEventManagerTest > testEventThatThrowsException PASSED

kafka.server.DynamicBrokerReconfigurationTest > testKeyStoreDescribeUsingAdminClient PASSED

kafka.server.DynamicBrokerReconfigurationTest > testAddRemoveSslListener SKIPPED

kafka.controller.ControllerEventManagerTest > testSuccessfulEvent PASSED

kafka.controller.ControllerEventManagerTest > testMetricsCleanedOnClose PASSED

kafka.tools.DumpLogSegmentsTest > testPrintDataLog PASSED

kafka.tools.DumpLogSegmentsTest > testDumpIndexMismatches PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeOffsetsWithMultiPartitionTopicAndMultipleConsumers PASSED

kafka.tools.DumpLogSegmentsTest > testDumpTimeIndexErrors PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSuccessfullyAbortTransactionAfterTopicAuthorizationException PASSED

kafka.integration.UncleanLeaderElectionTest > testUncleanLeaderElectionDisabledByTopicOverride PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveIncrementsControllerEpoch PASSED

kafka.api.ClientIdQuotaTest > testQuotaOverrideDelete PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateAlterTopicWithRackAware PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevels PASSED

kafka.admin.DescribeConsumerGroupTest > testDescribeStateOfExistingGroupWithNoMembers PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanMaxPartitionFetchBytes PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupWriteAccess PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochSecondTimeIfLeaderRepliesWithEpochNotKnownToFollower PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochOnFirstFetchOnlyIfLeaderEpochKnownToBoth PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToInitialFetchOffsetIfLeaderReturnsUndefinedOffset PASSED

kafka.api.ClientIdQuotaTest > testThrottledRequest PASSED

kafka.controller.ControllerIntegrationTest > testLeaderAndIsrWhenEntireIsrOfflineAndUncleanLeaderElectionEnabled PASSED

kafka.utils.ShutdownableThreadTest > testShutdownWhenCalledAfterThreadStart PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSaveForLaterWhenLeaderUnknownButNotAvailable PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateEmptyMapWhenNoRequestsOutstanding PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCreateMetricsOnStarting PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldAbortAppendToLogOnEndTxnWhenNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRetryAppendToLogOnEndTxnWhenCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldCompleteAppendToLogOnEndTxnWhenSendMarkersSucceed PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldGenerateRequestPerPartitionPerBroker PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldRemoveMarkersForTxnPartitionWhenPartitionEmigrated PASSED

kafka.coordinator.transaction.TransactionMarkerChannelManagerTest > shouldSkipSendMarkersWhenLeaderNotFound PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCannotResetRootLogger PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionLossRequestTermination PASSED

kafka.api.SslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToSpecificOffset PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsNonExistentZNode PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataNonExistentZNode PASSED

kafka.api.PlaintextConsumerTest > testUnsubscribeTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionWithTopicDescribeOnlyAndGroupRead PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPartitionReassignment PASSED

kafka.server.DynamicBrokerReconfigurationTest > testLogCleanerConfig PASSED

kafka.api.ConsumerBounceTest > testSubscribeWhenTopicUnavailable PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.server.ReplicaFetcherThreadTest > shouldPollIndefinitelyIfLeaderReturnsAnyException PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponse PASSED

kafka.server.ReplicaFetcherThreadTest > shouldHandleExceptionFromBlockingSend PASSED

kafka.server.ReplicaFetcherThreadTest > shouldSendLatestRequestVersionsByDefault PASSED

kafka.server.ReplicaFetcherThreadTest > shouldTruncateToOffsetSpecifiedInEpochOffsetResponseIfFollowerHasNoMoreEpochs PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFetchLeaderEpochRequestIfLastEpochDefinedForSomePartitions PASSED

kafka.server.ReplicaFetcherThreadTest > shouldUseLeaderEndOffsetIfInterBrokerVersionBelow20 PASSED

kafka.server.ReplicaFetcherThreadTest > shouldMovePartitionsOutOfTruncatingLogState PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupCliWithGroupDescribe PASSED

kafka.server.ReplicaFetcherThreadTest > shouldCatchExceptionFromBlockingSendWhenShuttingDownReplicaFetcherThread PASSED

kafka.server.ReplicaFetcherThreadTest > shouldFilterPartitionsMadeLeaderDuringLeaderEpochRequest PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnTopicCreation PASSED

kafka.zookeeper.ZooKeeperClientTest > testConnectionTimeout PASSED

kafka.api.AdminClientIntegrationTest > testInvalidAlterConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.zookeeper.ZooKeeperClientTest > testBlockOnRequestCompletionFromStateChangeHandler PASSED

kafka.zookeeper.ZooKeeperClientTest > testUnresolvableConnectString PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerSessionTimeoutOnClose PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenNonExistentZNode PASSED

kafka.zookeeper.ZooKeeperClientTest > testPipelinedGetData PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChildChangeHandlerForChildChange PASSED

kafka.api.SslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.network.SocketServerTest > testGracefulClose PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetChildrenExistingZNodeWithChildren PASSED

kafka.controller.ControllerIntegrationTest > testControllerRejectControlledShutdownRequestWithStaleBrokerEpoch PASSED

kafka.network.SocketServerTest > controlThrowable PASSED

kafka.network.SocketServerTest > testRequestMetricsAfterStop PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataExistingZNode PASSED

kafka.zookeeper.ZooKeeperClientTest > testMixedPipeline PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetDataExistingZNode PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteExistingZNode PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[1] PASSED

kafka.network.SocketServerTest > testConnectionIdReuse PASSED

kafka.network.SocketServerTest > testClientDisconnectionUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testProcessorMetricsTags PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testConnectionId PASSED

kafka.network.SocketServerTest > testBrokerSendAfterChannelClosedUpdatesRequestMetrics PASSED

kafka.network.SocketServerTest > testNoOpAction PASSED

kafka.network.SocketServerTest > simpleRequest PASSED

kafka.network.SocketServerTest > closingChannelException PASSED

kafka.network.SocketServerTest > testSendActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.api.PlaintextConsumerTest > testFetchRecordLargerThanFetchMaxBytes PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftPlus PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersNoop PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.network.SocketServerTest > testIdleConnection PASSED

kafka.network.SocketServerTest > testClientDisconnectionWithStagedReceivesFullyProcessed PASSED

kafka.network.SocketServerTest > testZeroMaxConnectionsPerIp PASSED

kafka.network.SocketServerTest > testMetricCollectionAfterShutdown PASSED

kafka.network.SocketServerTest > testSessionPrincipal PASSED

kafka.zookeeper.ZooKeeperClientTest > testSessionExpiry PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.zookeeper.ZooKeeperClientTest > testSetDataNonExistentZNode PASSED

kafka.network.SocketServerTest > configureNewConnectionException PASSED

kafka.network.SocketServerTest > testMaxConnectionsPerIpOverrides PASSED

kafka.network.SocketServerTest > testControlPlaneRequest PASSED

kafka.zookeeper.ZooKeeperClientTest > testDeleteNonExistentZNode PASSED

kafka.zookeeper.ZooKeeperClientTest > testExistsExistingZNode PASSED

kafka.controller.ControllerIntegrationTest > testBackToBackPreferredReplicaLeaderElections PASSED

kafka.network.SocketServerTest > processNewResponseException PASSED

kafka.zookeeper.ZooKeeperClientTest > testZooKeeperStateChangeRateMetrics PASSED

kafka.zookeeper.ZooKeeperClientTest > testZNodeChangeHandlerForDeletion PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.zookeeper.ZooKeeperClientTest > testGetAclNonExistentZNode PASSED

kafka.network.SocketServerTest > testConnectionRateLimit PASSED

kafka.api.ConsumerBounceTest > testRollingBrokerRestartsWithSmallerMaxGroupSizeConfigDisruptsBigGroup PASSED

kafka.api.ConsumerBounceTest > testConsumptionWithBrokerFailures SKIPPED

kafka.log.TimeIndexTest > testTruncate PASSED

kafka.log.TimeIndexTest > testEntry PASSED

kafka.log.TimeIndexTest > testAppend PASSED

kafka.log.TimeIndexTest > testEntryOverflow PASSED

kafka.log.TimeIndexTest > testLookUp PASSED

kafka.log.TimeIndexTest > testSanityCheck PASSED

kafka.zookeeper.ZooKeeperClientTest > testStateChangeHandlerForAuthFailure PASSED

kafka.network.SocketServerTest > processCompletedSendException PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.controller.ControllerIntegrationTest > testEmptyCluster PASSED

kafka.admin.TopicCommandWithAdminClientTest > testTopicDeletion PASSED

kafka.network.SocketServerTest > processDisconnectedException PASSED

kafka.network.SocketServerTest > sendCancelledKeyException PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.network.SocketServerTest > processCompletedReceiveException PASSED

kafka.network.SocketServerTest > testSocketsCloseOnShutdown PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingAlreadyDone PASSED

kafka.network.SocketServerTest > pollException PASSED

kafka.controller.ControllerIntegrationTest > testControllerMoveOnPreferredReplicaElection PASSED

kafka.network.SocketServerTest > testSslSocketServer PASSED

kafka.network.SocketServerTest > tooBigRequestIsRejected PASSED

kafka.network.SocketServerTest > testNoOpActionResponseWithThrottledChannelWhereThrottlingInProgress PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithNoTimestampInSourceMessage PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandler PASSED

kafka.tools.MirrorMakerTest > testDefaultMirrorMakerMessageHandlerWithHeaders PASSED

kafka.api.SaslPlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.AdminClientIntegrationTest > testAlterLogDirsAfterDeleteRecords PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLatest PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerDefaultAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.controller.ControllerIntegrationTest > testPreferredReplicaLeaderElection PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslPlaintextConsumerTest > testSimpleConsumption PASSED

kafka.utils.timer.TimerTaskListTest > testAll PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithEmptyControlBatch PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithTombstones PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedTransactionalOffsetCommits PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnClose PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetCommitted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsWithoutGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupNotExists PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadEmptyGroupWithOffsets PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValue PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetCommitsFromMultipleProducers PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptySimpleGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetWithExplicitRetention PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetFromOldCommit PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testAddGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithLargeGroupMetadataRecord PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemovalWithLogAppendTime PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsTransactionWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetWriteAfterGroupRemoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadTransactionalOffsetsWithoutGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreNonEmptyGroupWhenCoordinatorHasMoved PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadWithConsumerAndTransactionalOffsetCommitsConsumerWins PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testloadGroupWithStaticMember PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAborted PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testMetrics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithNoneExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testReadFromOldGroupMetadata PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testTransactionalCommitOffsetAppendFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationOfSimpleConsumer PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupMetadataRemoval PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupWithTombstone PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadWithCommittedAndAbortedAndPendingTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testSerdeOffsetCommitValueWithExpireTimestamp PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadOffsetsAndGroup PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testGroupLoadedWithPendingCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreGroupErrorMapping PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testCommitOffsetFailure PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testLoadGroupAndOffsetsFromDifferentSegments PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testOffsetExpirationSemantics PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireOffset PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testExpireGroupWithOffsetsOnly PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testDoNotLoadAbortedTransactionalOffsetCommits PASSED

kafka.coordinator.group.GroupMetadataManagerTest > testStoreEmptyGroup PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersAndNoop PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationOnBrokerChange PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[1] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[2] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[2] PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsShiftByLowerThanEarliest PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[2] PASSED

kafka.api.PlaintextConsumerTest > testListTopics PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaults PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.controller.ControllerIntegrationTest > testMetadataPropagationForOfflineReplicas PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPaths PASSED

kafka.zk.ExtendedAclStoreTest > shouldRoundTripChangeNode PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowFromEncodeOnLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldThrowIfConstructedWithLiteral PASSED

kafka.zk.ExtendedAclStoreTest > shouldWriteChangesToTheWritePath PASSED

kafka.zk.ExtendedAclStoreTest > shouldHaveCorrectPatternType PASSED

kafka.api.PlaintextConsumerTest > testExpandingTopicSubscriptions PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.AdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.PlaintextConsumerTest > testInterceptors PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectPreferredLeaders PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.api.AdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.api.PlaintextConsumerTest > testConsumingWithEmptyGroupId PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.api.AdminClientIntegrationTest > testClose PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.AuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeReportOverriddenConfigs PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[2] PASSED

kafka.api.PlaintextConsumerTest > testPatternUnsubscription PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInCommit PASSED

kafka.api.AuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndPartitionCount PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoAccess PASSED

kafka.api.PlaintextConsumerTest > testGroupConsumption PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumeAfterDeleteRecords PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopicAllGroups PASSED

kafka.api.AuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeUsingAssignWithNoAccess PASSED

kafka.api.PlaintextConsumerTest > testPartitionsFor PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.GroupEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.AdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicRead PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnRebalance PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithNoTopicAccess PASSED

kafka.api.SaslPlainSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testClose PASSED

kafka.utils.ReplicationUtilsTest > testUpdateLeaderAndIsr PASSED

kafka.coordinator.group.MemberMetadataTest > testMatchesSupportedProtocols PASSED

kafka.coordinator.group.MemberMetadataTest > testHasValidGroupInstanceId PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadata PASSED

kafka.coordinator.group.MemberMetadataTest > testMetadataRaisesOnUnsupportedProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteForPreferredProtocol PASSED

kafka.coordinator.group.MemberMetadataTest > testVoteRaisesOnNoSupportedProtocols PASSED

kafka.api.PlaintextConsumerTest > testInterceptorsWithWrongKeyValue PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsByDuration PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithDeleteGroupAcl PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.GroupEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArg PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseSingleArg PASSED

kafka.utils.CommandLineUtilsTest > testParseArgs PASSED

kafka.utils.CommandLineUtilsTest > testParseArgsWithMultipleDelimiters PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultValueIfNotExist PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgWithNoDelimiter PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsDefaultOverwriteExisting PASSED

kafka.utils.CommandLineUtilsTest > testParseEmptyArgAsValid PASSED

kafka.utils.CommandLineUtilsTest > testMaybeMergeOptionsNotOverwriteExisting PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > offsetsShouldNotGoBackwards PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentTransactionExpiration PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentRandomSequences PASSED

kafka.coordinator.transaction.TransactionCoordinatorConcurrencyTest > testConcurrentLoadUnloadPartitions PASSED

kafka.api.AuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteRecordsWithWildCardAuth PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadWithMaxPollRecords PASSED

kafka.api.AdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.api.AuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[2] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[3] PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchFollowerRequest PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[3] PASSED

kafka.api.PlaintextConsumerTest > testHeaders PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[3] PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldFollowLeaderEpochBasicWorkflow PASSED

kafka.api.AdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInProduce PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToLocalDateTime PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToReadFromNonExistentTopic PASSED

kafka.api.PlaintextConsumerTest > testMaxPollIntervalMsDelayInAssignment PASSED

kafka.api.AdminClientIntegrationTest > testForceClose PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsExistingTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopicWithDescribeOnlyPermission PASSED

kafka.api.PlaintextConsumerTest > testHeadersSerializerDeserializer PASSED

kafka.api.AdminClientIntegrationTest > testListNodes PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testReplicaCanFetchFromLogStartOffsetAfterDeleteRecords PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithOffsetLookupAndNoGroupAccess PASSED

kafka.api.PlaintextConsumerTest > testDeprecatedPollBlocksForAssignment PASSED

kafka.api.AdminClientIntegrationTest > testDelayedClose PASSED

kafka.api.AuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteTopicsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicDescribe PASSED

kafka.api.AdminClientIntegrationTest > testLongTopicNames PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsDoesNotWorkWithInvalidConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessDuringSend PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[3] PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.api.AdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testMultiConsumerRoundRobinAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionOnTopicToWriteToNonExistentTopic PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForLog4jLogLevels PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopicsWithWhitelist PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.AdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoTopicAccess PASSED

kafka.api.PlaintextConsumerTest > testPartitionPauseAndResume PASSED

kafka.api.AuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.api.AdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithNoTopicAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithNoTopicAccess PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMinimumRequestTimeouts PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.api.AdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.api.PlaintextConsumerTest > testQuotaMetricsNotCreatedIfNoQuotasConfigured PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicWrite PASSED

kafka.api.AuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePartitionsWithWildCardAuth PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[3] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerConfigUpdateTest[4] PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsCleanUpWithSubscribe PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleansCombinedCompactAndDeleteTopic[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleaningNestedMessagesWithMultipleVersions[4] PASSED

kafka.api.AdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteTopicsWithoutDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testIncrementalAlterConfigsForLog4jLogLevelsCanResetLoggerToCurrentRoot PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithGroupDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMoreAssignmentThanPartitions PASSED

kafka.api.PlaintextConsumerTest > testConsumeMessagesWithLogAppendTime PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicNotExisting PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagMetricsWhenReadCommitted PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testForceClose PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsAllTopicsAllGroups PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListOffsetsWithTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testListGroupApiWithAndWithoutListGroupAcls PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitOnCloseAfterWakeup PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testListNodes PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreatePermissionMetadataRequestAutoCreate PASSED

kafka.api.SaslGssapiSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWithWrapAroundBatchRecord PASSED

kafka.api.AdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencing PASSED

kafka.log.ProducerStateManagerTest > testTruncate PASSED

kafka.log.ProducerStateManagerTest > testLoadFromTruncatedSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testRemoveExpiredPidsOnReload PASSED

kafka.log.ProducerStateManagerTest > testOutOfSequenceAfterControlRecordEpochBump PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterTruncation PASSED

kafka.log.ProducerStateManagerTest > testTakeSnapshot PASSED

kafka.log.ProducerStateManagerTest > testDeleteSnapshotsBefore PASSED

kafka.log.ProducerStateManagerTest > testAppendEmptyControlBatch PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffsetAfterEviction PASSED

kafka.log.ProducerStateManagerTest > testNoValidationOnFirstEntryWhenLoadingLog PASSED

kafka.log.ProducerStateManagerTest > testLoadFromEmptySnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducersWithOngoingTransactionsDontExpire PASSED

kafka.log.ProducerStateManagerTest > testBasicIdMapping PASSED

kafka.log.ProducerStateManagerTest > updateProducerTransactionState PASSED

kafka.log.ProducerStateManagerTest > testRecoverFromSnapshot PASSED

kafka.log.ProducerStateManagerTest > testPrepareUpdateDoesNotMutate PASSED

kafka.log.ProducerStateManagerTest > testSequenceNotValidatedForGroupMetadataTopic PASSED

kafka.log.ProducerStateManagerTest > testLastStableOffsetCompletedTxn PASSED

kafka.log.ProducerStateManagerTest > testLoadFromSnapshotRemovesNonRetainedProducers PASSED

kafka.log.ProducerStateManagerTest > testFirstUnstableOffset PASSED

kafka.log.ProducerStateManagerTest > testTxnFirstOffsetMetadataCached PASSED

kafka.log.ProducerStateManagerTest > testCoordinatorFencedAfterReload PASSED

kafka.log.ProducerStateManagerTest > testControlRecordBumpsEpoch PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithoutProducerStateOnReplica PASSED

kafka.log.ProducerStateManagerTest > testLoadFromCorruptSnapshotFile PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceWrapAround PASSED

kafka.log.ProducerStateManagerTest > testPidExpirationTimeout PASSED

kafka.log.ProducerStateManagerTest > testAcceptAppendWithSequenceGapsOnReplica PASSED

kafka.log.ProducerStateManagerTest > testAppendTxnMarkerWithNoProducerState PASSED

kafka.log.ProducerStateManagerTest > testOldEpochForControlRecord PASSED

kafka.log.ProducerStateManagerTest > testTruncateAndReloadRemovesOutOfRangeSnapshots PASSED

kafka.log.ProducerStateManagerTest > testStartOffset PASSED

kafka.log.ProducerStateManagerTest > testProducerSequenceInvalidWrapAround PASSED

kafka.log.ProducerStateManagerTest > testTruncateHead PASSED

kafka.log.ProducerStateManagerTest > testNonTransactionalAppendWithOngoingTransaction PASSED

kafka.log.ProducerStateManagerTest > testSkipSnapshotIfOffsetUnchanged PASSED

kafka.api.PlaintextConsumerTest > testMaxPollRecords PASSED

kafka.cluster.PartitionTest > testMakeLeaderDoesNotUpdateEpochCacheForOldFormats PASSED

kafka.cluster.PartitionTest > testIsrExpansion PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testIsrNotShrunkIfUpdateFails PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testIsrNotExpandedIfUpdateFails PASSED

kafka.cluster.PartitionTest > testAddAndRemoveMetrics PASSED

kafka.cluster.PartitionTest > testListOffsetIsolationLevels PASSED

kafka.cluster.PartitionTest > testAppendRecordsAsFollowerBelowLogStartOffset PASSED

kafka.cluster.PartitionTest > testFetchLatestOffsetIncludesLeaderEpoch PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeShrinkIsr PASSED

kafka.cluster.PartitionTest > testMonotonicOffsetsAfterLeaderChange PASSED

kafka.cluster.PartitionTest > testMakeFollowerWithNoLeaderIdChange PASSED

kafka.cluster.PartitionTest > testAppendRecordsToFollowerWithNoReplicaThrowsException PASSED

kafka.cluster.PartitionTest > testFollowerDoesNotJoinISRUntilCaughtUpToOffsetWithinCurrentLeaderEpoch PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfFollowerCaughtUpToLogEnd PASSED

kafka.cluster.PartitionTest > testFetchOffsetSnapshotEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testAtMinIsr PASSED

kafka.cluster.PartitionTest > testOffsetForLeaderEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testDelayedFetchAfterAppendRecords PASSED

kafka.cluster.PartitionTest > testMakeLeaderUpdatesEpochCache PASSED

kafka.cluster.PartitionTest > testUseCheckpointToInitializeHighWatermark PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplicaDifferentBaseOffsets PASSED

kafka.cluster.PartitionTest > testFetchOffsetForTimestampEpochValidationForLeader PASSED

kafka.cluster.PartitionTest > testShouldNotShrinkIsrIfPreviousFetchIsCaughtUp PASSED

kafka.cluster.PartitionTest > testGetReplica PASSED

kafka.cluster.PartitionTest > testReadRecordEpochValidationForFollower PASSED

kafka.cluster.PartitionTest > testMaybeReplaceCurrentWithFutureReplica PASSED

kafka.cluster.PartitionTest > testUpdateFollowerFetchState PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDeleteGroupApiWithNoDeleteGroupAcl2 PASSED

kafka.api.AdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.api.PlaintextConsumerTest > testAutoOffsetReset PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > cleanerTest[4] PASSED

kafka.log.LogCleanerParameterizedIntegrationTest > testCleanerWithMessageFormatV0[4] PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithDefaultPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicAndGroupRead PASSED

kafka.api.AdminClientIntegrationTest > testAclOperations PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLagWithMaxPollRecords PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDelayedClose PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionNotMatchingInternalTopic PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopicsAndPartitions PASSED

kafka.api.AdminClientIntegrationTest > testDescribeCluster PASSED

kafka.api.GroupAuthorizerIntegrationTest > testFetchAllOffsetsTopicAuthorization PASSED

kafka.api.PlaintextConsumerTest > testFetchInvalidOffset PASSED

kafka.integration.MetricsDuringTopicCreationDeletionTest > testMetricsDuringTopicCreateDelete PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldSendSuccessfullyWhenIdempotentAndHasCorrectACL PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLongTopicNames PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithTopicWrite PASSED

kafka.api.PlaintextConsumerTest > testAutoCommitIntercept PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetsForLeaderEpochClusterPermission PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.PlaintextConsumerTest > testFetchHonoursMaxPartitionFetchBytesIfLargeRecordNotFirst PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerTopicAuthorizationExceptionInSendCallback PASSED

kafka.admin.TopicCommandWithAdminClientTest > testListTopics PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreateDeleteTopics PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoWriteTransactionalIdAcl PASSED

kafka.admin.ResetConsumerGroupOffsetTest > testResetOffsetsToEarliestOnTopics PASSED

kafka.api.PlaintextConsumerTest > testCommitSpecifiedOffsets PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceMultiplePartitions PASSED

kafka.server.HighwatermarkPersistenceTest > testHighWatermarkPersistenceSinglePartition PASSED

kafka.server.ThrottledChannelExpirationTest > testThrottledChannelDelay PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIncrementalAlterConfigsRequestRequiresClusterPermissionForBrokerLogger PASSED

kafka.server.ThrottledChannelExpirationTest > testCallbackInvocationAfterExpiration PASSED

kafka.api.AdminClientIntegrationTest > testCreatePartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithNoGroupAccess PASSED

kafka.api.PlaintextConsumerTest > testPerPartitionLeadMetricsCleanUpWithSubscribe PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoAccess PASSED

kafka.api.AdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.api.PlaintextConsumerTest > testCommitMetadata PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testOffsetsForTimesAfterDeleteRecords PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testValidAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedCreatePartitions PASSED

kafka.api.AdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.api.PlaintextConsumerTest > testHeadersExtendedSerializerDeserializer PASSED

kafka.api.AdminClientWithPoliciesIntegrationTest > testInvalidAlterConfigsDueToPolicy PASSED

kafka.api.GroupAuthorizerIntegrationTest > testConsumeWithoutTopicDescribeAccess PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[0] PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteInternalTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnEndTransaction PASSED

kafka.api.AdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[1] PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDeleteRecordsWithException PASSED

kafka.admin.TopicCommandWithAdminClientTest > testParseAssignment PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[2] PASSED

kafka.api.PlaintextConsumerTest > testRoundRobinAssignment PASSED

kafka.api.GroupAuthorizerIntegrationTest > shouldThrowTransactionalIdAuthorizationExceptionWhenNoTransactionAccessOnSendOffsetsToTxn PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[3] PASSED

kafka.admin.TopicCommandWithAdminClientTest > testInvalidTopicLevelConfig PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithNoGroupAccess PASSED

kafka.log.LogCleanerLagIntegrationTest > cleanerTest[4] PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testTransactionalProducerInitTransactionsNoDescribeTransactionalIdAcl PASSED

kafka.api.PlaintextConsumerTest > testPatternSubscription PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeLogDirs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithDescribe PASSED

kafka.api.PlaintextConsumerTest > testCoordinatorFailover PASSED

kafka.api.AdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.api.PlaintextConsumerTest > testSimpleConsumption PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionLastIsrShuttingDown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithNoLiveIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElection PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testReassignPartitionLeaderElectionWithEmptyIsr PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testControlledShutdownPartitionLeaderElectionAllIsrSimultaneouslyShutdown PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionEnabled PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testPreferredReplicaPartitionLeaderElectionPreferredReplicaNotInIsrNotLive PASSED

kafka.controller.PartitionLeaderElectionAlgorithmsTest > testOfflinePartitionLeaderElectionLastIsrOfflineUncleanLeaderElectionDisabled PASSED

kafka.tools.ConsoleProducerTest > testParseKeyProp PASSED

kafka.tools.ConsoleProducerTest > testInvalidConfigs PASSED

kafka.tools.ConsoleProducerTest > testValidConfigs PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignmentWithMorePartitionsThanAssignment PASSED

kafka.api.AuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterReplicaLogDirs PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.api.AdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.api.AdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigPreservationAcrossPartitionAlteration PASSED

kafka.api.AdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetCheckpoint PASSED

kafka.api.AdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.AdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAuthorizedOperations PASSED

kafka.api.AdminClientIntegrationTest > testConsumerGroups PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithConfigs PASSED

kafka.api.AdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.log.LogManagerTest > testFileReferencesAfterAsyncDelete PASSED

kafka.log.LogManagerTest > testCreateLogWithLogDirFallback PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testAlterConfigsForLog4jLogLevelsDoesNotWork PASSED

kafka.log.LogManagerTest > testCleanupSegmentsToMaintainSize PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithRelativeDirectory PASSED

kafka.log.LogManagerTest > testCreateLogWithInvalidLogDir PASSED

kafka.log.LogManagerTest > testGetNonExistentLog PASSED

kafka.log.LogManagerTest > testTwoLogManagersUsingSameDirFails PASSED

kafka.log.LogManagerTest > testLeastLoadedAssignment PASSED

kafka.log.LogManagerTest > testCleanupExpiredSegments PASSED

kafka.log.LogManagerTest > testCheckpointRecoveryPoints PASSED

kafka.log.LogManagerTest > testCheckpointForOnlyAffectedLogs PASSED

kafka.log.LogManagerTest > testTimeBasedFlush PASSED

kafka.log.LogManagerTest > testCreateLog PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactPolicy PASSED

kafka.log.LogManagerTest > testRecoveryDirectoryMappingWithTrailingSlash PASSED

kafka.log.LogManagerTest > testCreateAndDeleteOverlyLongTopic PASSED

kafka.log.LogManagerTest > testDoesntCleanLogsWithCompactDeletePolicy PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testProcessNotification PASSED

kafka.common.ZkNodeChangeNotificationListenerTest > testSwallowsProcessorException PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeCluster PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderReplicatedPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForManyPartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForUnknownPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCreateTopicAuthorizationWithClusterCreate PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchWithTopicAndGroupRead PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitions PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCreatePartitions PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeNonExistingTopic PASSED

kafka.api.AuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testMetadataRefresh PASSED

kafka.api.AuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeAndAlterConfigs PASSED

kafka.api.AuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeAndListTopicsWithoutInternalTopics PASSED

kafka.api.AuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.api.AuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.api.AuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.api.AuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.api.AuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.api.AuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForAllPartitions PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnavailablePartitions PASSED

kafka.api.AuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.timer.TimerTest > testAlreadyExpiredTask PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithUnspecifiedReplicationFactorAndPartitionsWithZkClient PASSED

kafka.utils.timer.TimerTest > testTaskExpiration PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentGoodPathSequence PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentTxnGoodPathSequence PASSED

kafka.admin.TopicCommandWithAdminClientTest > testIfExistsAndIfNotExistsOptionsInvalidWithBootstrapServers PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testLogStartOffsetAfterDeleteRecords PASSED

kafka.coordinator.group.GroupCoordinatorConcurrencyTest > testConcurrentRandomSequence PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithAssignmentAndReplicationFactor PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersForOnePartition PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreateWithReplicaAssignment PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testValidIncrementalAlterConfigs PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testInvalidIncrementalAlterConfigs PASSED

kafka.api.GroupAuthorizerIntegrationTest > testAuthorizationWithTopicExisting PASSED

kafka.api.GroupAuthorizerIntegrationTest > testUnauthorizedDeleteRecordsWithoutDescribe PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithInvalidPartitionCount PASSED

kafka.api.GroupAuthorizerIntegrationTest > testMetadataWithTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testSeekAfterDeleteRecords PASSED

kafka.api.GroupAuthorizerIntegrationTest > testProduceWithTopicDescribe PASSED

kafka.api.GroupAuthorizerIntegrationTest > testDescribeGroupApiWithNoGroupAcl PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testCallInFlightTimeouts PASSED

kafka.api.GroupAuthorizerIntegrationTest > testPatternSubscriptionMatchingInternalTopic PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSendOffsetsWithNoConsumerGroupDescribeAccess PASSED

kafka.api.GroupAuthorizerIntegrationTest > testOffsetFetchTopicDescribe PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testDescribeConfigsForTopic PASSED

kafka.admin.TopicCommandWithAdminClientTest > testCreate PASSED

kafka.api.GroupAuthorizerIntegrationTest > testCommitWithTopicAndGroupRead PASSED

kafka.api.GroupAuthorizerIntegrationTest > testIdempotentProducerNoIdempotentWriteAclInInitProducerId PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testConsumerGroups PASSED

kafka.api.GroupAuthorizerIntegrationTest > testSimpleConsumeWithExplicitSeekAndNoGroupAccess PASSED

kafka.utils.JsonTest > testParseToWithInvalidJson PASSED

kafka.utils.JsonTest > testParseTo PASSED

kafka.utils.JsonTest > testJsonParse PASSED

kafka.utils.JsonTest > testLegacyEncodeAsString PASSED

kafka.utils.JsonTest > testEncodeAsBytes PASSED

kafka.utils.JsonTest > testEncodeAsString PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhileProducerFenced PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testCompleteTransitionWhenAppendSucceeded PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorNotAvailableError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToUnknownError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldReturnNotCooridnatorErrorIfTransactionIdPartitionNotOwned PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testValidateTransactionTimeout PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedCommitState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldOnlyConsiderTransactionsInTheOngoingStateToAbort PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteAbortExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPartitionLoadMetric PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendTransactionToLogWhilePendingStateChanged PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testLoadAndRemoveTransactionsForPartition PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToNotCoordinatorError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareCommitTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAppendFailToCoordinatorLoadingError PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveOngoingTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testAddGetPids PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldWriteTxnMarkersForTransactionInPreparedAbortState PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveEmptyExpiredTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > testPendingStateNotResetOnRetryAppend PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemoveExpiredTransactionalIdsIfLogAppendFails PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldNotRemovePrepareAbortTransactionalIds PASSED

kafka.coordinator.transaction.TransactionStateManagerTest > shouldRemoveCompleteCommmitExpiredTransactionalIds PASSED

kafka.api.SaslSslAdminClientIntegrationTest > testElectUncleanLeadersWhenNoLiveBrokers PASSED

kafka.utils.CoreUtilsTest > testGenerateUuidAsBase64 PASSED

kafka.utils.CoreUtilsTest > testAbs PASSED

kafka.utils.CoreUtilsTest > testReplaceSuffix PASSED

kafka.utils.CoreUtilsTest > testCircularIterator PASSED

kafka.utils.CoreUtilsTest > testReadBytes PASSED

kafka.utils.CoreUtilsTest > testCsvList PASSED

kafka.utils.CoreUtilsTest > testReadInt PASSED

kafka.utils.CoreUtilsTest > testAtomicGetOrUpdate PASSED

kafka.utils.CoreUtilsTest > testUrlSafeBase64EncodeUUID PASSED

kafka.utils.CoreUtilsTest > testCsvMap PASSED

kafka.utils.CoreUtilsTest > testInLock PASSED

kafka.utils.CoreUtilsTest > testTryAll PASSED

kafka.utils.CoreUtilsTest > testSwallow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerAfterEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testInitializeEpoch PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerId PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testBumpEpochNotAllowedIfEpochsExhausted PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInOngoingState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareCommitState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testFenceProducerNotAllowedIfItWouldOverflow PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testRotateProducerIdInPrepareAbortState PASSED

kafka.coordinator.transaction.TransactionMetadataTest > testNormalEpochBump PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribeUnderMinIsrPartitionsMixed PASSED

kafka.admin.TopicCommandWithAdminClientTest > testConfigOptWithBootstrapServers PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterWithUnspecifiedPartitionCount PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDeleteIfExists PASSED

kafka.admin.TopicCommandWithAdminClientTest > testDescribe PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > shouldNotAllowDivergentLogs PASSED

kafka.admin.TopicCommandWithAdminClientTest > testAlterAssignment PASSED

kafka.server.ReplicationQuotaManagerTest > shouldThrottleOnlyDefinedReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldSupportWildcardThrottledReplicas PASSED

kafka.server.ReplicationQuotaManagerTest > shouldExceedQuotaThenReturnBackBelowBoundAsTimePasses PASSED

kafka.server.AbstractFetcherManagerTest > testAddAndRemovePartition PASSED

kafka.server.AbstractFetcherManagerTest > testMetricFailedPartitionCount PASSED

kafka.server.epoch.EpochDrivenReplicationProtocolAcceptanceTest > logsShouldNotDivergeOnUncleanLeaderElections PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testTwoConsumersWithDifferentSaslCredentials PASSED

kafka.api.DescribeAuthorizedOperationsTest > testClusterAuthorizedOperations PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaSubscribe PASSED

kafka.api.DescribeAuthorizedOperationsTest > testTopicAuthorizedOperations PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithPrefixedAcls PASSED

kafka.api.DescribeAuthorizedOperationsTest > testConsumerGroupAuthorizedOperations PASSED

kafka.log.LogTest > testLogDelete PASSED

kafka.log.LogTest > testAbortedTransactionSpanningMultipleSegments PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndCleanShutdown PASSED

kafka.log.LogTest > testProducerIdMapTruncateFullyAndStartAt PASSED

kafka.log.LogTest > testAppendBelowExpectedOffsetThrowsException PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingTopic PASSED

kafka.log.LogTest > shouldNotDeleteTimeBasedSegmentsWhenNoneReadyToBeDeleted PASSED

kafka.log.LogTest > testMultipleProducerIdsPerMemoryRecord PASSED

kafka.log.LogTest > testSplitOnOffsetOverflow PASSED

kafka.log.LogTest > testAppendWithNoTimestamp PASSED

kafka.log.LogTest > testFetchUpToHighWatermark PASSED

kafka.log.LogTest > testLastStableOffsetWithMixedProducerData PASSED

kafka.log.LogTest > testReadWithMinMessage PASSED

kafka.log.LogTest > testIndexRebuild PASSED

kafka.log.LogTest > testZombieCoordinatorFencedEmptyTransaction PASSED

kafka.log.LogTest > testLogRolls PASSED

kafka.log.LogTest > testMessageSizeCheck PASSED

kafka.log.LogTest > testAsyncDelete PASSED

kafka.log.LogTest > testLogRollAfterLogHandlerClosed PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testFirstUnstableOffsetWithTransactionalData PASSED

kafka.log.LogTest > shouldNotDeleteSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetAfterSegmentDeletion PASSED

kafka.log.LogTest > testAppendToTransactionIndexFailure PASSED

kafka.log.LogTest > testParseTopicPartitionNameForInvalidPartition PASSED

kafka.log.LogTest > testUpdateProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > testPeriodicProducerIdExpiration PASSED

kafka.log.LogTest > testReadOutOfRange PASSED

kafka.log.LogTest > testAppendWithOutOfOrderOffsetsThrowsException PASSED

kafka.log.LogTest > testProducerIdExpirationOnSegmentDeletion PASSED

kafka.log.LogTest > shouldDeleteSegmentsReadyToBeDeletedWhenCleanupPolicyIsCompactAndDelete PASSED

kafka.log.LogTest > testHighWatermarkMaintenance PASSED

kafka.log.LogTest > testFetchOffsetByTimestampIncludesLeaderEpoch PASSED

kafka.log.LogTest > testLogReinitializeAfterManualDelete PASSED

kafka.log.LogTest > testFirstUnstableOffsetNoTransactionalData PASSED

kafka.log.LogTest > testReadAtLogGap PASSED

kafka.log.LogTest > testSizeForLargeLogs PASSED

kafka.log.LogTest > testTimeBasedLogRoll PASSED

kafka.log.LogTest > testProducerIdMapOffsetUpdatedForNonIdempotentData PASSED

kafka.log.LogTest > testMultipleProducersWithDuplicatesInSingleAppend PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDynamicMessageFormatDowngrade PASSED

kafka.log.LogTest > testNonSequentialAppend PASSED

kafka.log.LogTest > testLoadEmptyLog PASSED

kafka.log.LogTest > testMessageSetSizeCheck PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterDowngradeInAppendedMessages PASSED

kafka.log.LogTest > testRecoverOnlyLastSegment PASSED

kafka.log.LogTest > testIndexResizingAtTruncation PASSED

kafka.log.LogTest > testCompactedTopicConstraints PASSED

kafka.log.LogTest > followerShouldSaveEpochInformationFromReplicatedMessagesToTheEpochCache PASSED

kafka.log.LogTest > testRebuildTransactionalState PASSED

kafka.log.LogTest > testProducerIdMapTruncateToWithNoSnapshots PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecordV1 PASSED

kafka.log.LogTest > testDuplicateAppendToFollower PASSED

kafka.log.LogTest > testThatGarbageCollectingSegmentsDoesntChangeOffset PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfOldMessageFormatAndNoCleanShutdown PASSED

kafka.log.LogTest > testAppendAndReadWithSequentialOffsets PASSED

kafka.log.LogTest > testOffsetFromFile PASSED

kafka.log.LogTest > testProducerSnapshotAfterSegmentRollOnAppend PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase1 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase2 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase3 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase4 PASSED

kafka.log.LogTest > testRecoveryAfterCrashDuringSplitPhase5 PASSED

kafka.log.LogTest > testFullTransactionIndexRecovery PASSED

kafka.log.LogTest > testAppendEmptyLogBelowLogStartOffsetThrowsException PASSED

kafka.log.LogTest > testDegenerateSegmentSplitWithOutOfRangeBatchLastOffset PASSED

kafka.log.LogTest > shouldDeleteSizeBasedSegments PASSED

kafka.log.LogTest > testRebuildProducerStateWithEmptyCompactedBatch PASSED

kafka.log.LogTest > testParseTopicPartitionNameForNull PASSED

kafka.log.LogTest > testLogDeletionAfterDeleteRecords PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownCurrentMessageFormat PASSED

kafka.log.LogTest > testAppendAndReadWithNonSequentialOffsets PASSED

kafka.log.LogTest > shouldTruncateLeaderEpochCheckpointFileWhenTruncatingLog PASSED

kafka.log.LogTest > testDuplicateAppends PASSED

kafka.log.LogTest > testRollSegmentThatAlreadyExists PASSED

kafka.log.LogTest > testParseTopicPartitionNameForExistingInvalidDir PASSED

kafka.log.LogTest > testTruncateToEmptySegment PASSED

kafka.log.LogTest > testLoadPartitionDirWithNoSegmentsShouldNotThrow PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingSeparator PASSED

kafka.log.LogTest > testParseTopicPartitionNameWithPeriodForDeletedTopic PASSED

kafka.log.LogTest > testRecoverLastSegmentWithNoSnapshots PASSED

kafka.log.LogTest > testFetchUpToLastStableOffset PASSED

kafka.log.LogTest > testLeaderEpochCacheCreatedAfterMessageFormatUpgrade PASSED

kafka.log.LogTest > testFetchUpToLogEndOffset PASSED

kafka.log.LogTest > testLastStableOffsetDoesNotExceedLogStartOffsetMidSegment PASSED

kafka.log.LogTest > testCorruptIndexRebuild PASSED

kafka.log.LogTest > shouldDeleteTimeBasedSegmentsReadyToBeDeleted PASSED

kafka.log.LogTest > testReadWithTooSmallMaxLength PASSED

kafka.log.LogTest > testOverCompactedLogRecovery PASSED

kafka.log.LogTest > testBogusIndexSegmentsAreRemoved PASSED

kafka.log.LogTest > testLeaderEpochCacheClearedAfterStaticMessageFormatDowngrade PASSED

kafka.log.LogTest > testCompressedMessages PASSED

kafka.log.LogTest > testAppendMessageWithNullPayload PASSED

kafka.log.LogTest > testCorruptLog PASSED

kafka.log.LogTest > testLogRecoversToCorrectOffset PASSED

kafka.log.LogTest > testReopenThenTruncate PASSED

kafka.log.LogTest > testZombieCoordinatorFenced PASSED

kafka.log.LogTest > testOldProducerEpoch PASSED

kafka.log.LogTest > testProducerSnapshotsRecoveryAfterUncleanShutdownV1 PASSED

kafka.log.LogTest > testDegenerateSegmentSplit PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaAssign PASSED

kafka.log.LogTest > testParseTopicPartitionNameForMissingPartition PASSED

kafka.log.LogTest > testParseTopicPartitionNameForEmptyName PASSED

kafka.log.LogTest > testOffsetSnapshot PASSED

kafka.log.LogTest > testOpenDeletesObsoleteFiles PASSED

kafka.log.LogTest > shouldUpdateOffsetForLeaderEpochsWhenDeletingSegments PASSED

kafka.log.LogTest > testLogDeleteDirName PASSED

kafka.log.LogTest > testDeleteOldSegments PASSED

kafka.log.LogTest > testRebuildTimeIndexForOldMessages PASSED

kafka.log.LogTest > testProducerIdMapTruncateTo PASSED

kafka.log.LogTest > testTakeSnapshotOnRollAndDeleteSnapshotOnRecoveryPointCheckpoint PASSED

kafka.log.LogTest > testLogEndLessThanStartAfterReopen PASSED

kafka.log.LogTest > testLogRecoversForLeaderEpoch PASSED

kafka.log.LogTest > testWriteLeaderEpochCheckpointAfterDirectoryRename PASSED

kafka.log.LogTest > testOverCompactedLogRecoveryMultiRecord PASSED

kafka.log.LogTest > testSizeBasedLogRoll PASSED

kafka.log.LogTest > testRebuildProducerIdMapWithCompactedData PASSED

kafka.log.LogTest > shouldNotDeleteSizeBasedSegmentsWhenUnderRetentionSize PASSED

kafka.log.LogTest > testTransactionIndexUpdatedThroughReplication PASSED

kafka.log.LogTest > testTimeBasedLogRollJitter PASSED

kafka.log.LogTest > testParseTopicPartitionName PASSED

kafka.log.LogTest > testRecoveryOfSegmentWithOffsetOverflow PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsMidSegment PASSED

kafka.log.LogTest > testInitializationOfProducerSnapshotsUpgradePath PASSED

kafka.log.LogTest > shouldDeleteStartOffsetBreachedSegmentsWhenPolicyDoesNotIncludeDelete PASSED

kafka.log.LogTest > testSkipLoadingIfEmptyProducerStateBeforeTruncation PASSED

kafka.log.LogTest > testTruncateTo PASSED

kafka.log.LogTest > testSkipTruncateAndReloadIfNewMessageFormatAndCleanShutdown PASSED

kafka.log.LogTest > shouldApplyEpochToMessageOnAppendIfLeader PASSED

kafka.log.LogTest > testLogDeletionAfterClose PASSED

kafka.log.LogTest > testLoadProducersAfterDeleteRecordsOnSegment PASSED

kafka.log.LogTest > testCleanShutdownFile PASSED

kafka.log.LogTest > testTransactionIndexUpdated PASSED

kafka.log.LogTest > testBuildTimeIndexWhenNotAssigningOffsets PASSED

kafka.common.InterBrokerSendThreadTest > shouldCreateClientRequestAndSendWhenNodeIsReady PASSED

kafka.common.InterBrokerSendThreadTest > testFailingExpiredRequests PASSED

kafka.common.InterBrokerSendThreadTest > shouldCallCompletionHandlerWithDisconnectedResponseWhenNodeNotReady PASSED

kafka.common.InterBrokerSendThreadTest > shouldNotSendAnythingWhenNoRequests PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaAssign PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeTopicAutoCreateTopicCreateAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeWithWildcardAcls PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithDescribeAclViaSubscribe PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoConsumeWithoutDescribeAclViaAssign PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoGroupAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoProduceWithDescribeAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testNoDescribeProduceOrConsumeWithoutTopicDescribeAcl PASSED

kafka.api.SaslOAuthBearerSslEndToEndAuthorizationTest > testProduceConsumeViaSubscribe PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldReadWriteMessages PASSED

kafka.coordinator.transaction.TransactionLogTest > shouldThrowExceptionWriteInvalidTxn PASSED

> Task :kafka:core:test FAILED
> Task :testScala_2_11 FAILED

Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/5.4.1/userguide/command_line_interface.html#sec:command_line_warnings
13 actionable tasks: 4 executed, 9 up-to-date
