
> Configure project :
Building project 'core' with Scala version 2.13.4
Building project 'streams-scala' with Scala version 2.13.4

> Task :compileJava NO-SOURCE
> Task :processResources NO-SOURCE
> Task :classes UP-TO-DATE

> Task :rat
Rat report: /users/miaoyu/kafka/build/rat/rat-report.html

> Task :compileTestJava NO-SOURCE
> Task :processTestResources NO-SOURCE
> Task :testClasses UP-TO-DATE
> Task :test NO-SOURCE
> Task :generator:compileJava UP-TO-DATE
> Task :generator:processResources NO-SOURCE
> Task :generator:classes UP-TO-DATE
> Task :clients:processMessages UP-TO-DATE
> Task :clients:compileJava
> Task :clients:processResources UP-TO-DATE
> Task :clients:classes
> Task :clients:checkstyleMain

> Task :clients:processTestMessages
MessageGenerator: processed 2 Kafka message JSON files(s).

> Task :clients:compileTestJava
> Task :clients:processTestResources
> Task :clients:testClasses
> Task :clients:checkstyleTest
> Task :connect:compileJava NO-SOURCE
> Task :connect:processResources NO-SOURCE
> Task :connect:classes UP-TO-DATE
> Task :connect:checkstyleMain NO-SOURCE
> Task :connect:compileTestJava NO-SOURCE
> Task :connect:processTestResources NO-SOURCE
> Task :connect:testClasses UP-TO-DATE
> Task :connect:checkstyleTest NO-SOURCE
> Task :connect:spotbugsMain NO-SOURCE
> Task :connect:test NO-SOURCE
> Task :clients:determineCommitId UP-TO-DATE
> Task :clients:createVersionFile
> Task :clients:jar

> Task :core:processMessages
MessageGenerator: processed 6 Kafka message JSON files(s).

> Task :raft:processMessages
MessageGenerator: processed 1 Kafka message JSON files(s).

> Task :raft:compileJava
> Task :raft:processResources
> Task :raft:classes
> Task :raft:determineCommitId UP-TO-DATE
> Task :raft:createVersionFile
> Task :raft:jar
> Task :core:compileJava
> Task :clients:spotbugsMain
> Task :core:compileScala

> Task :clients:test

org.apache.kafka.clients.admin.DescribeUserScramCredentialsResultTest > testTopLevelError PASSED

org.apache.kafka.clients.consumer.ConsumerRecordsTest > iterator PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testEqualsWithoutGroupInstanceId PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testEqualsWithGroupInstanceId PASSED

org.apache.kafka.clients.admin.MemberDescriptionTest > testNonEqual PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMergeSortManyMemberInfo PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingSomeGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingWithAllGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignorTest > testMemberInfoSortingWithoutGroupInstanceId PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupOptionsTest > testConstructor PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testSimpleMock PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testConsumerRecordsIsEmptyWhenReturningNoRecords PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > shouldNotClearRecordsForPausedPartitions PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > endOffsetsShouldBeIdempotent PASSED

org.apache.kafka.clients.consumer.MockConsumerTest > testSimpleMockDeprecated PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnAcknowledgementWithErrorChain PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnAcknowledgementChain PASSED

org.apache.kafka.clients.producer.internals.ProducerInterceptorsTest > testOnSendChain PASSED

org.apache.kafka.clients.admin.DescribeUserScramCredentialsResultTest > testUserLevelErrors PASSED

org.apache.kafka.clients.admin.DescribeUserScramCredentialsResultTest > testSuccessfulDescription PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitBatchOffAccumulator PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testRetryBackoff PASSED

org.apache.kafka.clients.CommonClientConfigsTest > testExponentialBackoffDefaults PASSED

org.apache.kafka.clients.producer.UniformStickyPartitionerTest > testRoundRobinWithNullKeyBytes PASSED

org.apache.kafka.clients.producer.UniformStickyPartitionerTest > testRoundRobinWithKeyBytes PASSED

org.apache.kafka.clients.producer.UniformStickyPartitionerTest > testRoundRobinWithUnavailablePartitions PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testNextReadyCheckDelay PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchSingle PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeValueAfterFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenersInvokedIfAddedBeforeAndAfterFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeCompleteAfterAlreadyFailed PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedBeforeFutureFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenersInvokedIfAddedBeforeAndAfterCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeCompleteAfterAlreadyComplete PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedBeforeFutureCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testComposeFailureCase PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeExceptionAfterSuccess PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testComposeSuccessCase PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testBasicCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testRuntimeExceptionInComplete PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeRaiseAfterAlreadyFailed PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testBasicFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedAfterFutureCompletion PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > invokeRaiseAfterAlreadyCompleted PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > listenerInvokedIfAddedAfterFutureFailure PASSED

org.apache.kafka.clients.consumer.internals.RequestFutureTest > testVoidFuture PASSED

org.apache.kafka.clients.producer.ProducerConfigTest > testAppendSerializerToConfig PASSED

org.apache.kafka.clients.producer.ProducerConfigTest > testSerializerToPropertyConfig PASSED

org.apache.kafka.common.requests.UpdateMetadataRequestTest > testUnsupportedVersion PASSED

org.apache.kafka.common.requests.UpdateMetadataRequestTest > testTopicPartitionGroupingSizeReduction PASSED

org.apache.kafka.clients.ApiVersionsTest > testMaxUsableProduceMagic PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testStaticMemberRoundRobinAssignmentPersistentAfterMemberIdChanges PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testStaticMemberRoundRobinAssignmentPersistent PASSED

org.apache.kafka.clients.MetadataCacheTest > testMissingLeaderEndpoint PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoDynamicConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testSerializationRoundtrip PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testInvalidNegativeOffset PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testMultipleConsumersMixedTopics PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testDeserializationCompatibilityBeforeLeaderEpoch PASSED

org.apache.kafka.clients.consumer.OffsetAndMetadataTest > testDeserializationCompatibilityWithLeaderEpoch PASSED

org.apache.kafka.common.feature.FinalizedVersionRangeTest > testToString PASSED

org.apache.kafka.common.feature.FinalizedVersionRangeTest > testIsCompatibleWith PASSED

org.apache.kafka.common.feature.FinalizedVersionRangeTest > testFromToMap PASSED

org.apache.kafka.common.feature.FinalizedVersionRangeTest > testMinMax PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RoundRobinAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest > testMemberLevelErrorInResponseConstructor PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest > testTopLevelErrorConstructor PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest > testMemberMissingErrorInRequestConstructor PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest > testMemberLevelErrorConstructor PASSED

org.apache.kafka.clients.admin.RemoveMembersFromConsumerGroupResultTest > testNoErrorConstructor PASSED

org.apache.kafka.common.requests.UpdateMetadataRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.feature.FeaturesTest > testEmptyFeatures PASSED

org.apache.kafka.common.feature.FeaturesTest > testToStringFinalizedFeatures PASSED

org.apache.kafka.common.feature.FeaturesTest > testToStringSupportedFeatures PASSED

org.apache.kafka.common.feature.FeaturesTest > testFinalizedFeaturesFromMapFailureWithInvalidMissingMaxVersionLevel PASSED

org.apache.kafka.common.network.SelectorTest > testGracefulClose PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPreserveOffsetsFromCommitByGroupMetadataOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldInitTransactions PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testPatternSubscriptionNoInternalTopics PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testTransientTopics PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testNormalSubscription PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testUserAssignment PASSED

org.apache.kafka.clients.consumer.internals.ConsumerMetadataTest > testPatternSubscriptionIncludeInternalTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testStaticMemberRangeAssignmentPersistent PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testStaticMemberRangeAssignmentPersistentAfterMemberIdChanges PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testMultipleConsumersMixedTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoStaticConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneStaticConsumerAndOneDynamicConsumerTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.RangeAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testFailDueToInvalidParams PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testToString PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testFromMapFailure PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testFromToMap PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testEquals PASSED

org.apache.kafka.common.feature.SupportedVersionRangeTest > testMinMax PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldThrowIfUnknown PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > testAclBindings PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.DescribeAclsResponseTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testToString PASSED

org.apache.kafka.common.protocol.SendBuilderTest > testZeroCopyRecords PASSED

org.apache.kafka.common.protocol.SendBuilderTest > testWriteByteBufferRespectsPosition PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsWithTopLevelError PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsNoTopLevelError PASSED

org.apache.kafka.common.requests.StopReplicaResponseTest > testErrorCountsFromGetErrorResponse PASSED

org.apache.kafka.common.feature.FeaturesTest > testSuppportedFeaturesFromMapFailureWithInvalidMissingMaxVersion PASSED

org.apache.kafka.common.feature.FeaturesTest > testFromFeaturesMapToFeaturesMap PASSED

org.apache.kafka.common.feature.FeaturesTest > testNullFeatures PASSED

org.apache.kafka.common.feature.FeaturesTest > testGetAllFeaturesAPI PASSED

org.apache.kafka.common.feature.FeaturesTest > testEquals PASSED

org.apache.kafka.common.feature.FeaturesTest > testGetAPI PASSED

org.apache.kafka.common.feature.FeaturesTest > testFromToFinalizedFeaturesMap PASSED

org.apache.kafka.common.requests.UpdateMetadataRequestTest > testVersionLogic PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testReleaseForeignBuffer PASSED

org.apache.kafka.common.protocol.SendBuilderTest > testZeroCopyByteBuffer PASSED

org.apache.kafka.common.network.ChannelBuildersTest > testChannelBuilderConfigs PASSED

org.apache.kafka.common.network.ChannelBuildersTest > testCreateConfigurableKafkaPrincipalBuilder PASSED

org.apache.kafka.clients.MetadataTest > testTimeToNextUpdateRetryBackoff PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetErrorWithInvalidGroupId PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetThrottleTimeMs PASSED

org.apache.kafka.common.requests.DeleteGroupsResponseTest > testGetErrorWithExistingGroupIds PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeFlushedWithAutoCompleteIfBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotBeFlushedAfterFlush PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishLatestAndCumulativeConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnNullConsumerGroupMetadataWhenSendOffsetsToTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishConsumerGroupOffsetsOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnNullConsumerGroupIdWhenSendOffsetsToTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionByGroupMetadataIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortForNonAutoCompleteIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldAddOffsetsWhenSendOffsetsToTransactionByGroupId PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldResetSentOffsetsFlagOnlyWhenBeginningNewTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldAddOffsetsWhenSendOffsetsToTransactionByGroupMetadata PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowSendOffsetsToTransactionByGroupIdIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnInitTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPreserveCommittedMessagesOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnInitTransactionIfProducerAlreadyInitializedForTransactions PASSED

org.apache.kafka.clients.producer.MockProducerTest > testManualCompletion PASSED

org.apache.kafka.clients.producer.MockProducerTest > testAutoCompleteMock PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnFlushProducerIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowSendOffsetsToTransactionByGroupMetadataIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotBeFlushedWithNoAutoCompleteIfBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldNotCountAbortedTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > testPartitioner PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnFenceProducerIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPreserveOffsetsFromCommitByGroupIdOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowFenceProducerIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionsIfTransactionInflight PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldCountCommittedTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeFlushedIfNoBufferedRecords PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupMetadata PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldPublishMessagesOnlyAfterCommitIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldFlushOnCommitForNonAutoCompleteIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortTransactionIfNoTransactionGotStarted PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldDropMessagesOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendIfProducerIsClosed PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnBeginTransactionsIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnAbortIfTransactionsNotInitialized PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldIgnoreEmptyOffsetsWhenSendOffsetsToTransactionByGroupId PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithConflictingPreviousGenerations PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testSchemaBackwardCompatibility PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithMultipleGenerations1 PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentWithMultipleGenerations2 PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testStickiness PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAddRemoveConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAssignmentUpdatedForDeletedTopic PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndResourceIsPrefixOfFilter PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldBeginTransactions PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionByGroupIdIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnSendOffsetsToTransactionIfTransactionsNotInitialized PASSED

org.apache.kafka.common.metrics.TokenBucketTest > testUnrecord PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowClassCastException PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldThrowOnCommitTransactionIfProducerGotFenced PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldAbortEmptyTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldCommitEmptyTransaction PASSED

org.apache.kafka.clients.producer.MockProducerTest > shouldDropConsumerGroupOffsetsOnAbortIfTransactionsAreEnabled PASSED

org.apache.kafka.common.metrics.TokenBucketTest > testRecord PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchPrefixedIfNamePrefixedAnyFilterTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldBeUnknownIfResourceTypeUnknown PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchPrefixedIfExactMatch PASSED

org.apache.kafka.common.security.auth.KafkaPrincipalTest > testEqualsAndHashCode PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentName PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWhereResourceTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardIfFilterHasPatternTypeOfAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralWildcardIfFilterHasPatternTypeOfMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWherePatternTypeIsAny PASSED

org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest > testInvalidMemberId PASSED

org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest > testAssignmentConstructor PASSED

org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest > testInvalidGroupId PASSED

org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest > testInvalidInstanceId PASSED

org.apache.kafka.clients.consumer.ConsumerGroupMetadataTest > testGroupIdConstructor PASSED

org.apache.kafka.common.network.SelectorTest > testSendLargeRequest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeFutureSubscriptionVersion PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeNullSubscriptionUserData PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeMetadata PASSED

org.apache.kafka.common.utils.SystemTimeTest > testWaitObjectTimeout PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeNullAssignmentUserData PASSED

org.apache.kafka.clients.producer.internals.DefaultPartitionerTest > testKeyPartitionIsStable PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeNewSubscriptionWithOldVersion PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeSubscriptionAllVersions PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeAssignment PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeMetadataAndGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeFutureAssignmentVersion PASSED

org.apache.kafka.clients.consumer.ConsumerRecordTest > testNullChecksumInConstructor PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > serializeDeserializeAssignmentAllVersions PASSED

org.apache.kafka.common.utils.SystemTimeTest > testWaitObjectConditionSatisfied PASSED

org.apache.kafka.clients.consumer.internals.ConsumerProtocolTest > deserializeOldSubscriptionVersion PASSED

org.apache.kafka.common.requests.AlterReplicaLogDirsResponseTest > testErrorCounts PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest > testWithZeroTokens PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerSaslClienCallbackHandlerTest > testWithPotentiallyMultipleTokens PASSED

org.apache.kafka.clients.consumer.ConsumerRecordTest > testOldConstructor PASSED

org.apache.kafka.common.TopicPartitionTest > testSerializationRoundtrip PASSED

org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest > testFutureGetWithSeconds PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=0] PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testNoExceptionThrownWhenOnlySubscribedTopicDeleted PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testStickiness PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testOneConsumerNoTopic PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testAddRemoveConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testTwoConsumersTwoTopicsSixPartitions PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testAssignmentUpdatedForDeletedTopic PASSED

org.apache.kafka.clients.producer.internals.FutureRecordMetadataTest > testFutureGetWithMilliSeconds PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfResourceNameIsNull PASSED

org.apache.kafka.common.network.NetworkReceiveTest > testBytesRead PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testAppendDeserializerToConfig PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testOverrideEnableAutoCommit PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testOverrideClientId PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > testDeserializerToPropertyConfig PASSED

org.apache.kafka.clients.consumer.ConsumerConfigTest > ensureDefaultThrowOnUnsupportedStableFlagToFalse PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchExpirationAfterReenqueue PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testChecksumNullForMagicV2 PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchExpiration PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchAbort PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfPatternTypeIsAny PASSED

org.apache.kafka.common.TopicPartitionTest > testTopiPartitionSerializationCompatibility PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfResourceTypeIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternTest > shouldThrowIfPatternTypeIsMatch PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldGetAllEntries PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementHashCodeProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementToStringProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldReturnNullOnGetUnknownEntry PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldImplementEqualsProperly PASSED

org.apache.kafka.clients.admin.ConfigTest > shouldGetEntry PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfNameMatchesAndFilterIsOnPatternTypeMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWhereResourceNameIsAny PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchWherePatternTypeIsMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralIfExactMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentResourceType PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardAgainstOtherName PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldBeUnknownIfPatternTypeUnknown PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentPatternType PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralIfNamePrefixed PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfBothPrefixedAndFilterIsPrefixOfResource PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchIfDifferentNameCase PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchPrefixedIfNamePrefixedAnyFilterTypeIsMatch PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldNotMatchLiteralWildcardTheWayAround PASSED

org.apache.kafka.common.acl.ResourcePatternFilterTest > shouldMatchLiteralWildcardIfExactMatch PASSED

org.apache.kafka.common.requests.SyncGroupRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldReturnUnknownForUnknownCode PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldGetTypeFromId PASSED

org.apache.kafka.common.config.ConfigResourceTest > shouldRoundTripEveryType PASSED

org.apache.kafka.common.utils.MockTimeTest > testAutoTickMs PASSED

org.apache.kafka.common.utils.MockTimeTest > testAdvanceClock PASSED

org.apache.kafka.common.utils.MockTimeTest > testWaitObjectTimeout PASSED

org.apache.kafka.common.utils.MockTimeTest > testWaitObjectConditionSatisfied PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidationAfterPositionChange PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscribeUserAssignment PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testAppendedChecksumMagicV0AndV1 PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchCannotCompleteTwice PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=0] PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnAssignorNotFound PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=0] PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testResetSession PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testResetTimeouts PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testShouldHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testTimeToNextHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testSessionTimeoutExpired PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testShouldNotHeartbeat PASSED

org.apache.kafka.clients.consumer.internals.HeartbeatTest > testPollTimeout PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=0] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=1] PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testCode PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testName PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testExhaustive PASSED

org.apache.kafka.common.acl.AclPermissionTypeTest > testIsUnknown PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldThrowOnV0IfPrefixed PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripLiteralV0 PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=1] PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldRoundTripAnyV0AsLiteral PASSED

org.apache.kafka.common.requests.DeleteAclsRequestTest > shouldThrowOnUnknownElements PASSED

org.apache.kafka.common.protocol.ProtoUtilsTest > testDelayedAllocationSchemaDetection PASSED

org.apache.kafka.common.utils.ByteBufferInputStreamTest > testReadUnsignedIntFromInputStream PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testIsPreparingConnection PASSED
org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupResolveCanonicalBootstrapServers failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupResolveCanonicalBootstrapServers.test.stdout

org.apache.kafka.clients.ClientUtilsTest > testResolveDnsLookupResolveCanonicalBootstrapServers FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupResolveCanonicalBootstrapServers(ClientUtilsTest.java:122)

org.apache.kafka.clients.ClientUtilsTest > testFilterPreferredAddresses PASSED

org.apache.kafka.clients.ClientUtilsTest > testResolveUnknownHostException PASSED

org.apache.kafka.clients.ClientUtilsTest > testOnlyBadHostname PASSED

org.apache.kafka.clients.ClientUtilsTest > testInvalidConfig PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testCannotValidateExtensionWhichWasNotGiven PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testNodeWithNewHostname PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testUnvalidatedExtensionsAreIgnored PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testValidatedExtensionsAreReturned PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerExtensionsValidatorCallbackTest > testInvalidExtensionsAndErrorMessagesAreReturned PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInvalidGenerationIdAndMemberIdCombinedInSendOffsets PASSED

org.apache.kafka.common.message.MessageTest > testOffsetCommitDefaultGroupInstanceId PASSED
org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps.test.stdout

org.apache.kafka.clients.ClientUtilsTest > testResolveDnsLookupAllIps FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at org.apache.kafka.clients.ClientUtilsTest.testResolveDnsLookupAllIps(ClientUtilsTest.java:116)

org.apache.kafka.clients.ClientUtilsTest > testResolveDnsLookup PASSED

org.apache.kafka.clients.ClientUtilsTest > testParseAndValidateAddresses PASSED

org.apache.kafka.clients.ClientUtilsTest > testParseAndValidateAddressesWithReverseLookup PASSED

org.apache.kafka.clients.ClientUtilsTest > testNoPort PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=1] PASSED

org.apache.kafka.common.message.MessageTest > testJoinGroupRequestVersions PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=1] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.message.MessageTest > testJoinGroupResponseVersions PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=NONE, toMagic=2] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=NONE, toMagic=2] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversionWithOverflow[compressionType=GZIP, toMagic=2] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testInvalidSessionTimeout[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest$ParameterizedConversionTest > testConversion[compressionType=GZIP, toMagic=2] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testFetchCommittedOffsets[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testPollHeartbeatAwakesHeartbeatThread PASSED

org.apache.kafka.common.message.MessageTest > testThrottleTimeIgnorableInDescribeGroupsResponse PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testHostResolveChange FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testHostResolveChange(ClusterConnectionStatesTest.java:290)

org.apache.kafka.clients.ClusterConnectionStatesTest > testAuthorizationFailed PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testExcludeInternalTopicsConfigOption[rebalance protocol = EAGER] PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleIPsWithDefault FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithDefault(ClusterConnectionStatesTest.java:266)

org.apache.kafka.clients.ClusterConnectionStatesTest > testTimedOutConnections PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testThrottled PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testExponentialReconnectBackoff PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testRemoveNode PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testExponentialConnectionSetupTimeout PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testSingleIPWithUseAll PASSED
org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll.test.stdout

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleIPsWithUseAll FAILED
    java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:87)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.junit.Assert.assertTrue(Assert.java:53)
        at org.apache.kafka.clients.ClusterConnectionStatesTest.testMultipleIPsWithUseAll(ClusterConnectionStatesTest.java:276)

org.apache.kafka.clients.ClusterConnectionStatesTest > testMultipleNodeConnectionStates PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testClusterConnectionStateChanges PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testMaxReconnectBackoff PASSED

org.apache.kafka.clients.ClusterConnectionStatesTest > testSingleIPWithDefault PASSED

org.apache.kafka.common.requests.EnvelopeRequestTest > testGetPrincipal PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest > testOnCommitChain PASSED

org.apache.kafka.clients.consumer.internals.ConsumerInterceptorsTest > testOnConsumeChain PASSED

org.apache.kafka.common.requests.EnvelopeRequestTest > testToSend PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToLatestOffset PASSED

org.apache.kafka.common.message.MessageTest > testAddPartitionsToTxnVersions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsFencedLeaderEpoch PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnect[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.CreateAclsRequestTest > shouldThrowOnIfUnknown PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitAfterLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupDescribeUnauthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.message.MessageTest > testMessageVersions PASSED

org.apache.kafka.common.message.MessageTest > testDefaultValues PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testSplitPreservesMagicAndCompressionType PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testBatchCannotAbortTwice PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testShouldNotAttemptAppendOnceRecordsBuilderIsClosedForAppends PASSED

org.apache.kafka.common.message.MessageTest > testCompareWithUnknownTaggedFields PASSED

org.apache.kafka.clients.producer.internals.ProducerBatchTest > testSplitPreservesHeaders PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testMultipleAbortMarkers PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testAuthenticationFailure PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testMetadataReady PASSED

org.apache.kafka.common.message.MessageTest > testProduceResponseVersions PASSED

org.apache.kafka.clients.MetadataTest > testClusterCopy PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEndOffsets PASSED

org.apache.kafka.clients.admin.internals.AdminMetadataManagerTest > testMetadataRefreshBackoff PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.ProducerRecordTest > testInvalidRecords PASSED

org.apache.kafka.clients.producer.ProducerRecordTest > testEqualsAndHashCode PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteNextThrowsIfNoInflights PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteLastSentThrowsIfNoInFlights PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationSkippedForOldResponse PASSED

org.apache.kafka.common.message.MessageTest > testLeaveGroupResponseVersions PASSED

org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest > testPartitionMissingInResponseErrorConstructor PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsWithAValidPosition PASSED

org.apache.kafka.clients.MetadataTest > testMetadataTopicErrors PASSED

org.apache.kafka.common.message.MessageTest > testDescribeGroupsRequestVersions PASSED

org.apache.kafka.clients.MetadataTest > testPartialMetadataUpdate PASSED

org.apache.kafka.clients.MetadataTest > testInvalidTopicError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchUnknownTopicOrPartition PASSED

org.apache.kafka.clients.MetadataTest > testOutOfBandEpochUpdate PASSED

org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest > testPartitionLevelErrorConstructor PASSED

org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest > testTopLevelErrorConstructor PASSED

org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest > testNoErrorConstructor PASSED

org.apache.kafka.clients.admin.DeleteConsumerGroupOffsetsResultTest > testPartitionMissingInRequestErrorConstructor PASSED

org.apache.kafka.common.message.MessageTest > testTxnOffsetCommitRequestVersions PASSED

org.apache.kafka.clients.MetadataTest > testUpdateLastEpoch PASSED

org.apache.kafka.clients.MetadataTest > testUpdateMetadataAllowedImmediatelyAfterBootstrap PASSED

org.apache.kafka.clients.MetadataTest > testFailedUpdate PASSED

org.apache.kafka.clients.MetadataTest > testRequestUpdate PASSED

org.apache.kafka.clients.MetadataTest > testTopicAuthorizationError PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatInstanceFencedResponseWithOldGeneration PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithRebalanceInProgress PASSED

org.apache.kafka.common.message.MessageTest > testDescribeGroupsResponseVersions PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithFencedInstanceIdException PASSED

org.apache.kafka.clients.MetadataTest > testClusterListenerGetsNotifiedOfUpdate PASSED

org.apache.kafka.clients.MetadataTest > testStaleMetadata PASSED

org.apache.kafka.common.message.MessageTest > testMetadataVersions PASSED

org.apache.kafka.common.message.MessageTest > testTxnOffsetCommitResponseVersions PASSED

org.apache.kafka.common.message.MessageTest > testSyncGroupDefaultGroupInstanceId PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetByTimeWithPartitionsRetryCouldTriggerMetadataUpdate PASSED

org.apache.kafka.common.metrics.MetricsTest > testSimpleRate PASSED

org.apache.kafka.common.requests.EndTxnRequestTest > testConstructor PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testResetOffsetsMetadataRefresh PASSED

org.apache.kafka.clients.MetadataTest > testMetadataMerge PASSED

org.apache.kafka.clients.MetadataTest > testLeaderMetadataInconsistentWithBrokerMetadata PASSED

org.apache.kafka.clients.MetadataTest > testMetadataUpdateAfterClose PASSED

org.apache.kafka.clients.MetadataTest > testRejectOldMetadata PASSED

org.apache.kafka.common.protocol.types.StructTest > testEquals PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testClearBufferedDataForTopicPartitions PASSED

org.apache.kafka.common.message.MessageTest > testListOffsetsRequestVersions PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithOffsetEpoch PASSED

org.apache.kafka.common.metrics.MetricsTest > testSimpleStats PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePartitionAndPattern PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetErrors PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignment PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testGroupSubscribe PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > topicSubscription PASSED

org.apache.kafka.clients.MetadataTest > testIgnoreLeaderEpochInOlderMetadataResponse PASSED

org.apache.kafka.clients.MetadataTest > testRequestVersion PASSED

org.apache.kafka.clients.MetadataTest > testTimeToNextUpdate PASSED

org.apache.kafka.common.requests.TxnOffsetCommitResponseTest > testConstructorWithErrorResponse PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testNullMapEntriesWithoutAliasesDoNotThrowNPE PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testOffsetResetWhileAwaitingValidation PASSED

org.apache.kafka.common.metrics.MetricsTest > testOldDataHasNoEffect PASSED

org.apache.kafka.clients.MetadataTest > testNoEpoch PASSED

org.apache.kafka.clients.MetadataTest > testNodeIfOffline PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionPause PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionReset PASSED

org.apache.kafka.common.requests.TxnOffsetCommitResponseTest > testParse PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidationAfterOffsetReset PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testDuplicateSynonyms PASSED

org.apache.kafka.common.metrics.MetricsTest > testQuotasEquality PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscription PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithNoEpochClearsAwaitingValidation PASSED

org.apache.kafka.common.message.MessageTest > testGroupInstanceIdIgnorableInDescribeGroupsResponse PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testAllowDeprecatedNulls PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > patternSubscription PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testMixedTransactionalData PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupReceivedExternalCompletion PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testMultipleDeprecations PASSED

org.apache.kafka.common.requests.ControlledShutdownRequestTest > testUnsupportedVersion PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testAllowsNewKey PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testMixedIdempotentData PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > resetOffsetNoValidation PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testAllowNullOverride PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldNotBeFlaggedAsIdempotentWhenRecordsNotIdempotent PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > negotiatedProperty PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveInactiveMetrics PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignmentChangeOnTopicSubscription PASSED

org.apache.kafka.common.utils.ConfigUtilsTest > testTranslateDeprecated PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReturnAbortedTransactionsinUncommittedMode PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribeTopicAndPattern PASSED

org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest > testCreateAndRemoveMetrics PASSED

org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest > testCreateAndClose PASSED

org.apache.kafka.common.metrics.internals.IntGaugeSuiteTest > testCreateMetrics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testConsumerPositionUpdatedWhenSkippingAbortedTransactions PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionUnknownDivergentOffsetWithoutResetPolicy PASSED

org.apache.kafka.common.message.MessageTest > testHeartbeatVersions PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > invalidPositionUpdate PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > unsubscribeUserSubscribe PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantChangePositionForNonAssignedPartition PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testCompleteValidationShouldClearAwaitingValidation PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveChildSensor PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldInstantiateFromListOfOldAndNewClassTypes PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnNonAssignor PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testCompletedFetchRemoval PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldAdaptOldAssignors PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantAssignPartitionForUnsubscribedTopics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsUnknownLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekValidatedShouldClearAwaitingValidation PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > verifyAssignmentId PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > testOnAssignment PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testStressfulSituation PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldInstantiateNewAssignors PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionWithResetPolicy PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV6AndBelowCannotUseZStdCompression PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldBeFlaggedAsTransactionalWhenTransactionalRecords PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldNotBeFlaggedAsTransactionalWhenNoRecords PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotHaveNoRecordBatches PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testBuildWithCurrentMessageFormat PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > partitionAssignmentChangeOnPatternSubscription PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeCompleteValidation PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupProtocolTypeAndName PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > savesCustomExtensionAsNegotiatedProperty PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionUnknownDivergentOffsetWithResetPolicy PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePatternAndTopic PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testBuildWithOldMessageFormat PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testSeekUnvalidatedWithNoOffsetEpoch PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveShouldContainOnlyOneRecordBatch PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantSubscribePatternAndPartition PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotUseMagicV0 PASSED

org.apache.kafka.common.requests.ProduceRequestTest > testV3AndAboveCannotUseMagicV1 PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > testAssign PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeNonCompressed PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testCoordinatorDiscoveryBackoff PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testMetadataFailurePropagated PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdatePositionWithLastRecordMissingFromBatch PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestTimeout PASSED

org.apache.kafka.common.requests.ProduceRequestTest > shouldBeFlaggedAsIdempotentWhenIdempotentRecords PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > unrecognizedExtensionsAreNotSaved PASSED

org.apache.kafka.common.protocol.types.TypeTest > testCompactRecordsSerde PASSED

org.apache.kafka.common.protocol.types.TypeTest > testNullCompactRecordsSerde PASSED

org.apache.kafka.common.protocol.types.TypeTest > testRecordsSerde PASSED

org.apache.kafka.common.protocol.types.TypeTest > testEmptyCompactRecordsSerde PASSED

org.apache.kafka.common.protocol.types.TypeTest > testNullRecordsSerde PASSED

org.apache.kafka.common.protocol.types.TypeTest > testEmptyRecordsSerde PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > illegalToken PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testPreferredReadReplicaLease PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > cantAssignPartitionForUnmatchedPattern PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdatePositionOnEmptyBatch PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testMaybeValidatePositionForCurrentLeader PASSED

org.apache.kafka.clients.consumer.internals.SubscriptionStateTest > testTruncationDetectionWithoutResetPolicy PASSED

org.apache.kafka.common.message.MessageTest > testOffsetCommitResponseVersions PASSED

org.apache.kafka.common.acl.AclOperationTest > testCode PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetUpdateEpoch PASSED

org.apache.kafka.common.acl.AclOperationTest > testName PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTrySend PASSED

org.apache.kafka.common.acl.AclOperationTest > testExhaustive PASSED

org.apache.kafka.common.acl.AclOperationTest > testIsUnknown PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslServerTest > throwsAuthenticationExceptionOnInvalidExtensions PASSED

org.apache.kafka.common.message.MessageTest > testAddOffsetsToTxnVersions PASSED

org.apache.kafka.common.message.MessageTest > testDescribeAclsRequest PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetOutOfRange PASSED

org.apache.kafka.common.utils.SanitizerTest > testSanitize PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDiscardedAfterPausedPartitionResumedAndSeekedToNewOffset PASSED

org.apache.kafka.common.message.MessageTest > testLeaderAndIsrVersions PASSED

org.apache.kafka.clients.consumer.internals.PartitionAssignorAdapterTest > shouldThrowKafkaExceptionOnListWithNonAssignorClassType PASSED

org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest > unavailablePartitionsTest PASSED

org.apache.kafka.clients.producer.internals.StickyPartitionCacheTest > testStickyPartitionCache PASSED

org.apache.kafka.common.requests.OffsetCommitResponseTest > testConstructorWithErrorResponse PASSED

org.apache.kafka.common.requests.OffsetCommitResponseTest > testParse PASSED

org.apache.kafka.common.message.MessageTest > testOffsetCommitRequestVersions PASSED

org.apache.kafka.common.requests.ControlledShutdownRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testSingleLeaveConstructor PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testBuildEmptyMembers PASSED

org.apache.kafka.common.requests.LeaveGroupRequestTest > testMultiLeaveConstructor PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testOkResponse PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupUnknownMemberResponseWithOldGeneration PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testEmptyResponse PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testUnauthorizedTopic PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testUnexpectedEmptyResponse PASSED

org.apache.kafka.common.message.MessageTest > testSimpleMessage PASSED

org.apache.kafka.clients.consumer.internals.OffsetForLeaderEpochClientTest > testRetriableError PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithNullKeyBytes PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testSet PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithKeyBytes PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testClear PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testRemove PASSED

org.apache.kafka.clients.producer.RoundRobinPartitionerTest > testRoundRobinWithUnavailablePartitions PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testMoveToEnd PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testUpdateAndMoveToEnd PASSED

org.apache.kafka.common.internals.PartitionStatesTest > testPartitionValues PASSED

org.apache.kafka.common.message.MessageTest > testUnknownTaggedFields PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testEmptyMeansAllTopicsV0 PASSED

org.apache.kafka.common.metrics.MetricsTest > testPercentilesWithRandomNumbersAndLinearBucketing PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testEmptyMeansEmptyForVersionsAboveV0 PASSED

org.apache.kafka.common.requests.MetadataRequestTest > testMetadataRequestVersion PASSED

org.apache.kafka.common.utils.ThreadUtilsTest > testThreadNameWithNumberNoDemon PASSED

org.apache.kafka.common.utils.ThreadUtilsTest > testThreadNameWithoutNumberDemon PASSED

org.apache.kafka.common.metrics.MetricsTest > shouldPinLargerValuesToMax PASSED

org.apache.kafka.common.utils.ThreadUtilsTest > testThreadNameWithNumberDemon PASSED

org.apache.kafka.common.utils.ThreadUtilsTest > testThreadNameWithoutNumberNoDemon PASSED

org.apache.kafka.common.config.ConfigDefTest > testNiceTimeUnits PASSED

org.apache.kafka.common.config.ConfigDefTest > testBasicTypes PASSED

org.apache.kafka.common.config.ConfigDefTest > testNullDefault PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testEmptyPathWithKey PASSED

org.apache.kafka.common.config.ConfigDefTest > testParseForValidate PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testNullPath PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefaultRange PASSED

org.apache.kafka.common.config.ConfigDefTest > testNames PASSED

org.apache.kafka.common.config.ConfigDefTest > testGroupInference PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringNestedClass PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringInt PASSED

org.apache.kafka.common.message.MessageTest > testCreateTopicsVersions PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testEmptyPath PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testNullPathWithKey PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testGetOneKeyAtPath PASSED

org.apache.kafka.common.config.provider.FileConfigProviderTest > testGetAllKeysAtPath PASSED

org.apache.kafka.common.security.SaslExtensionsTest > testCannotAddValueToMapReferenceAndGetFromExtensions PASSED

org.apache.kafka.common.security.SaslExtensionsTest > testReturnedMapIsImmutable PASSED

org.apache.kafka.common.utils.Crc32CTest > testValue PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionResponseParsing PASSED

org.apache.kafka.common.utils.Crc32CTest > testUpdate PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest > testError PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackTest > testToken PASSED

org.apache.kafka.common.metrics.MetricsTest > shouldPinSmallerValuesToMin PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > multiSend PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseShouldBeIdempotent PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidators PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidateCannotParse PASSED

org.apache.kafka.common.message.MessageTest > testNonIgnorableFieldWithDefaultNull PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidate PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testShouldThrottle PASSED

org.apache.kafka.common.requests.RequestResponseTest > testValidApiVersionsRequest PASSED

org.apache.kafka.common.config.ConfigDefTest > testInternalConfigDoesntShowUpInDocs PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefaultString PASSED

org.apache.kafka.common.message.RecordsSerdeTest > testSerdeRecords PASSED

org.apache.kafka.common.config.ConfigDefTest > testClassWithAlias PASSED

org.apache.kafka.common.message.RecordsSerdeTest > testSerdeEmptyRecords PASSED

org.apache.kafka.common.requests.RequestResponseTest > cannotUseFindCoordinatorV0ToFindTransactionCoordinator PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionResponseParsingFallback PASSED

org.apache.kafka.common.metrics.MetricsTest > testMetricName PASSED

org.apache.kafka.common.message.MessageTest > testWriteNullForNonNullableFieldRaisesException PASSED

org.apache.kafka.common.message.RecordsSerdeTest > testSerdeNullRecords PASSED

org.apache.kafka.common.requests.RequestResponseTest > testJoinGroupRequestVersion0RebalanceTimeout PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testNullableMetadata PASSED

org.apache.kafka.common.config.ConfigDefTest > testSslPasswords PASSED

org.apache.kafka.common.config.ConfigDefTest > testDynamicUpdateModeInDocs PASSED

org.apache.kafka.common.metrics.MetricsTest > testSampledStatReturnsInitialValueWhenNoValuesExist PASSED

org.apache.kafka.common.config.ConfigDefTest > testBaseConfigDefDependents PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringClass PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringShort PASSED

org.apache.kafka.common.config.ConfigDefTest > testInvalidDefault PASSED

org.apache.kafka.common.config.ConfigDefTest > toRst PASSED

org.apache.kafka.common.config.ConfigDefTest > testCanAddInternalConfig PASSED

org.apache.kafka.common.config.ConfigDefTest > testMissingRequired PASSED

org.apache.kafka.common.config.ConfigDefTest > testParsingEmptyDefaultValueForStringFieldShouldSucceed PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringPassword PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldMaintainOrderWhenAdding PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldForbidConditionalRemove PASSED

org.apache.kafka.common.config.ConfigDefTest > testNiceMemoryUnits PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringList PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringLong PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringBoolean PASSED

org.apache.kafka.common.config.ConfigDefTest > testNullDefaultWithValidator PASSED

org.apache.kafka.common.config.ConfigDefTest > testMissingDependentConfigs PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringDouble PASSED

org.apache.kafka.common.utils.FixedOrderMapTest > shouldForbidRemove PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testStructBuild PASSED

org.apache.kafka.common.config.ConfigDefTest > toEnrichedRst PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testUseDefaultLeaderEpoch PASSED

org.apache.kafka.common.requests.OffsetFetchResponseTest > testConstructor PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestIsolationLevel PASSED

org.apache.kafka.common.requests.RequestResponseTest > testCreateTopicRequestV3FailsIfNoPartitionsOrReplicas PASSED

org.apache.kafka.common.requests.RequestResponseTest > testOffsetFetchRequestBuilderToString PASSED

org.apache.kafka.common.metrics.MetricsTest > testDeprecatedMetricValueMethod PASSED

org.apache.kafka.common.requests.RequestResponseTest > testResponseHeader PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testSyncGroupUnknownMemberResponseWithOldGeneration PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testLookupCoordinator PASSED

org.apache.kafka.common.config.ConfigDefTest > testDefinedTwice PASSED

org.apache.kafka.common.config.ConfigDefTest > testConvertValueToStringString PASSED

org.apache.kafka.common.config.ConfigDefTest > testNestedClass PASSED

org.apache.kafka.common.config.ConfigDefTest > testBadInputs PASSED

org.apache.kafka.common.config.ConfigDefTest > testValidateMissingConfigKey PASSED

org.apache.kafka.common.metrics.MetricsTest > testRateWindowing PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testInvalidTopicExceptionPropagatedFromMetadata PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > wakeup PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTimeoutUnsentRequest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWithInFlightRequests PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseOldPrincipalBuilderForPlaintextIfProvided PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testSessionless PASSED

org.apache.kafka.common.message.MessageTest > testOffsetFetchVersions PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testConstructionFromApiVersionsResponse PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRangeHigh PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersion PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUsableVersionCalculationNoKnownVersions PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testVersionsToString PASSED

org.apache.kafka.common.utils.JavaTest > testLoadKerberosLoginModule PASSED

org.apache.kafka.common.utils.JavaTest > testIsIBMJdk PASSED

org.apache.kafka.common.utils.JavaTest > testJavaVersion PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testSyncGroupRequestWithFencedInstanceIdException PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUnsupportedVersionsToString PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRangeLow PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testLatestUsableVersionOutOfRange PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUnknownApiVersionsToString PASSED

org.apache.kafka.clients.NodeApiVersionsTest > testUsableVersionLatestVersions PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testVerifyFullFetchResponsePartitions PASSED

org.apache.kafka.common.requests.ListOffsetsRequestTest > testDuplicatePartitions PASSED

org.apache.kafka.common.message.MessageTest > testListOffsetsResponseVersions PASSED

org.apache.kafka.common.metrics.MetricsTest > testMetricInstances PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.replica.ReplicaSelectorTest > testSameRackSelector PASSED

org.apache.kafka.common.message.MessageTest > testOffsetForLeaderEpochVersions PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testIncrementals PASSED

org.apache.kafka.common.metrics.MetricsTest > testTimeWindowing PASSED

org.apache.kafka.common.utils.ExponentialBackoffTest > testExponentialBackoff PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testIncrementalPartitionRemoval PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testEmptyList PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testNestedSingleEmptyList PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThreadSafeAssignedPartitionsMetric[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetLoadInProgress[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetOnly[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testEmptyListAtTheEnd PASSED

org.apache.kafka.common.metrics.MetricsTest > testEventWindowing PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalBuilderScram PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testEmptyListInBetweenNonEmpty PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testFindMissing PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testEmptyListFollowedByNonEmpty PASSED

org.apache.kafka.common.utils.FlattenedIteratorTest > testNestedLists PASSED

org.apache.kafka.clients.FetchSessionHandlerTest > testDoubleBuild PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteNext PASSED

org.apache.kafka.clients.InFlightRequestsTest > testCompleteLastSent PASSED

org.apache.kafka.common.metrics.MetricsTest > testSampledStatReturnsNaNWhenNoValuesExist PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > addsExtensions PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupSentExternalCompletion PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > throwsErrorOnInvalidExtensionValue PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithMemberIdRequired PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.requests.EndTxnResponseTest > testConstructor PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalBuilderSerde PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatRequestWithFencedInstanceIdException PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > tooEarlyExpirationTime PASSED

org.apache.kafka.common.requests.OffsetCommitRequestTest > testGetErrorResponseTopics PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.OffsetCommitRequestTest > testVersionSupportForGroupInstanceId PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > missingRequiredScope PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > validToken PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > badOrMissingPrincipal PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredValidatorCallbackHandlerTest > includesRequiredScope PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testBuffersGarbageCollected PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[0 magic=0, firstOffset=0, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.OffsetCommitRequestTest > testConstructor PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testStressfulSituation PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCloseAllocations PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalWithSslPrincipalMapper PASSED

org.apache.kafka.common.requests.ListOffsetsRequestTest > testGetErrorResponseV0 PASSED

org.apache.kafka.common.requests.ListOffsetsRequestTest > testToListOffsetsTopics PASSED

org.apache.kafka.common.requests.ListOffsetsRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalIfSSLPeerIsNotAuthenticated PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testPrincipalBuilderGssapi PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitRetryBackoff[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSelectRebalanceProtcol[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationBound PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseSessionPeerPrincipalForSsl PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testUseOldPrincipalBuilderForSslIfProvided PASSED

org.apache.kafka.common.security.auth.DefaultKafkaPrincipalBuilderTest > testReturnAnonymousPrincipalForPlaintext PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[0 magic=0, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testReleaseNull PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationZero PASSED

org.apache.kafka.common.network.ChannelBuildersTest > testCreateOldPrincipalBuilder PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testDoubleFree PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testNegativeMaxAllocation PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testUnsupportedVersion PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupSent PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testBuilderNormalizationWithAllDeletePartitionEqualToTrue PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testBuilderNormalizationWithAllDeletePartitionEqualToFalse PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleLeaveGroupResponseWithException PASSED

org.apache.kafka.common.record.CompressionTypeTest > testLZ4FramingMagicV0 PASSED

org.apache.kafka.common.record.CompressionTypeTest > testLZ4FramingMagicV1 PASSED

org.apache.kafka.clients.InFlightRequestsTest > testClearAll PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testPartitionStatesNormalization PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[1 magic=0, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationOverMaxAllocation PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testMaxAllocationLargerThanSize PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testZeroMaxAllocation PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testZeroSize PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testNegativeSize PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testApiIdsArePositive PASSED

org.apache.kafka.clients.NetworkClientTest > testDefaultRequestTimeout PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponse PASSED

org.apache.kafka.common.memory.GarbageCollectedMemoryPoolTest > testAllocationNegative PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testInvalidVarlong PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testUnsignedVarintSerde PASSED

org.apache.kafka.clients.InFlightRequestsTest > testTimedOutNodes PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflightsWhereFirstFailsFatallyAndSequenceOfFutureBatchesIsAdjusted PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testVarlongSerde PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedInt PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testWriteUnsignedIntLEToArray PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testInvalidVarint PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testVarintSerde PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedIntLEFromArray PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testReadUnsignedIntLEFromInputStream PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testDouble PASSED

org.apache.kafka.common.utils.ByteUtilsTest > testWriteUnsignedIntLEToOutputStream PASSED

org.apache.kafka.clients.NetworkClientTest > testUnsupportedApiVersionsRequestWithVersionProvidedByTheBroker PASSED

org.apache.kafka.clients.NetworkClientTest > testUnsupportedVersionDuringInternalMetadataRequest PASSED

org.apache.kafka.clients.NetworkClientTest > testDisconnectDuringUserMetadataRequest PASSED

org.apache.kafka.clients.NetworkClientTest > testClose PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayDisconnectedWithNoExponentialBackoff PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testUniqueness PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCancelInFlightRequestAfterFatalError PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testFromApiKey PASSED

org.apache.kafka.clients.NetworkClientTest > testLeastLoadedNode PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testAllVersionsHaveSchemas PASSED

org.apache.kafka.clients.NetworkClientTest > testInvalidApiVersionsRequest PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionSetupTimeout PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayConnected PASSED

org.apache.kafka.clients.NetworkClientTest > testApiVersionsRequest PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testInvalidFromApiKey PASSED

org.apache.kafka.common.message.ApiMessageTypeTest > testHeaderVersion PASSED

org.apache.kafka.common.utils.MappedIteratorTest > testEmptyList PASSED

org.apache.kafka.common.utils.MappedIteratorTest > testStringToInteger PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotentSplitBatchAndSend PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingAddOffsetRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesInvalidRequestError PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnknownProducerErrorShouldBeRetriedWhenLogStartOffsetIsUnknown PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotentUnknownProducerHandlingWhenRetentionLimitReached PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupReceivedExternalCompletion PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testEpochBumpOnOutOfOrderSequenceForNextBatch PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeReplicaLogDirs PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.NetworkClientTest > testAuthenticationFailureWithInFlightMetadataRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[2 magic=0, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTopicAuthorizationFailureInAddPartitions PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testMetadataTopicExpiry PASSED

org.apache.kafka.clients.NetworkClientTest > testRequestTimeout PASSED

org.apache.kafka.clients.NetworkClientTest > testUnsupportedApiVersionsRequestWithoutVersionProvidedByTheBroker PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayConnectedWithNoExponentialBackoff PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponseWithNoBrokerDiscovery PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldFailAbortIfAddOffsetsFailsWithFatalError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.network.SelectorTest > testLargeMessageSequence PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDropCommitOnBatchExpiry PASSED

org.apache.kafka.clients.NetworkClientTest > testThrottlingNotEnabledForConnectionToOlderBroker PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testPredicateAndDynamicReload PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testJmxRegistration PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testJmxPrefix PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionalRequestsSentOnShutdown PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.NetworkClientTest > testSimpleRequestResponseWithStaticNodes PASSED

org.apache.kafka.clients.NetworkClientTest > testLeastLoadedNodeConsidersThrottledConnections PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfFirstBatchShouldCauseEpochBumpIfFutureBatchesFail PASSED

org.apache.kafka.common.security.authenticator.LoginManagerTest > testClientLoginManager PASSED

org.apache.kafka.common.security.authenticator.LoginManagerTest > testServerLoginManager PASSED

org.apache.kafka.clients.NetworkClientTest > testClientDisconnectAfterInternalApiVersionRequest PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testJmxRegistrationSanitization PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSendOffsetsWithGroupMetadata PASSED

org.apache.kafka.common.metrics.JmxReporterTest > testDeprecatedJmxPrefixWithDefaultMetrics PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.NetworkClientTest > testCallDisconnect PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[3 magic=0, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.requests.StopReplicaRequestTest > testTopicStatesNormalization PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBatchFailureAfterProducerReset PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.metrics.KafkaMetricsContextTest > testCreationWithValidNamespaceAndNoLabels PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.metrics.KafkaMetricsContextTest > testCreationWithValidNamespaceAndLabels PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.metrics.KafkaMetricsContextTest > testCreationWithNullNamespaceAndLabels PASSED

org.apache.kafka.common.requests.RequestResponseTest > testSerialization PASSED

org.apache.kafka.clients.NetworkClientTest > testDnsLookupFailure PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelay PASSED

org.apache.kafka.common.metrics.KafkaMetricsContextTest > testKafkaMetricsContextLabelsAreImmutable PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionThrottling PASSED

org.apache.kafka.common.metrics.KafkaMetricsContextTest > testCreationWithValidNamespaceAndNullLabelValues PASSED

org.apache.kafka.clients.NetworkClientTest > testServerDisconnectAfterInternalApiVersionRequest PASSED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayWithNoExponentialBackoff PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpEpochAndResetSequenceNumbersAfterUnknownProducerId PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionAbortedExceptionOnAbortWithoutError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsDontRetryThrottlingExceptionWhenDisabled PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfProducerFencedErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testToLowerCase PASSED

org.apache.kafka.common.requests.RequestResponseTest > verifyFetchResponseFullWrites PASSED

org.apache.kafka.clients.NetworkClientTest > testCorrelationId PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testParse PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testToUpperCase PASSED

org.apache.kafka.common.security.kerberos.KerberosNameTest > testInvalidRules PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAllowDrainInAbortableErrorState PASSED

org.apache.kafka.clients.NetworkClientTest > testSendToUnreadyNode PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testMessageFormatDownConversion PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testGetOrCreateListValue PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupInOnJoinComplete PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.clients.NetworkClientTest > testLeastLoadedNodeProvideDisconnectedNodesPrioritizedByLastConnectionTimestamp PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[4 magic=0, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.clients.NetworkClientTest > testConnectionDelayDisconnected PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[4 magic=0, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.clients.NetworkClientTest > testDisconnectWithMultipleInFlights PASSED

org.apache.kafka.common.requests.RequestResponseTest > fetchResponseVersionTest PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchResponseV4 PASSED

org.apache.kafka.common.requests.RequestResponseTest > testInvalidApiVersionsRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionalUnknownProducerHandlingWhenRetentionLimitReached PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[5 magic=1, firstOffset=0, compressionType=NONE] SKIPPED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testNoGenerationWillNotTriggerProtocolNameCheck PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestMaxBytesOldVersions PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestCompat PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionResponseParsingFallbackException PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testEpochBumpAfterLastInflightBatchFails PASSED

org.apache.kafka.common.requests.RequestResponseTest > testListGroupRequestV3FailsWithStates PASSED

org.apache.kafka.common.requests.RequestResponseTest > testDeletableTopicResultErrorMessageIsNullByDefault PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testGroupMaxSizeExceptionIsFatal PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceRequestToStringTest PASSED

org.apache.kafka.common.requests.UpdateFeaturesResponseTest > testErrorCounts PASSED

org.apache.kafka.common.requests.RequestResponseTest > testPartitionSize PASSED

org.apache.kafka.common.requests.RequestResponseTest > testCreateTopicRequestV0FailsIfValidateOnly PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.requests.RequestResponseTest > testControlledShutdownResponse PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionResponseWithNotUnsupportedError PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfAllSentBatchesShouldCauseUnresolvedSequences PASSED

org.apache.kafka.common.requests.RequestResponseTest > testFetchRequestWithMetadata PASSED

org.apache.kafka.common.requests.RequestResponseTest > testInitProducerIdRequestVersions PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionsRequestBeforeV3Validation PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[5 magic=1, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > closeShouldBeIdempotent PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToFatalErrorWhenRetriedBatchIsExpired PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[6 magic=1, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.config.AbstractConfigTest > testOriginalsWithPrefix PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testOffsetCommitNumRetries PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNoFailedBatchHandlingWhenTxnManagerIsInFatalError PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[7 magic=1, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnDisconnectAfterSend PASSED

org.apache.kafka.common.requests.RequestResponseTest > testErrorCountsIncludesNone PASSED

org.apache.kafka.common.requests.RequestResponseTest > testApiVersionResponseWithUnsupportedError PASSED

org.apache.kafka.common.requests.RequestResponseTest > produceRequestGetErrorResponseTest PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfigProvidersPropsAsParam PASSED

org.apache.kafka.common.protocol.ErrorsTest > testExceptionName PASSED

org.apache.kafka.common.protocol.ErrorsTest > testForExceptionDefault PASSED

org.apache.kafka.common.protocol.ErrorsTest > testUniqueExceptions PASSED

org.apache.kafka.common.protocol.ErrorsTest > testForExceptionInheritance PASSED

org.apache.kafka.common.protocol.ErrorsTest > testNoneException PASSED

org.apache.kafka.common.protocol.ErrorsTest > testUniqueErrorCodes PASSED

org.apache.kafka.common.protocol.ErrorsTest > testExceptionsAreNotGeneric PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortTransactionAndResetSequenceNumberOnUnknownProducerId PASSED

org.apache.kafka.common.config.AbstractConfigTest > testOriginalWithOverrides PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfiguredInstances PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithDuplicateConfigProvider PASSED

org.apache.kafka.common.config.AbstractConfigTest > testOriginalsWithConfigProvidersProps PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSendOffsetWithGroupMetadataSuccessAsAutoDowngradeTxnCommitEnabled PASSED

org.apache.kafka.common.config.AbstractConfigTest > testEmptyList PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithInFlightPartitionAddAfterAbortableError PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithSecondaryPrefix PASSED

org.apache.kafka.common.config.AbstractConfigTest > testConfigProviderConfigurationWithConfigParams PASSED

org.apache.kafka.common.utils.CollectionUtilsTest > testSubtractMapRemovesSecondMapsKeys PASSED

org.apache.kafka.common.config.AbstractConfigTest > testImmutableOriginalsWithConfigProvidersProps PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[8 magic=1, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[9 magic=1, firstOffset=0, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[9 magic=1, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.utils.CollectionUtilsTest > testSubtractMapDoesntRemoveAnythingWhenEmptyMap PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMultipleConfigProviders PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupSentExternalCompletion PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testToString PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsWithTopLevelError PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsNoTopLevelError PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithPrefixOverride PASSED

org.apache.kafka.common.config.AbstractConfigTest > testDocumentationOf PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMissingConfigKey PASSED

org.apache.kafka.common.config.AbstractConfigTest > testDocumentationOfExpectNull PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithInvalidConfigProviderClass PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCanBumpEpochDuringCoordinatorDisconnect PASSED

org.apache.kafka.common.config.AbstractConfigTest > testUnusedConfigs PASSED

org.apache.kafka.common.config.AbstractConfigTest > testValuesWithPrefixAllOrNothing PASSED

org.apache.kafka.common.config.AbstractConfigTest > testAutoConfigResolutionWithMissingConfigProvider PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.network.SelectorTest > testLowestPriorityChannel PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncate PASSED

org.apache.kafka.common.record.FileRecordsTest > testIterationOverPartialAndTruncation PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsets PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerFencedInAddPartitionToTxn PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > validOptionsWithExplicitOptionValues PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > throwsErrorOnInvalidExtensionName PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNotReadyForSendBeforeInitTransactions PASSED

org.apache.kafka.common.record.FileRecordsTest > testRead PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMaybeAddPartitionToTransaction PASSED

org.apache.kafka.common.config.AbstractConfigTest > testClassConfigs PASSED

org.apache.kafka.common.utils.Crc32Test > testValue PASSED

org.apache.kafka.common.utils.Crc32Test > testUpdate PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfCoordinatorLoadingErrorOnTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPartitionNotAdded PASSED

org.apache.kafka.common.security.scram.internals.ScramFormatterTest > rfc7677Example PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionOverridesRetryBackoffForConcurrentTransactions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithAddedPartitionAfterAbortableError PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredLoginCallbackHandlerTest > minimalToken PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testIncrementalAlterConfigs PASSED

org.apache.kafka.common.requests.LeaderAndIsrResponseTest > testErrorCountsFromGetErrorResponse PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInvalidProducerEpochFromProduce PASSED

org.apache.kafka.common.security.scram.internals.ScramFormatterTest > saslName PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithInFlightPartitionAddAfterFatalError PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testProducerWithInvalidCredentials PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testNotEnoughBytes PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testSerde PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testWrapsExtensionsCallbackHandlingErrorInSaslExceptionInFirstClientMessage PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testNoExtensionsDoesNotAttachAnythingToFirstClientMessage PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerSaslClientTest > testAttachesExtensionsToFirstClientMessage PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testIllegalNegativeVersion PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testCannotDeserializeUnknownControlType PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testUnknownControlTypeNotAllowed PASSED

org.apache.kafka.common.record.EndTransactionMarkerTest > testDeserializeNewerVersion PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInFindCoordinator PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[0] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[0] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[0] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInvalidProducerEpochConvertToProducerFencedInAddOffSetsToTxn PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[1] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[1] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[1] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[2] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[3] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[4] PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldRoundTripFieldThroughStruct PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldRoundTripFieldThroughStructWithNullable PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAwaitFlushComplete PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSoonToExpireBatchesArePickedUpForExpiry PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testFlush PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[5] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAllowAbortOnProduceFailure PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[5] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroupNumRetries PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[5] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[6] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[6] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[6] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInvalidProducerEpochConvertToProducerFencedInAddPartitionToTxn PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[7] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testFull PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[7] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCommitTransactionWithUnsentProduceRequest PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendNoProducerId PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopics PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[7] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[8] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[9] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[9] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[9] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[10] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[11] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToAbortableErrorOnBatchExpiry PASSED

org.apache.kafka.common.record.FileRecordsTest > testDownconversionAfterMessageFormatDowngrade PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInvalidProducerEpochConvertToProducerFencedInEndTxn PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyTaggedStruct PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorTransactionStarted PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyNullableString PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldStoreField PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyStructUnsupportedVersion PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldRoundTripFieldThroughBufferWithNullable PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInAddOffsetsToTxn PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPendingPartitionAfterAbortableError PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterSyncGroupReceived PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testMetrics PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestWithGroupInstanceIdNotFound PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[11] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[11] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[12] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[13] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[14] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[14] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[14] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[15] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[15] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[15] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetIsValidAfterSeek PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleNormalLeaveGroupResponse PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransitionToAbortableErrorOnMultipleBatchExpiry PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyString PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyStruct PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyUint16 PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyTaggedIntArray PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldThrowIfCannotWriteNonIgnorableField PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldImplementEqualsAndHashCode PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyBytes PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testMyInt16 PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testCommonStruct PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldDefaultField PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > shouldRoundTripFieldThroughBuffer PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testTaggedLong PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testLeaveGroupSentWithGroupInstanceIdUnSet PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInInitProducerId PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownWithCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMaybeLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleMultipleMembersLeaveGroupResponse PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortResendsAddPartitionErrorIfRetried PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[16] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[16] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[16] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithPendingPartitionAfterFatalError PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[17] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[17] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[17] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpTransactionalEpochOnRecoverableAddOffsetsRequestError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBatchCompletedAfterProducerReset PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRaiseErrorWhenNoPartitionsPendingOnDrain PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendAfterFatalError PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[18] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[18] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[18] PASSED

org.apache.kafka.common.message.SimpleExampleMessageTest > testTaggedUuid PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testFindFindAllContainsRemoveOnEmptyCollection PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[19] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[20] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[21] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[21] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[21] PASSED

org.apache.kafka.common.metrics.MetricsTest > testConcurrentReadUpdate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[22] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[23] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[24] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[25] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[25] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[25] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testEnlargement PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[26] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[27] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[27] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[27] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnDisconnectBeforeSend PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[28] PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveMetric PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[28] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[28] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[29] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[29] PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testTransactionalProducerWithInvalidCredentials PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[29] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[30] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[30] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotSendAbortTxnRequestWhenOnlyAddPartitionsRequestFailed PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[30] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[31] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[31] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[31] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[32] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[32] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[32] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[33] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[33] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testNullForbidden PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[33] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[34] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[34] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[34] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testInsertDelete PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[35] PASSED

org.apache.kafka.common.metrics.MetricsTest > testBadSensorHierarchy PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[35] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[35] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[10 magic=2, firstOffset=0, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[36] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[36] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.metrics.MetricsTest > testRemoveSensor PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testTraversal PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[36] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[37] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[37] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[37] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[38] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[38] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[38] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[11 magic=2, firstOffset=0, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[39] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[39] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[39] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[40] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[41] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[41] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[41] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[42] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[42] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[42] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[43] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[12 magic=2, firstOffset=0, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[43] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[43] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[44] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[44] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[44] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[45] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[45] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[45] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[46] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[47] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[47] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[47] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[48] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[49] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[50] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[51] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[51] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[51] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[52] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[52] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[52] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[53] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[53] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[53] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[54] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[13 magic=2, firstOffset=0, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[54] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[54] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashMultiCollectionTest > testManyInsertsAndDeletes PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[55] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[56] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatIllegalGenerationResponseWithOldGeneration PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[56] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[56] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[57] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[57] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[57] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[58] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[58] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[58] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithExpirationSmallerThanConfiguredBuffers PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[59] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[59] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[59] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[60] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[60] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[60] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithMinPeriodIntrusion PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithPreExpirationBufferIntrusion PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[61] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[61] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[61] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[14 magic=2, firstOffset=0, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[62] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[15 magic=0, firstOffset=57, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testLoginExceptionCausesCorrectLogout PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[62] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[62] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[63] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[63] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[63] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[15 magic=0, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[64] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[64] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[64] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupOffsets PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testSyncGroupIllegalGenerationResponseWithOldGeneration PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[65] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[65] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[65] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[66] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[66] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[66] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeNonConsumerGroups PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefresh PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[67] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[67] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[67] PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshingLoginTest > testRefreshWithExpirationSmallerThanConfiguredBuffersAndOlderCreateTime PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[68] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[68] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[68] PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testConsumerWithInvalidCredentials PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[16 magic=0, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[17 magic=0, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[69] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[70] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[70] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[70] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[71] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[71] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[71] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeReplicaLogDirsUnexpected PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[18 magic=0, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testUncaughtExceptionInHeartbeatThread PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[19 magic=0, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[19 magic=0, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testGracefulClose PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHandleLeaveGroupResponseWithEmptyMemberResponse PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestTimeoutLowerBoundedByDefaultRequestTimeout PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[20 magic=1, firstOffset=57, compressionType=NONE] SKIPPED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[72] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[72] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[72] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[20 magic=1, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[21 magic=1, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterReplicaLogDirsUnrequested PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[73] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testTimeoutAndRetryJoinGroupIfNeeded PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatSentWhenCompletingRebalance PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[22 magic=1, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[73] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[73] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testAuthenticationErrorInEnsureCoordinatorReady PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testJoinGroupRequestMaxTimeout PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[74] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[74] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[74] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[23 magic=1, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[24 magic=1, firstOffset=57, compressionType=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[24 magic=1, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConfigsPartialResponse PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[25 magic=2, firstOffset=57, compressionType=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[75] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[75] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[75] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > blockWhenPollConditionNotSatisfied PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > send PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testAuthenticationExceptionPropagatedFromMetadata PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > sendExpiry PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > blockOnlyForRetryBackoffIfNoInflightRequests PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testAwaitForMetadataUpdateWithTimeout PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[76] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[26 magic=2, firstOffset=57, compressionType=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[76] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[76] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[27 magic=2, firstOffset=57, compressionType=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWakesUpPoll PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testTopicAuthorizationExceptionPropagatedFromMetadata PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[77] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[77] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[77] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMetricConfigRecordingLevel PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[28 magic=2, firstOffset=57, compressionType=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testChecksum[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testNextBatchSize[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testWakeupAfterJoinGroupReceived PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToAlreadyCompactedLog[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToBatchDiscard[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildLeaderChangeMessage[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testBuildEndTxnMarker[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethod[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesLogAppendTime[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesPartitionLeaderEpoch[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testUnexpectedRequestType PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testOversizeRequest PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterTo[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToWithUndersizedBuffer[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testHasRoomForMethodWithHeaders[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testFilterToPreservesProducerInfo[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testWithRecords[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testIterator[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchDeletion[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsTest > testEmptyBatchRetention[29 magic=2, firstOffset=57, compressionType=ZSTD] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[78] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[78] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[78] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testRegexSubscription PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithEmptySubscription PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[79] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[80] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[81] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[82] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[83] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[84] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[85] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[85] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[85] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[86] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[87] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[88] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[89] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[90] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[91] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[92] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[93] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[94] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[94] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[94] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionWithEmptyPartitionAssignment PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[95] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[95] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[95] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[96] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[96] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[96] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[97] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[98] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[98] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[98] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[99] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[100] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[100] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[100] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[101] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[102] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[103] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[104] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[105] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[105] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[105] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[106] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[107] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[108] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[109] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[110] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[110] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[110] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[111] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[112] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[112] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[112] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatRebalanceInProgressResponseDuringRebalancing PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testHeartbeatThreadClose[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testFutureCompletionOutsidePoll PASSED

org.apache.kafka.common.metrics.MetricsTest > testConcurrentReadUpdateReport PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > sendWithinBackoffPeriodAfterAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > doNotBlockIfPollConditionIsSatisfied PASSED

org.apache.kafka.clients.consumer.internals.ConsumerNetworkClientTest > testDisconnectWithUnsentRequests PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[113] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[113] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[113] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[114] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[114] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[114] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[115] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[115] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[115] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[116] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[116] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[116] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[117] PASSED

org.apache.kafka.clients.producer.RecordSendTest > testTimeout PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[117] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[117] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.authenticator.ClientAuthenticationFailureTest > testAdminClientWithInvalidCredentials PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[118] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[118] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[118] PASSED

org.apache.kafka.common.metrics.MetricsTest > testPercentiles PASSED

org.apache.kafka.common.metrics.MetricsTest > testDuplicateMetricName PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[119] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[119] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[119] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[120] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[120] PASSED

org.apache.kafka.common.metrics.MetricsTest > testQuotas PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataChangeTriggersRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[120] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[121] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[122] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[122] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[122] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[123] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[124] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[125] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[126] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[127] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[128] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[129] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[129] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[129] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[130] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[131] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[131] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[131] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[132] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[133] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[134] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[134] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[134] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[135] PASSED

org.apache.kafka.common.metrics.MetricsTest > testHierarchicalSensors PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceWithMetadataChange[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[135] PASSED

org.apache.kafka.common.security.kerberos.KerberosRuleTest > testReplaceParameters PASSED

org.apache.kafka.clients.producer.RecordSendTest > testError PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[135] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupLeader[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThrowOnUnsupportedStableFlag[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[136] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[136] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[136] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseTimeout PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterUserScramCredentialsUnknownMechanism PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[137] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[138] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[138] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[138] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeBrokerConfigs PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingInitProducerId PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnInterruption PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[139] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[140] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[141] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[141] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[141] PASSED

org.apache.kafka.common.network.SelectorTest > testConnectDisconnectDuringInSinglePoll PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testNativeGssapiCredentials PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testCloseBeforeConfigureIsIdempotent PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testPartitionerClose PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[142] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[142] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[142] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[143] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[143] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[143] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[144] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[144] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[144] PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testBlockTimeout PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testLargeAvailableMemory PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetNoTimestampTypeNotAllowed PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooLittleCompressedV2 PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooLittleNonCompressedV2 PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testStreamingIteratorConsistency PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetLogAppendTime PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testDecrementSequence PASSED

org.apache.kafka.clients.producer.RecordSendTest > testBlocking PASSED

org.apache.kafka.common.requests.WriteTxnMarkersRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.requests.WriteTxnMarkersRequestTest > testConstructor PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOperationsBySubscribingConsumerWithDefaultGroupId PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteRecords PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > shouldIgnoreGroupInstanceIdForEmptyGroupId PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[145] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[145] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[145] PASSED

org.apache.kafka.clients.consumer.internals.AbstractCoordinatorTest > testHeartbeatUnknownMemberResponseWithOldGeneration PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[146] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[146] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[146] PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnMatchPatternType PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnAnyPatternType PASSED

org.apache.kafka.common.acl.AclBindingTest > testUnknowns PASSED

org.apache.kafka.common.acl.AclBindingTest > testMatching PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[147] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[147] PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldThrowOnAnyResourceType PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldNotThrowOnUnknownResourceType PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[147] PASSED

org.apache.kafka.common.acl.AclBindingTest > testMatchesAtMostOne PASSED

org.apache.kafka.common.acl.AclBindingTest > shouldNotThrowOnUnknownPatternType PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithEmptyUserAssignment PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testConstructorClose PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSkipKeyValueIteratorCorrectness PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testWriteEmptyHeader PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetLastOffset PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testCloseAfterConfigIsIdempotent PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatchWithSequenceWrapAround PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testFetchStableOffsetThrowInPosition PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordSize PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSetPartitionLeaderEpoch PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatch PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetricConfigRecordingLevel PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnNullTopicInPartition PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testReadAndWriteControlBatch PASSED

org.apache.kafka.common.requests.RequestContextTest > testSerdeUnsupportedApiVersionRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[148] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[148] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[148] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPause PASSED

org.apache.kafka.common.requests.RequestContextTest > testEnvelopeResponseSerde PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooManyNonCompressedV2 PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > buildDefaultRecordBatchWithProducerId PASSED

org.apache.kafka.common.PartitionInfoTest > testToString PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidRecordCountTooManyCompressedV2 PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testSizeInBytes PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[149] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[149] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[149] PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testInvalidCrc PASSED

org.apache.kafka.common.record.DefaultRecordBatchTest > testIncrementSequence PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[150] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[150] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[150] PASSED

org.apache.kafka.common.network.SelectorTest > testConnectException PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[151] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[152] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[153] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[154] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[154] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[154] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testManualAssignmentChangeWithAutoCommitEnabled PASSED

org.apache.kafka.common.utils.UtilsTest > testCloseAllQuietly PASSED

org.apache.kafka.common.utils.UtilsTest > testIntersectionOfOne PASSED

org.apache.kafka.common.utils.UtilsTest > testAbs PASSED

org.apache.kafka.common.utils.UtilsTest > testMin PASSED

org.apache.kafka.common.utils.UtilsTest > testPropsToMap PASSED

org.apache.kafka.common.utils.UtilsTest > testIntersectionOfMany PASSED

org.apache.kafka.common.utils.UtilsTest > testUnion PASSED

org.apache.kafka.common.utils.UtilsTest > toArray PASSED

org.apache.kafka.common.utils.UtilsTest > shouldAcceptValidDateFormats PASSED

org.apache.kafka.common.utils.UtilsTest > utf8ByteBufferSerde PASSED

org.apache.kafka.common.utils.UtilsTest > testDiff PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[155] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[155] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[155] PASSED

org.apache.kafka.common.utils.UtilsTest > testJoin PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testConnectionFailureOnMetadataUpdate PASSED

org.apache.kafka.common.network.SelectorTest > registerFailure PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[156] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[156] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[156] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionChangesWithAutoCommitEnabled PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[157] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[157] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[157] PASSED

org.apache.kafka.common.network.SelectorTest > testMute PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryCommitTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailedInflightBatchAfterEpochBump PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testMultipleAddPartitionsPerForOneProduce PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[158] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testChangingRegexSubscription PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testGroupAuthorizationFailureInFindCoordinator PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollWithNoSubscription PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[158] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[158] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendIdempotentProducerFatalError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInvalidProducerEpochConvertToProducerFencedInInitProducerId PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendAfterAbortableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionAbortableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotAddPartitionsToTransactionWhenTopicAuthorizationFailed PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHealthyPartitionRetriesDuringEpochBump PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDefaultSequenceNumber PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testNoTraversal PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testEmptyPathWithKey PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDisallowCommitOnProduceFailure PASSED

org.apache.kafka.common.network.SelectorTest > testCloseAllChannels PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testLookupCoordinatorOnNotCoordinatorError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testInitializeTransactionsTwiceRaisesError PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testNullPath PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[159] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[160] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[160] PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testEmptyPath PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[160] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[161] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[162] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[163] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[164] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[165] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[166] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[167] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[168] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[169] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[170] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[171] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[172] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[173] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[174] PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testNullPathWithKey PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[174] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[174] PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testNoSubdirs PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfUnknownTopicPartitionErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[175] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[175] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[175] PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testGetSetOfKeysAtPath PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testFetchProgressWithMissingPartitionPosition PASSED

org.apache.kafka.common.config.provider.DirectoryConfigProviderTest > testGetAllKeysAtPath PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[176] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCancelUnsentAddPartitionsAndProduceOnAbort PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNotReadyForSendBeforeBeginTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > resendFailedProduceRequestAfterAbortableError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedForMessageFormatInTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionRetainsRetryBackoffWhenPartitionsAlreadyAdded PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[176] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[176] PASSED

org.apache.kafka.common.network.SelectorTest > testExpireConnectionWithPendingReceives PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[177] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[178] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[179] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[180] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[181] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[182] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[182] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[182] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnEmptyPattern PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[183] PASSED

org.apache.kafka.common.network.SslTransportTls12Tls13Test > testCiphersSuiteForTls12FailsForTls13 SKIPPED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testBeginningOffsetsAuthenticationFailure PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpTransactionalEpochOnRecoverableAddPartitionRequestError PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[183] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[183] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[184] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[185] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[186] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[187] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[188] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[189] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[190] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[191] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[192] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[192] PASSED

org.apache.kafka.common.network.SelectorTest > testCantSendWithInProgress PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[192] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[193] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[194] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[195] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[195] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[195] PASSED

org.apache.kafka.common.utils.SecurityUtilsTest > testParseKafkaPrincipalWithNonUserPrincipalType PASSED

org.apache.kafka.common.utils.SecurityUtilsTest > testPrincipalNameCanContainSeparator PASSED

org.apache.kafka.common.utils.SecurityUtilsTest > testAddCustomSecurityProvider PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testDoNotPollWhenNoRequestSent PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDefaultApiTimeout PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testNoDoubleDeallocation PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testOldestApiVersionsRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[196] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[196] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[196] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testGetSubLevelError PASSED

org.apache.kafka.common.security.authenticator.SaslServerAuthenticatorTest > testLatestApiVersionsRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[197] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[197] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[197] PASSED

org.apache.kafka.common.network.SelectorTest > testOutboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[198] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testQuotaMetrics PASSED

org.apache.kafka.common.network.SelectorTest > testImmediatelyConnectedCleaned PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfUnsentBatchesShouldNotCauseUnresolvedSequences PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[198] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[198] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[199] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[200] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[200] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTransactionalSplitBatchAndSend PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[201] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[202] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[202] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testUnsubscribeShouldTriggerPartitionsRevokedWithValidGeneration PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommittedAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyNoCoordinatorLookupForManualAssignmentWithSeek PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInvalidSocketSendBufferSize PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testClusterAuthorizationExceptionInProduceRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[202] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[203] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[204] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[205] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[206] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[207] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[207] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[207] PASSED

org.apache.kafka.common.network.SelectorTest > testExistingConnectionId PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[208] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[209] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[210] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[211] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[212] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[213] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[214] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[214] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[214] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfDuplicateSequenceError PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testWhenFirstBatchExpireNoSendSecondBatchIfGuaranteeOrder PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotentInitProducerIdWithMaxInFlightOne PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[215] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[216] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[216] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[216] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testAppendInExpiryCallback PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Login2Abort2Login3Commit3Logout3 PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testConsumerJmxPrefix PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetsForTimesAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommitsFetchedDuringAssign PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOsDefaultSocketBufferSizes PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testResetToCommittedOffset PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchDoesNotSplitOnMessageTooLargeError PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > commitDoesNotThrowOnUnsupportedExtensionsCallback PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollTimeMetrics PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Logout1Login2Commit2Logout2 PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testDefaultErrorMessage PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[217] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[217] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[217] PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > login1Commit1Login2Commit2Logout1Login3Commit3Logout2 PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModuleTest > loginAbortLoginCommitLogout PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testBatchesDrainedWithOldProducerIdShouldSucceedOnSubsequentRetry PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflights PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[218] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[218] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[218] PASSED

org.apache.kafka.common.network.SelectorTest > testCloseOldestConnection PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseNoWait PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testEndOffsetsAuthenticationFailure PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[219] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[220] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[221] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[221] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[221] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[222] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[223] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[223] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[223] PASSED

org.apache.kafka.common.network.SelectorTest > testServerDisconnect PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[224] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[225] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[226] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[226] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[226] PASSED

org.apache.kafka.common.record.FileRecordsTest > testAppendProtectsFromOverflow PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[227] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[227] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[227] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[228] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[228] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[228] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsets PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberIdOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[229] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[229] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[229] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnexpectedErrorOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[230] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[230] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[230] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberId[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.network.SelectorTest > testMetricsCleanupOnSelectorClose PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[231] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[231] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[231] PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateNotCalledIfSizeIsBiggerThanTargetSize PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[232] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[232] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[232] PASSED

org.apache.kafka.common.record.FileRecordsTest > testOutOfRangeSlice PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[233] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[233] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[233] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testInvalidTopicNames PASSED

org.apache.kafka.common.record.FileRecordsTest > testFileSize PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[234] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[234] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[234] PASSED

org.apache.kafka.common.record.FileRecordsTest > testIteratorWithLimits PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateMetadataDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPendingMemberShouldLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateNotCalledIfSizeIsSameAsTargetSize PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateTrue PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[235] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[235] PASSED

org.apache.kafka.common.record.FileRecordsTest > testOpenOversizeFile PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[235] PASSED

org.apache.kafka.common.record.FileRecordsTest > testTruncateIfSizeIsDifferentToTargetSize PASSED

org.apache.kafka.common.record.FileRecordsTest > testFormatConversionWithPartialMessage PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[236] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[236] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[236] PASSED

org.apache.kafka.common.record.FileRecordsTest > testIterationDoesntChangePosition PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[237] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[237] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[237] PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateFalse PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCloseWithProducerIdReset PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testShouldRaiseOutOfOrderSequenceExceptionToUserIfLogWasNotTruncated PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSenderMetricsTemplates PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testInitProducerIdRequest PASSED

org.apache.kafka.common.record.FileRecordsTest > testPreallocateClearShutdown PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testForceCloseWithProducerIdReset PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseInterrupt PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollIdleRatio PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[238] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[238] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[238] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testTooLargeBatchesAreSafelyRemoved PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testGetGroupMetadata PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnNullTopicPartition PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfOutOfOrderResponses PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCanRetryWithoutIdempotence PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testRetryWhenProducerIdChanges PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testRetries PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[239] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[240] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[241] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[242] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[243] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[244] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[245] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[246] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[247] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[248] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[249] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[250] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[251] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[252] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[253] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[253] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[253] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[254] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[255] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[255] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[255] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyPollTimesOutDuringMetadataUpdate PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testInflightBatchesExpireOnDeliveryTimeout PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[256] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[256] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[256] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testResetOfProducerStateShouldAllowQueuedBatchesToDrain PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testDownConversionForMismatchedMagicValues PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyDeprecatedPollDoesNotTimeOutDuringMetadataUpdate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[257] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[257] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[257] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMetricsReporterAutoGeneratedClientId PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[258] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[259] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[260] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[261] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[262] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[263] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[264] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[265] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[266] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[267] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[268] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[269] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[270] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[271] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[272] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[273] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[274] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[274] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[274] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSendInOrder PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testClusterAuthorizationExceptionInInitProducerIdRequest PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnsupportedVersionInProduceRequest PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[275] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[276] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[277] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[278] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[278] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[278] PASSED

org.apache.kafka.common.utils.SanitizerTest > testJmxSanitize PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testForceShutdownWithIncompleteTransaction PASSED

org.apache.kafka.common.record.FileRecordsTest > testConversion PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest > validScope PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerScopeUtilsTest > invalidScope PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[279] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[280] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[281] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[282] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[283] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[284] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[285] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[286] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[287] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[288] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[289] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[290] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[291] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[292] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[293] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[294] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[295] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[295] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[295] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnresolvedSequencesAreNotFatal PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[296] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[296] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[296] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCorrectHandlingOfOutOfOrderResponsesWhenSecondSucceeds PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[297] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[297] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[297] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorUnavailableNoCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[298] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[298] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[298] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testResetNextBatchExpiry PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[299] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[300] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[300] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[300] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testCustomErrorMessage PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGenerationOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[301] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[301] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[301] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[302] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[302] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[302] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testUnsupportedForMessageFormatInProduceRequest PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIncompleteTransactionAbortOnShutdown PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[303] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[303] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[303] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSimple PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[304] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testNodeNotReady PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testSequenceNumberIncrement PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[304] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[304] PASSED

org.apache.kafka.common.record.FileRecordsTest > testSliceSizeLimitWithConcurrentWrite PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchesInMultiplePartitions PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testInitProducerIdWithMaxInFlightOne PASSED

org.apache.kafka.common.record.FileRecordsTest > testSearchForTimestamp PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testBumpEpochWhenOutOfOrderSequenceReceived PASSED

org.apache.kafka.common.record.FileRecordsTest > testSearch PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[305] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[306] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[306] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[306] PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testIdempotenceWithMultipleInflightsRetriedInOrder PASSED

org.apache.kafka.clients.producer.internals.SenderTest > testExpiredBatchDoesNotRetry PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[307] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[307] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[307] PASSED

org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest > testForConsumerRequiresVersion3 PASSED

org.apache.kafka.common.requests.OffsetsForLeaderEpochRequestTest > testDefaultReplicaId PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[308] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[309] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[310] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[310] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[310] PASSED

org.apache.kafka.common.UuidTest > testRandomUuid PASSED

org.apache.kafka.common.UuidTest > testUuidEquality PASSED

org.apache.kafka.common.UuidTest > testHashCode PASSED

org.apache.kafka.common.UuidTest > testStringConversion PASSED

org.apache.kafka.common.UuidTest > testSignificantBits PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateInt PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateLong PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateByteBufferWithOffsetPosition PASSED

org.apache.kafka.common.utils.ChecksumsTest > testUpdateByteBuffer PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[311] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[311] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[311] PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testRulesSplitting PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testValidRules PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[312] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[312] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[312] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterConsumerGroupOffsetsRetriableErrors PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testCommaWithWhitespace PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testSslPrincipalMapper PASSED

org.apache.kafka.common.security.ssl.SslPrincipalMapperTest > testInvalidRules PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[313] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[314] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[314] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[314] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreatePartitionsDontRetryThrottlingExceptionWhenDisabled PASSED

org.apache.kafka.common.record.LazyDownConversionRecordsTest > testConversionOfCommitMarker PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[315] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[315] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[315] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeAcls PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[316] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[316] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[316] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadata[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoThrowWhenStableFlagIsSupported[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[317] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[318] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[318] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[318] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[319] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[320] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[320] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[320] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[321] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[321] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[321] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[322] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[323] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[324] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[325] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[326] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[327] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[328] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[329] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[330] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[331] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[332] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[333] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[334] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[335] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[336] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[337] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[338] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[339] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[340] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[341] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[342] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[343] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[344] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[345] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[346] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[347] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[348] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[349] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[350] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[351] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[352] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[353] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[354] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[355] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[356] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[356] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[356] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoWait[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testDisconnectInJoin[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[357] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[357] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[357] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseIsForcedOnPendingFindCoordinator PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[358] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[358] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[358] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGetGroupMetadata[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithPendingTransactions[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[359] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[359] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[359] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[360] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[361] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[362] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[363] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[364] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[365] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[366] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[367] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[368] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[369] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[369] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[369] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRetryCommitUnknownTopicOrPartition[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[370] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[371] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[372] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[373] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[374] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[374] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[374] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[375] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[375] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[375] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[376] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[376] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[376] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithValidation[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[377] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[378] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[378] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[378] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataRefreshDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyOrFailWithPartialFileChannelReads PASSED

org.apache.kafka.common.utils.UtilsTest > toArrayDirectByteBuffer PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayUnderflow PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayExact PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[379] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[379] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[379] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRebalanceInProgress[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[380] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[380] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[380] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseDynamicAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterConsumerGroupOffsetsFindCoordinatorRetriableErrors PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[381] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[381] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[381] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeBrokerAndLogConfigs PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[382] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[382] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[382] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsFindCoordinatorNonRetriableErrors PASSED

org.apache.kafka.common.utils.UtilsTest > shouldThrowOnInvalidDateFormatOrNullTimestamp PASSED

org.apache.kafka.common.utils.UtilsTest > testReadBytes PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[383] PASSED

org.apache.kafka.common.utils.UtilsTest > testGetHost PASSED

org.apache.kafka.common.utils.UtilsTest > testGetPort PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[383] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[383] PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyWithPartialFileChannelReads PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[384] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[384] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[384] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[385] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[385] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[385] PASSED

org.apache.kafka.common.network.SslTransportTls12Tls13Test > testCiphersSuiteForTls12 PASSED

org.apache.kafka.common.utils.UtilsTest > testRecursiveDelete PASSED

org.apache.kafka.common.utils.UtilsTest > testUnionOfMany PASSED

org.apache.kafka.common.utils.UtilsTest > testUnionOfNone PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[386] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[387] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[387] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[387] PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyOrFailWithRealFile PASSED

org.apache.kafka.common.utils.UtilsTest > writeToBuffer PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[388] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[389] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[390] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[390] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[390] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMissingUsernameSaslPlain PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[391] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[392] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[392] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[392] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryAbortTransaction PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSendOffsetWithGroupMetadataFailAsAutoDowngradeTxnCommitNotEnabled PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendIdempotentProducer PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFailIfNotReadyForSendNoOngoingTransaction PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[393] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[394] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[395] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[396] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[396] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[396] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testRequestTimeoutExceedingDefaultApiTimeout PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[397] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[397] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[397] PASSED

org.apache.kafka.common.utils.UtilsTest > testFileAsStringNamedPipe PASSED

org.apache.kafka.common.utils.UtilsTest > testConvertTo32BitField PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[398] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[398] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[398] PASSED

org.apache.kafka.common.utils.UtilsTest > testReadFullyIfEofIsReached PASSED

org.apache.kafka.common.utils.UtilsTest > testHostPattern PASSED

org.apache.kafka.common.utils.UtilsTest > testDisjointIntersectionOfMany PASSED

org.apache.kafka.common.utils.UtilsTest > testFormatBytes PASSED

org.apache.kafka.common.utils.UtilsTest > testMurmur2 PASSED

org.apache.kafka.common.utils.UtilsTest > testIntersection PASSED

org.apache.kafka.common.utils.UtilsTest > utf8ByteArraySerde PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayRemainder PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayInvalid PASSED

org.apache.kafka.common.utils.UtilsTest > testFileAsStringSimpleFile PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayNull PASSED

org.apache.kafka.common.utils.UtilsTest > getNullableSizePrefixedArrayExactEmpty PASSED

org.apache.kafka.common.utils.UtilsTest > testCloseAll PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsPartialResponse PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[399] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[400] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[401] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[402] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[403] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[404] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[405] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[406] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[407] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[408] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[409] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[410] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[411] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[412] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[413] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[414] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[415] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[415] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[415] PASSED

org.apache.kafka.common.utils.UtilsTest > testLoadProps PASSED

org.apache.kafka.common.utils.UtilsTest > testUnionOfOne PASSED

org.apache.kafka.common.utils.UtilsTest > testFormatAddress PASSED

org.apache.kafka.common.security.oauthbearer.internals.expiring.ExpiringCredentialRefreshConfigTest > fromGoodConfig PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[416] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[416] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[416] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsMetadataNonRetriableErrors PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[417] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[418] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[418] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[418] PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testClientChannelBuilderWithBrokerConfigs PASSED

org.apache.kafka.common.network.SaslChannelBuilderTest > testLoginManagerReleasedIfConfigureThrowsException PASSED

org.apache.kafka.common.requests.OffsetFetchRequestTest > testBuildThrowForUnsupportedRequireStable PASSED

org.apache.kafka.common.requests.OffsetFetchRequestTest > testConstructorFailForUnsupportedRequireStable PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[419] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[420] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[421] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[422] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[423] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[424] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[425] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[426] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[427] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[428] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[429] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[430] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[431] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[432] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[433] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[434] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[435] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[436] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[437] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[438] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[439] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[440] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[441] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[442] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[443] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[444] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[445] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[446] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[447] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[448] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[449] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[450] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[451] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[452] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[453] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[454] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[455] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[455] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[455] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsHandleNotControllerException PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testEqualsOfClientQuotaFilterComponent PASSED

org.apache.kafka.common.requests.OffsetFetchRequestTest > testConstructor PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitFrequency PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAbortUnsentBatches PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchSingleMaxValue PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[456] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[456] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[456] PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testStickyBatches PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[457] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[457] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[457] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterReplicaLogDirsPartialFailure PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testPrettyPrintException PASSED

org.apache.kafka.common.metrics.SensorTest > testIdempotentAdd PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[458] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[459] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[459] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[459] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeMultipleConsumerGroups PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[460] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[461] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[462] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[462] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[462] PASSED

org.apache.kafka.common.metrics.SensorTest > testUpdatingMetricConfigIsReflectedInTheSensor PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[463] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[464] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[465] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[466] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[466] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[466] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[467] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[467] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[467] PASSED

org.apache.kafka.common.network.SslSelectorTest > testBytesBufferedChannelAfterMute PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[468] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[469] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[470] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[471] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[472] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[473] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[473] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[473] PASSED

org.apache.kafka.common.network.SslTransportTls12Tls13Test > testCiphersSuiteForTls13 SKIPPED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[474] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[474] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[474] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.common.metrics.SensorTest > testExpiredSensor PASSED

org.apache.kafka.common.metrics.SensorTest > testStrictQuotaEnforcementWithTokenBucket PASSED

org.apache.kafka.common.metrics.SensorTest > testShouldRecordForTraceLevelSensor PASSED

org.apache.kafka.common.metrics.SensorTest > testShouldRecordForDebugLevelSensor PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterPartitionReassignments PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[475] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[475] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[475] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroupsWithAuthorizedOperationsOmitted PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeLogDirsPartialFailure PASSED

org.apache.kafka.common.metrics.SensorTest > testCheckQuotasInMultiThreads PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreatePartitionsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut PASSED

org.apache.kafka.common.metrics.SensorTest > testRecordAndCheckQuotaUseMetricConfigOfEachStat PASSED

org.apache.kafka.common.metrics.SensorTest > testShouldRecordForInfoLevelSensor PASSED

org.apache.kafka.common.metrics.SensorTest > testStrictQuotaEnforcementWithRate PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[476] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[476] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[476] PASSED

org.apache.kafka.common.metrics.SensorTest > shouldReturnPresenceOfMetrics PASSED

org.apache.kafka.common.metrics.SensorTest > testRecordLevelEnum PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validClientFirstMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidClientFinalMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validServerFirstMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidServerFinalMessage PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[477] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[477] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[477] PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidClientFirstMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validClientFinalMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > invalidServerFirstMessage PASSED

org.apache.kafka.common.security.scram.internals.ScramMessagesTest > validServerFinalMessage PASSED

org.apache.kafka.common.record.CompressionRatioEstimatorTest > testUpdateEstimation PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[478] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testChecksum[479] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testEquality[479] PASSED

org.apache.kafka.common.record.LegacyRecordTest > testFields[479] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInvalidGroupMetadata PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testManualAssignmentChangeWithAutoCommitDisabled PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOffsetOfPausedPartitions PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterUserScramCredentials PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionChangesWithAutoCommitDisabled PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSeekNegative PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollAuthenticationFailure PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeFeaturesSuccess PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > configurableObjectsShouldSeeGeneratedClientId PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnEmptyTopicInPartition PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityOnMetricsException PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCantAllocateMoreMemoryThanWeHave PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testRebalanceException PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testMissingOffsetNoResetPolicy PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInvalidSocketReceiveBufferSize PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testClosingConsumerUnregistersConsumerMetrics PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnInvalidTopic PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCleanupMemoryAvailabilityWaiterOnBlockTimeout PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testSimple PASSED

org.apache.kafka.common.network.SslTransportTls12Tls13Test > testCiphersSuiteFailForServerTls12ClientTls13 SKIPPED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testDelayedAllocation PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testCloseNotifyWaiters PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > outOfMemoryOnAllocation PASSED

org.apache.kafka.clients.producer.internals.BufferPoolTest > testBufferExhaustedExceptionIsThrown PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testIdempotenceWithOldMagic PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeOldMessageFormatNonCompressed PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAbortIncompleteBatches PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeCompressed PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testMutedPartitions PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatches PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testExpiredBatchesRetry PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testAppendLargeOldMessageFormatCompressed PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testLinger PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testPartialDrain PASSED

org.apache.kafka.clients.producer.internals.RecordAccumulatorTest > testSplitAndReenqueue PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testHeadersWithExtendedClasses PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalHeartbeat[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffset[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetsGroupNotAuthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAutoCommitSentBeforePositionUpdate PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignmentRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupFollower[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > fetchResponseWithUnexpectedPartitionIsIgnored PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testCloseWhenWaitingForMetadataUpdate PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPollThrowsInterruptExceptionIfInterrupted PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullPattern PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testEnforceRebalanceTriggersRebalanceOnNextPoll PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testEnforceRebalanceWithManualAssignment PASSED

org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest > testErrorResponse PASSED

org.apache.kafka.common.requests.AlterReplicaLogDirsRequestTest > testPartitionDir PASSED

org.apache.kafka.common.cache.LRUCacheTest > testEviction PASSED

org.apache.kafka.common.cache.LRUCacheTest > testPutGet PASSED

org.apache.kafka.common.cache.LRUCacheTest > testRemove PASSED

org.apache.kafka.common.utils.CircularIteratorTest > testCycleCollection PASSED

org.apache.kafka.common.utils.CircularIteratorTest > testEmptyCollection PASSED

org.apache.kafka.common.utils.CircularIteratorTest > testNullCollection PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherConcurrency PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationResetOffsetForUndefinedOffsetWithUndefinedResetPolicy PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchedRecordsRaisesOnSerializationErrors PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetNoUpdateMissingEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionNoOpWithPositionSet PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSkipValidationForOlderApiVersion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testAssignmentChangeWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testQuotaMetrics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSeekWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchMaxPollRecords PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemTrustStoreConfigWithOneCert PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPreferredReadReplicaOffsetError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testParseInvalidRecordBatch PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testTopicExpiryInMetadata PASSED

org.apache.kafka.common.requests.UpdateFeaturesRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.KafkaFutureTest > testCompletingFutures PASSED

org.apache.kafka.common.KafkaFutureTest > testThenApply PASSED

org.apache.kafka.common.KafkaFutureTest > testCompleteFutures PASSED

org.apache.kafka.common.KafkaFutureTest > testAllOfFuturesHandlesZeroFutures PASSED

org.apache.kafka.common.KafkaFutureTest > testFutureTimeoutWithZeroWait PASSED

org.apache.kafka.common.KafkaFutureTest > testAllOfFutures PASSED

org.apache.kafka.common.utils.AbstractIteratorTest > testEmptyIterator PASSED

org.apache.kafka.common.utils.AbstractIteratorTest > testIterator PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.common.security.plain.internals.PlainSaslServerTest > emptyTokens PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryAbortTransactionAfterCommitTimeout PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInTxnOffsetCommit PASSED

org.apache.kafka.common.record.MultiRecordsSendTest > testSendsFreedAfterWriting PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedInitTransactions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionSuccessfulCommit PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testParse PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testShouldThrottle PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testEqualityWithMemberResponses PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testEqualityWithSerialization PASSED

org.apache.kafka.common.requests.LeaveGroupResponseTest > testConstructorWithMemberResponses PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherSessionEpochUpdate PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataWithPartitionOutOfRange PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSeekBeforeException PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionDisconnect PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testConsumingViaIncrementalFetchRequests PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForPausedAndResumedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataOfflinePartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsPartialResponse PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataInvalidTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToDefaultOffset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationResetOffsetForUndefinedEpochWithUndefinedResetPolicy PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSkippingAbortedTransactions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBeginningOffsetsMultipleTopicPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEpochSetInFetchRequest PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEndOffsetsMultipleTopicPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNonContinuousRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchRequestInternalError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedWithCompactedTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetSendsReadUncommitted PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesWhenSomeTopicPartitionLeadersNotKnownInitially PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNormal PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsTimeout PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedAbortMarkerWithNoData PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUnauthorizedTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsUnauthorized PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBeginningOffsetsDuplicateTopicPartition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEndOffsetsDuplicateTopicPartition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForSomePausedPartitions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchPositionAfterException PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationFencing PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEndOffsetsEmpty PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsIncludesLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationAwaitsNodeApiVersion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchFencedLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchNotLeaderOrFollower PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchedRecordsAfterSeek PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOffsetOutOfRangeException PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationRequestGrouping PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDuringCooperativeRebalance PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testFrequencyCenterValueAboveMax PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsWithOnePartitionAtTheWrongOffset PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testFrequencyCenterValueBelowMin PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBatchedListOffsetsMetadataErrors PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnPausedPartition PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testUseWithMetrics PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testMoreFrequencyParametersThanBuckets PASSED

org.apache.kafka.common.metrics.stats.FrequenciesTest > testBooleanFrequencies PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWildcardIfExactMatch PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentName PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWhereResourceTypeIsAny PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchWhereResourceNameIsAny PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentResourceType PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchWildcardAgainstOtherName PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldMatchIfExactMatch PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchIfDifferentNameCase PASSED

org.apache.kafka.common.resource.ResourceFilterTest > shouldNotMatchLiteralWildcardTheWayAround PASSED

org.apache.kafka.common.record.ControlRecordTypeTest > testParseUnknownType PASSED

org.apache.kafka.common.record.ControlRecordTypeTest > testParseUnknownVersion PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testParseCorruptedRecord PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testHeaders PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testTopicRefreshInMetadata PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testNullGroupMetadataInSendOffsets PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testNoSerializerProvided PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimes PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testLeaderEpochInConsumerRecord PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testInvalidDefaultRecordBatch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetrics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDuringEagerRebalance PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopics PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchResponseMetricsWithOnePartitionError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionResetToEarliestOffset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testMissingLeaderEpochInRecords PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsWithoutAValidPosition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testStaleOutOfRangeError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testChangeResetWithInFlightReset PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSendTxnOffsetsWithGroupMetadata PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedWithCommittedAndAbortedTransactions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testInFlightFetchOnPausedPartition PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testResetOffsetsSkipsBlackedOutConnections PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslScram[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testTrailingNewLines PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.network.SslSelectorTest > testBytesBufferedChannelWithNoIncomingBytes PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testListenerConfigOverride[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testConsumerRejoinAfterRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataTopicsDuringSubscriptionChange[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testClientConnectionClose[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetrics[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOutdatedCoordinatorAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupDuringJoin[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupFollower[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupReadUnauthorized[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIncludeInternalTopicsConfigOption[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnsubscribeWithInvalidGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceInProgressOnSyncGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberId[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testCarriageReturnLineFeed PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemKeyStoreFileNoKeyPassword PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslScramMechanisms PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testTimeoutWithoutMetadata PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeLogDirsOfflineDirDeprecated PASSED

org.apache.kafka.common.network.SslSelectorTest > testRenegotiationFails PASSED

org.apache.kafka.common.network.SelectorTest > testPartialSendAndReceiveReflectedInMetrics PASSED

org.apache.kafka.common.network.SelectorTest > testWriteCompletesSendWithNoBytesWritten PASSED

org.apache.kafka.common.network.SelectorTest > testIdleExpiryWithoutReadyKeys PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInitTransactionTimeout PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInvalidSocketSendBufferSize PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testShouldAttemptToRejoinGroupAfterSyncGroupFailed PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCommitSyncAuthenticationFailure PASSED

org.apache.kafka.common.network.SelectorTest > testConnectionsByClientMetric PASSED

org.apache.kafka.common.network.SelectorTest > testInboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.network.SelectorTest > testNoRouteToHost PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemKeyStoreConfigNoPassword PASSED

org.apache.kafka.common.network.SelectorTest > testClearCompletedSendsAndReceives PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsFindCoordinatorRetriableErrors PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testDisabledSaslMechanism[failedAuthenticationDelayMs=0] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopicsDontRetryThrottlingExceptionWhenDisabled PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupOffsetsNumRetries PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteRecordsTopicAuthorizationError PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterClientQuotas PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupsWithStates PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConfigsUnrequested PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsRetriableErrors PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesDuringSuccess PASSED

org.apache.kafka.common.network.SelectorTest > testPartialReceiveGracefulClose PASSED

org.apache.kafka.common.network.SslVersionsTransportLayerTest > testTlsDefaults[tlsServerProtocol=[TLSv1.2],tlsClientProtocol=[TLSv1.2]] PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldThrowIfUnknown PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripPrefixedV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripAnyV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldThrowOnV0IfPrefixed PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripLiteralV0 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripLiteralV1 PASSED

org.apache.kafka.common.requests.DescribeAclsRequestTest > shouldRoundTripAnyV0AsLiteral PASSED

org.apache.kafka.common.metrics.stats.MeterTest > testMeter PASSED

org.apache.kafka.common.utils.TimerTest > testTimerUpdateAndReset PASSED

org.apache.kafka.common.utils.TimerTest > testTimerResetDeadlineUsesCurrentTime PASSED

org.apache.kafka.common.utils.TimerTest > testTimerUpdate PASSED

org.apache.kafka.common.utils.TimerTest > testTimerSleep PASSED

org.apache.kafka.common.utils.TimerTest > testTimerResetUsesCurrentTime PASSED

org.apache.kafka.common.utils.TimerTest > testTimeoutOverflow PASSED

org.apache.kafka.common.utils.TimerTest > testNonMonotonicUpdate PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > shouldCloseProperlyAndThrowIfInterrupted PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testTransactionalMethodThrowsWhenSenderClosed PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testOsDefaultSocketBufferSizes PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInterceptorConstructClose PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testPartitionsForWithNullTopic PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemKeyStoreConfigWithKeyPassword PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemTrustStoreFile PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemTrustStoreConfigWithMultipleCerts PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInterceptorPartitionSetOnTooLargeRecord PASSED

org.apache.kafka.common.network.SelectorTest > testNormalOperation PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.network.SelectorTest > testSendWithoutConnecting PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[0 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetricsReporterAutoGeneratedClientId PASSED

org.apache.kafka.common.network.SelectorTest > testMuteOnOOM PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsMetadataRetriableErrors PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataFetch PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupsMetadataFailure PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeUserScramCredentials PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testOnlyCanExecuteCloseAfterInitTransactionsTimeout PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesUpdateFailedError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[1 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[2 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[3 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[4 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[5 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[6 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[7 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[8 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testRemoveMembersFromGroupNumRetries PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeLogDirs PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[9 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[10 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[11 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[12 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupsNumRetries PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[13 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterReplicaLogDirsSuccess PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterReplicaLogDirsPartialResponse PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[14 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRetryCommitTransactionAfterAbortTimeout PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIsSendToPartitionAllowedWithAddedPartitionAfterFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.network.SelectorTest > testCloseOldestConnectionWithMultiplePendingReceives PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfInvalidProducerEpochErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[15 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=0, name='empty'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCloseAdminClientInCallback PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForLeaveGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[16 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsRetryThrottlingExceptionWhenEnabled PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnknownMemberIdInTxnOffsetCommitByGroupMetadata PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.network.SelectorTest > testExpireClosedConnectionWithPendingReceives PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[17 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSequenceNumberOverflow PASSED

org.apache.kafka.common.network.SelectorTest > testConnectionRefused PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfUnknownTopicPartitionErrorOnAddPartitions PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[18 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[19 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnsubscribeWithValidGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[20 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFlushPendingPartitionsOnCommit PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[21 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[22 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testUnsupportedFindCoordinator PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[23 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[24 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[25 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEarlierOffsetResetArrivesLate PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadataTooLarge[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[26 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testRestOffsetsAuthorizationFailure PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[27 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNoDrainWhenPartitionsPending PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[28 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherMetricsTemplates PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[29 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReturnCommittedTransactions PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesTimeout PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[30 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[31 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1, name='onebyte'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[32 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesWithUnknownOffsetV0 PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupFromAssignmentCallback[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testReadCommittedLagMetric PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncDisconnected[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBeginningOffsets PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testFlushCompleteSendOfInflightBatches PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[33 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[34 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpTransactionalEpochOnTimeout PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testLeaveGroupOnClose[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationSkippedForOldBroker PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchDisconnected PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[35 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetAllTopicsDisconnect PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[36 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[37 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[38 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationResetOffsetForUndefinedOffsetWithDefinedResetPolicy PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testSenderShutdownWithPendingTransactions PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > configurableObjectsShouldSeeGeneratedClientId PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchSkipsBlackedOutNodes PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[39 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationResetOffsetForUndefinedEpochWithDefinedResetPolicy PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerFencedExceptionInInitProducerId PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > shouldNotSendAbortTxnRequestWhenOnlyAddOffsetsRequestFailed PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationHandlesSeekWithInflightOffsetForLeaderRequest PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[40 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testListOffsetSendsReadCommitted PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[41 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPartialFetchWithPausedPartitions PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorTransactionNotStarted PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorWithSerializers PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[42 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFencedInstanceIdInTxnOffsetCommitByGroupMetadata PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchAfterPartitionWithFetchedRecordsIsUnassigned PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[43 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAddPartitionToTransactionRetainsRetryBackoffForRegularRetriableError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataLeaderNotAvailable PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchRequestWhenRecordTooLarge PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchUnknownLeaderEpoch PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpTransactionalEpochOnUnknownProducerIdError PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testEmptyControlBatch PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[44 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNoProducerIdResetAfterLastInFlightBatchSucceeds PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataExpiry PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRejoinGroup[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[45 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignment[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testOffsetValidationTriggerLogTruncationForBadOffsetWithUndefinedResetPolicy PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetOffsetsForTimesWhenSomeTopicPartitionLeadersDisconnectException PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCommitTransactionWithInFlightProduceRequest PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testIdempotentResetWithInFlightReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testGetTopicMetadataUnknownTopic PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testPreferredReadReplica PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testCorruptMessageError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[46 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[47 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchCompletedBeforeHandlerAdded PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testBeginningOffsetsEmpty PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[48 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testSubscriptionPositionUpdatedWithEpoch PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetchOnCompletedFetchesForAllPausedPartitions PASSED

org.apache.kafka.common.network.SelectorTest > testChannelCloseWhileProcessingReceives PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testRecoveryFromAbortableErrorProduceRequestInRetry PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testGroupAuthorizationFailureInTxnOffsetCommit PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpEpochAfterTimeoutWithoutPendingInflightRequests PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortableErrorWhileAbortInProgress PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testUpdateFetchPositionOfPausedPartitionsRequiringOffsetReset PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[49 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testTruncationDetected PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[50 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBasicTransaction PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfTransactionalIdAuthorizationFailedErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerFencedInAddOffSetsToTxn PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[51 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testProducerIdReset PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherIgnoresControlRecords PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testCommitWithTopicAuthorizationFailureInAddPartitionsInFlight PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortResendsProduceRequestIfRetried PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[52 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionSuccessfulAbort PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testIllegalGenerationInTxnOffsetCommitByGroupMetadata PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherMetrics PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNotReadyForSendAfterFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[53 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.consumer.internals.FetcherTest > testFetcherLeadMetric PASSED

org.apache.kafka.common.network.SelectorTest > testEmptyRequest PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testFindCoordinatorAllowedInAbortableErrorState PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testHeaders PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testTransactionalIdAuthorizationFailureInAddPartitions PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInvalidSocketReceiveBufferSize PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHandlingOfUnsupportedForMessageFormatErrorOnTxnOffsetCommit PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[54 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[55 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testBumpTransactionalEpochOnAbortableError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testNotReadyForSendAfterAbortableError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[56 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testDisconnectAndRetry PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testHasOngoingTransactionFatalError PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[57 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnZeroBytes PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.serialization.SerializationTest > testSerializeVoid PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[58 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testAbortTransaction PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.serialization.SerializationTest > testSerdeFromUnknown PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorWithNotStringKey PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testAbortTransactionAndReuseSequenceNumberOnError PASSED

org.apache.kafka.clients.producer.internals.TransactionManagerTest > testEndTxnNotSentIfIncompleteBatches PASSED

org.apache.kafka.common.requests.AddPartitionsToTxnRequestTest > testConstructor PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[59 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[60 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldRecognizeInvalidCharactersInGroupInstanceIds PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.internals.TopicTest > shouldThrowOnInvalidTopicNames PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.internals.TopicTest > shouldAcceptValidTopicNames PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.internals.TopicTest > testTopicHasCollision PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.internals.TopicTest > testTopicHasCollisionChars PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[61 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testUnusedConfigs PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.internals.TopicTest > shouldRecognizeInvalidCharactersInTopicNames PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.serialization.SerializationTest > allSerdesShouldRoundtripInput PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[62 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnTooManyBytes PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[63 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=1000, name='ones'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSerializerClose PASSED

org.apache.kafka.common.serialization.SerializationTest > allSerdesShouldSupportNull PASSED

org.apache.kafka.common.serialization.SerializationTest > voidDeserializerShouldThrowOnNotNullValues PASSED

org.apache.kafka.common.serialization.SerializationTest > floatSerdeShouldPreserveNaNValues PASSED

org.apache.kafka.common.serialization.SerializationTest > testSerdeFromNotNull PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testInitTransactionWhileThrottled PASSED

org.apache.kafka.common.utils.ByteBufferUnmapperTest > testUnmap PASSED

org.apache.kafka.common.serialization.SerializationTest > stringSerdeShouldSupportDifferentEncodings PASSED

org.apache.kafka.common.serialization.SerializationTest > testDeserializeVoid PASSED

org.apache.kafka.common.serialization.SerializationTest > floatDeserializerShouldThrowSerializationExceptionOnTooFewBytes PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[64 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[65 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataTimeoutWithPartitionOutOfRange PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[66 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrRequestTest > testUnsupportedVersion PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[67 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testMetadataTimeoutWithMissingTopic PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[68 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testOverwriteAcksAndRetriesForIdempotentProducers PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrRequestTest > testTopicPartitionGroupingSizeReduction PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrRequestTest > testGetErrorResponse PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[69 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSendTxnOffsetsWithGroupMetadataDowngrade PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.LeaderAndIsrRequestTest > testVersionLogic PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[70 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testProducerJmxPrefix PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testConstructorFailureCloseResource PASSED

org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest > testOutOfOrderTags PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[71 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest > testWritingZeroRawTaggedFields PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[72 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest > testInvalidNextDefinedTag PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[73 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.protocol.types.RawTaggedFieldWriterTest > testWritingSeveralRawTaggedFields PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testPemKeyStoreFileWithKeyPassword PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[74 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.utils.LoggingSignalHandlerTest > testRegister PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupLeader[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > closeWithNegativeTimestampShouldThrow PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[75 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[76 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAfterCoordinatorBackToService[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[77 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSendTxnOffsetsWithGroupId PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testJoinGroupInvalidGroupId[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[78 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGeneration[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorNotAvailable[rebalance protocol = EAGER] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.clients.producer.KafkaProducerTest > testSendToInvalidTopic PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.requests.ByteBufferChannelTest > testWriteBufferArrayWithNonZeroPosition PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[79 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[80 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ByteBufferChannelTest > testWriteMultiplesByteBuffers PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[81 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.requests.ByteBufferChannelTest > testInvalidArgumentsInWritsMultiplesByteBuffers PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[82 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[83 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testNoReplacement PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[84 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariable PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceMultipleVariablesWithoutPathInValue PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariableWithTTL PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testNullConfigValue PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testSingleLevelOfIndirection PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceMultipleVariablesInValue PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.config.ConfigTransformerTest > testReplaceVariableNoPath PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[85 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.utils.BytesTest > testIncrementWithSubmap PASSED

org.apache.kafka.common.utils.BytesTest > testIncrement PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.utils.BytesTest > testIncrementUpperBoundary PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[86 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest > testError PASSED

org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallbackTest > testToken PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[87 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[88 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[89 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[90 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[91 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[92 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[93 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[94 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[95 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=65536, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[96 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[97 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[98 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[99 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[100 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[101 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[102 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[103 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[104 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[105 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[106 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[107 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[108 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[109 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[110 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.network.SslSelectorTest > testDisconnectWithIntermediateBufferedBytes PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[111 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='random'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[112 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[113 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[114 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[115 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDefaultApiTimeoutOverride PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testHasCoordinatorMoved PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[116 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeLogDirsOfflineDir PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[117 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeFeaturesFailure PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[118 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[119 useBrokenFlagDescriptorChecksum=false, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[120 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[121 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[122 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[123 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=false, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[124 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[125 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=false, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[126 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=false, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testHeaderPrematureEnd[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadBlockSize[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testSkip[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testCompression[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testDirectBuffer[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testArrayBackedBufferSlice[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testNotSupported[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.record.KafkaLZ4Test > testBadFrameChecksum[127 useBrokenFlagDescriptorChecksum=true, ignoreFlagDescriptorChecksum=true, blockChecksum=true, close=true, payload=Payload{size=98304, name='ones'}] PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > blankPrincipalName PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > validCompactSerialization PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > missingPrincipal PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerUnsecuredJwsTest > validClaims PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownNoCommits[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNotCoordinator[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAwaitsInterval[rebalance protocol = EAGER] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSubscriptionChangeWithAuthorizationFailure[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetUnknownTopicOrPartition[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testInvalidSessionTimeout[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testFetchCommittedOffsets[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testExcludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPartitionAwaitingReset[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnect[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitAfterLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupDescribeUnauthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnPartitionsAssignExceptionThrownWhenNoPreviousThrownCallbacks[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListPartitionReassignments PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationCN[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsWithLeaderChange PASSED

org.apache.kafka.common.security.ssl.DefaultSslEngineFactoryTest > testLeadingNewLines PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > testRebalanceTimeoutDefaultsToSessionTimeoutV0 PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldAcceptValidGroupInstanceIds PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.requests.JoinGroupRequestTest > shouldThrowOnInvalidGroupInstanceIds PASSED

org.apache.kafka.common.metrics.internals.MetricsUtilsTest > testCreatingTags PASSED

org.apache.kafka.common.metrics.internals.MetricsUtilsTest > testCreatingTagsWithOddNumberOfTags PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetCreateTimeNotAllowedV0 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetNoTimestampTypeNotAllowed PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testInvalidWrapperOffsetV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLogAppendTimeV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetPartitionLeaderEpochNotAllowedV0 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetPartitionLeaderEpochNotAllowedV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetCreateTimeV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLastOffsetCompressed PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testZStdCompressionTypeWithV0OrV1 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testSetLogAppendTimeNotAllowedV0 PASSED

org.apache.kafka.common.record.AbstractLegacyRecordBatchTest > testIterateCompressedRecordWithWrapperOffsetZero PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testRemoveMembersFromGroupRetryBackoff PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > missingFields PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > stringConversion PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > generateCredential PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > extraneousFields PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > scramCredentialCache PASSED

org.apache.kafka.common.security.scram.internals.ScramCredentialUtilsTest > invalidCredential PASSED

org.apache.kafka.common.record.BufferSupplierTest > testGrowableBuffer PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyHeartbeatSent PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslOauthBearerMechanism PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThreadSafeAssignedPartitionsMetric[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetLoadInProgress[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetOnly[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAuthenticationFailureInEnsureActiveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitRetryBackoff[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testSelectRebalanceProtcol[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroups PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopics PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestInClientWhenDowngradeFlagIsNotSetDuringDeletion PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsWithMultiplePartitionsLeaderChange PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidApiVersionsRequest PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsNumRetries PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupOffsetsRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterConsumerGroupOffsetsNonRetriableErrors PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestForEmptyUpdates PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testKeyStoreTrustStoreValidation[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesPartialSuccess PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeCluster PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterConsumerGroupOffsetsFindCoordinatorNonRetriableErrors PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateAcls PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCloseAdminClient PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDefaultApiTimeoutAndRequestTimeoutConflicts PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testPropagatedMetadataFetchException PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreatePartitions PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAdminClientApisAuthenticationFailure PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectionWithCustomKeyManager PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentWithRandomSubscriptionsAndChanges PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testNewSubscription PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testAddRemoveTopicTwoConsumers PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testMoveExistingAssignments PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testMultipleConsumersMixedTopicSubscriptions PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testPoorRoundRobinAssignmentScenario PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentAfterOneConsumerLeaves PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroups PASSED

org.apache.kafka.common.network.SslSelectorTest > testGracefulClose PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfigurationWithoutTruststore[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > verifyHeartbeatSentWhenFetchedDataReady PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testResetUsingAutoResetPolicy PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testNoCommittedOffsets PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testOperationsByAssigningConsumerWithDefaultGroupId PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testAssignOnEmptyTopicPartition PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testFetchStableOffsetThrowInCommitted PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownWithCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMaybeLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithoutPasswordConfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testUnsubscribeShouldTriggerPartitionsLostWithNoGeneration PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testUnusedConfigs PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullTopic PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscription PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testInterceptorConstructorClose PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnEmptyTopic PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testWakeupWithFetchDataAvailable PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testReturnRecordsDuringRebalance PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.network.SslSelectorTest > testSendLargeRequest PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testLeaveGroupTimeout PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testFetchStableOffsetThrowInPoll PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testPartitionsForAuthenticationFailure PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testSubscriptionOnNullTopicCollection PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroups PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeLogDirsDeprecated PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreatePartitionsRetryThrottlingExceptionWhenEnabled PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testReconfigurationWithoutKeystore[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testMetadataRetries PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCreateTopicsRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeConsumerGroupRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteAcls PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterConsumerGroupOffsets PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testHeartbeatThreadClose[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterTopicUnavailableWithSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataChangeTriggersRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceWithMetadataChange[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupLeader[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testThrowOnUnsupportedStableFlag[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testReassignmentWithRandomSubscriptionsAndChanges PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testNewSubscription PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testAddRemoveTopicTwoConsumers PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testMoveExistingAssignments PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testMultipleConsumersMixedTopicSubscriptions PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testOneConsumerOneTopic PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testPoorRoundRobinAssignmentScenario PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testReassignmentAfterOneConsumerLeaves PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testElectLeaders PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteRecordsMultipleSends PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesShouldFailRequestForInvalidFeatureName PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupsRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testAlterReplicaLogDirsLogDirNotFound PASSED

org.apache.kafka.clients.consumer.KafkaConsumerTest > testCloseWithTimeUnit PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDescribeClientQuotas PASSED

org.apache.kafka.common.ClusterTest > testReturnUnmodifiableCollections PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopicsRetryThrottlingExceptionWhenEnabled PASSED

org.apache.kafka.common.ClusterTest > testBootstrap PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslPlain[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.common.requests.TxnOffsetCommitRequestTest > testDisableGroupMetadataAutoDowngrade PASSED

org.apache.kafka.common.requests.TxnOffsetCommitRequestTest > testEnableGroupMetadataAutoDowngrade PASSED

org.apache.kafka.common.requests.TxnOffsetCommitRequestTest > testConstructor PASSED

org.apache.kafka.common.requests.TxnOffsetCommitRequestTest > testGetErrorResponseTopics PASSED

org.apache.kafka.common.requests.TxnOffsetCommitRequestTest > testVersionSupportForGroupInstanceId PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testCompareRawTaggedFields PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testDeepToString PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testByteBufferToArray PASSED

org.apache.kafka.common.protocol.MessageUtilTest > testDuplicate PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > staleSslEngineFactoryShouldBeClosed[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testSetViewModification PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testSetViewGet PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testInsertingTheSameObjectMultipleTimes PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorCreation PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEnlargement PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorTraversal PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListViewGet PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testFindContainsRemoveOnEmptyCollection PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testRemovals PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListViewModification PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testNullForbidden PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testSameKeysDifferentValues PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEmptyListIterator PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testEquals PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testInsertDelete PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testListIteratorRemove PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testMoveToEnd PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testTraversal PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testCollisions PASSED

org.apache.kafka.common.utils.ImplicitLinkedHashCollectionTest > testManyInsertsAndDeletes PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerLoginOverride PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=1, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=NONE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsRetriableErrors PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testShouldRefreshCoordinator PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=NONE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsNonRetriableErrors PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=NONE] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=GZIP] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListConsumerGroupsWithStatesOlderBrokerVersion PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testGenerateClientId PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=GZIP] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesTopLevelError PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=GZIP] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testSuccessfulRetryAfterRequestTimeout PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=GZIP] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=SNAPPY] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=LZ4] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithMaxedParams[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testSimpleBatchIteration[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationV2[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationWithMultipleRecordsPerBatch[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testBatchIterationIncompleteBatch[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testWriteTo[magic=2, compression=ZSTD] PASSED

org.apache.kafka.common.record.FileLogInputStreamTest > testNextBatchSelectionWithZeroedParams[magic=2, compression=ZSTD] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUpdateFeaturesHandleNotControllerException PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testServerSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberIdOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnexpectedErrorOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnknownMemberId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithResetGenearion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateMetadataDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPendingMemberShouldLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testOffsetCommitRetryBackoff PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopicsRetryThrottlingExceptionWhenEnabledUntilRequestTimeOut PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteTopicsPartialResponse PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorUnavailableNoCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRevokeExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGenerationOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnAssignmentExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncWithoutFutureGetsCompleted[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testAuthenticateCallbackHandlerMechanisms PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUpdateLastHeartbeatPollWhenCoordinatorUnknown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCallbackWithNonRetriableException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadata[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoThrowWhenStableFlagIsSupported[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoWait[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testDisconnectInJoin[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNoCoordinatorDiscoveryIfPositionsKnown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGetGroupMetadata[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithPendingTransactions[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorDisconnected[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRetryCommitUnknownTopicOrPartition[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncFailedWithDefaultCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testTopicAuthorizationFailedInOffsetFetch[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithValidation[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataRefreshDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRebalanceInProgress[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseDynamicAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testRemoveMembersFromGroup PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testListOffsetsPartialResponse PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testCalcTimeoutMsRemainingAsInt PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testPemReconfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testUnreachableBootstrapServer PASSED

org.apache.kafka.clients.admin.KafkaAdminClientTest > testDeleteConsumerGroupOffsetsNonRetriableErrors PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testRequestUpdateForTopic PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataAwaitAfterClose PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testTopicExpiry PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMechanismPluggability PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testUntrustedKeyStoreValidationFails[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithIncorrectProviderClassConfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseMaxWaitCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIllegalGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnRevokeExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalHeartbeat[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffset[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetsGroupNotAuthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestSyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignmentRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupFollower[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetSyncCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetWithNoFetchableOffsets[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithNewGenearion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testCertificateEntriesValidation[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testInvalidSslEngineFactory[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithCustomKeyManagerConfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testClientMode[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientEndpointNotValidated[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testScramUsernameWithSpecialCharacters PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryConfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testClientSpecifiedSslEngineFactoryUsed[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedCiphers[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testConvertListOffsetResponseToSaslHandshakeResponse PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testUsedConfigs[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testEngineFactoryClosed[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMissingPasswordSaslPlain PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseTimeoutCoordinatorUnavailableForCommit[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testConsumerRejoinAfterRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithNewGenearion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetadataTopicsDuringSubscriptionChange[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testMetrics[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOutdatedCoordinatorAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncWithDefaultCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignmentCoordinatorUnknown[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterNotCoordinatorError[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupDuringJoin[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberWithResetGenearion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testPatternJoinGroupFollower[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testGroupReadUnauthorized[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnAssignmentExceptionThrownFirstNonBlockingSubCallbacks[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testIncludeInternalTopicsConfigOption[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnsubscribeWithInvalidGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceInProgressOnSyncGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetUnknownMemberId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testInvalidPasswordSaslScram[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testPemKeystoreVerifiableUsingTruststore[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientAuthenticateCallbackHandler PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testSameSubscriptions PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testReassignmentAfterOneConsumerAdded PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testPemCertificateEntriesValidation[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.security.ssl.SslFactoryTest > testSslFactoryWithoutProviderClassConfiguration[tlsProtocol=TLSv1.2] PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnTooSmallRecords PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnInvalidMagic PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorRaisesOnTooLargeRecords PASSED

org.apache.kafka.common.record.ByteBufferLogInputStreamTest > iteratorIgnoresIncompleteEntries PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseNoResponseForLeaveGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncAlwaysReceiveFencedException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > shouldUpdateConsumerGroupMetadataBeforeCallbacks[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testOnPartitionsAssignExceptionShouldBeRenderedIfNotKafkaException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testForceMetadataRefreshForPatternSubscriptionDuringRebalance[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testUnsubscribeWithValidGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRefreshOffsetNotCoordinatorForConsumer[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetFencedInstanceWithRebalancingGenearion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetMetadataTooLarge[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGenerationWithNewGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testWakeupFromAssignmentCallback[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetAsyncDisconnected[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorDisconnectAfterCoordinatorNotAvailableError[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitDynamicAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testLeaveGroupOnClose[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRebalanceAfterNotMatchingTopicUnavailableWithPatternSubscribe[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testManyInFlightAsyncCommitsWithCoordinatorDisconnect[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testRejoinGroup[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitManualAssignment[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAsyncCommitCallbacksInvokedPriorToSyncCommitCompletion[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNormalJoinGroupLeader[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetRequestAsyncWithFencedInstanceIdException[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAfterCoordinatorBackToService[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testJoinGroupInvalidGroupId[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCommitOffsetIllegalGeneration[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCoordinatorNotAvailable[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataUpdateWaitTime PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataWaitAbortedOnFatalException PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadata PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testMetadataPartialUpdate PASSED

org.apache.kafka.clients.producer.internals.ProducerMetadataTest > testTimeToNextUpdateOverwriteBackoff PASSED

org.apache.kafka.common.requests.HeartbeatRequestTest > testRequestVersionCompatibilityFailBuild PASSED

org.apache.kafka.common.requests.ProduceResponseTest > produceResponseVersionTest PASSED

org.apache.kafka.common.requests.ProduceResponseTest > produceResponseV5Test PASSED

org.apache.kafka.common.requests.ProduceResponseTest > produceResponseRecordErrorsTest PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testCloseCoordinatorNotKnownNoCommits[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testNotCoordinator[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.clients.consumer.internals.ConsumerCoordinatorTest > testAutoCommitAwaitsInterval[rebalance protocol = COOPERATIVE] PASSED

org.apache.kafka.common.utils.ShellTest > testEchoHello PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testNullChecksum PASSED

org.apache.kafka.common.utils.ShellTest > testRunProgramWithErrorReturn PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testConstructionWithRelativeOffset PASSED

org.apache.kafka.clients.producer.RecordMetadataTest > testConstructionWithMissingRelativeOffset PASSED

org.apache.kafka.common.requests.WriteTxnMarkersResponseTest > testConstructor PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowJitterMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinPeriodSecondsMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshBufferSecondsMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowFactorMinValueIsReallyMinimum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMaxValuesAreValid PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowJitterMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinPeriodSecondsMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshBufferSecondsMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshWindowFactorMaxValueIsReallyMaximum PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshDefaults PASSED

org.apache.kafka.common.config.SaslConfigsTest > testSaslLoginRefreshMinValuesAreValid PASSED

org.apache.kafka.common.utils.ShellTest > testHeadDevZero PASSED

org.apache.kafka.common.utils.ExitTest > shouldAddShutdownHookImmediately PASSED

org.apache.kafka.common.utils.ExitTest > shouldHaltImmediately PASSED

org.apache.kafka.common.utils.ShellTest > testAttemptToRunNonExistentProgram PASSED

org.apache.kafka.common.utils.ExitTest > shouldExitImmediately PASSED

org.apache.kafka.common.utils.ExitTest > shouldNotInvokeShutdownHookImmediately PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testToken PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testValidateNullExtensions PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testNoExtensionsFromByteArray PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testAuthorizationId PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testRfc7688Example PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testThrowsSaslExceptionOnInvalidExtensionKey PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testNoExtensionsFromTokenAndNullExtensions PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testBuildClientResponseToBytes PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testExtensions PASSED

org.apache.kafka.common.security.oauthbearer.internals.OAuthBearerClientInitialResponseTest > testBuildServerResponseToBytes PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithListenerNameOverride PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingOptionValue PASSED

org.apache.kafka.common.security.JaasContextTest > testSingleOption PASSED

org.apache.kafka.common.security.JaasContextTest > testNumericOptionWithoutQuotes PASSED

org.apache.kafka.common.security.JaasContextTest > testConfigNoOptions PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithWrongListenerName PASSED

org.apache.kafka.common.security.JaasContextTest > testNumericOptionWithQuotes PASSED

org.apache.kafka.common.security.JaasContextTest > testQuotedOptionValue PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingLoginModule PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingSemicolon PASSED

org.apache.kafka.common.security.JaasContextTest > testInvalidControlFlag PASSED

org.apache.kafka.common.security.JaasContextTest > testMultipleOptions PASSED

org.apache.kafka.common.security.JaasContextTest > testMultipleLoginModules PASSED

org.apache.kafka.common.security.JaasContextTest > testMissingControlFlag PASSED

org.apache.kafka.common.security.JaasContextTest > testLoadForServerWithListenerNameAndFallback PASSED

org.apache.kafka.common.security.JaasContextTest > testQuotedOptionName PASSED

org.apache.kafka.common.security.JaasContextTest > testControlFlag PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslOauthBearerMechanismWithoutServerTokens PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testLargeAssignmentWithMultipleConsumersLeavingAndRandomSubscription PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testSameSubscriptions PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testReassignmentAfterOneConsumerAdded PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testTwoConsumersOneTopicOnePartition PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=0, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=0, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=NONE] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testClientConnectionClose[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=GZIP] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=SNAPPY] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=LZ4] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonControlBatch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertV2ToV1UsingMixedCreateAndLogAppendTime[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnBuildWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingCreateTime[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidEpoch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV0[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testCompressionRateV1[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEndTxnMarkerNonTransactionalBatch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > buildUsingLogAppendTime[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalRecordSet[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalWithInvalidPID[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendedChecksumConsistency[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteIdempotentWithInvalidBaseSequence[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > convertToV1WithMixedV0AndV2Data[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteEmptyRecordSet[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testEstimatedSizeInBytes[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV0[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteControlBatchNotAllowedMagicV1[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnCloseWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldThrowIllegalStateExceptionOnAppendWhenAborted[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testBuffersDereferencedOnClose[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testSmallWriteLimit[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > shouldResetBufferToInitialPositionOnAbort[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV0[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteTransactionalNotAllowedMagicV1[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testWriteLeaderChangeControlBatchWithoutLeaderEpoch[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > writePastLimit[bufferOffset=15, compression=ZSTD] SKIPPED

org.apache.kafka.common.record.MemoryRecordsBuilderTest > testAppendAtInvalidOffset[bufferOffset=15, compression=ZSTD] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateWithDifferentPrincipal PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidLoginModule PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testLargeAssignmentAndGroupWithUniformSubscription PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.StickyAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > shouldThrowNpeWhenAddingNullHeader PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testAdd PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testNew PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testReadOnly PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testHeaders PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testLastHeader PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > shouldThrowNpeWhenAddingCollectionWithNullHeader PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testRemove PASSED

org.apache.kafka.common.header.internals.RecordHeadersTest > testAddRemoveInterleaved PASSED

org.apache.kafka.common.requests.RequestHeaderTest > parseHeaderFromBufferWithNonZeroPosition PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testSerdeControlledShutdownV0 PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testRequestHeaderV1 PASSED

org.apache.kafka.common.requests.RequestHeaderTest > testRequestHeaderV2 PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWithMissingNonOptionalExtraDataAtTheEnd PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testNulls PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testToString PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadStringSizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadCompactArraySizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testNullableDefault PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadIgnoringExtraDataAtTheEnd PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeStringSize PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWhenOptionalDataMissingAtTheEndIsTolerated PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadWhenOptionalDataMissingAtTheEndIsNotTolerated PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadArraySizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testDefault PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadZeroCompactArraySize PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeBytesSize PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testStructEquals PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadBytesSizeTooLarge PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testSimple PASSED

org.apache.kafka.common.protocol.types.ProtocolSerializationTest > testReadNegativeArraySize PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandByteBufferOnWrite PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testWriteDirectByteBuffer PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandDirectByteBufferOnWrite PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testWriteByteBuffer PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandByteBufferOnPositionIncrease PASSED

org.apache.kafka.common.utils.ByteBufferOutputStreamTest > testExpandDirectByteBufferOnPositionIncrease PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateClaimForExistenceAndType PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateExpirationTimeAndIssuedAtConsistency PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateScope PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateIssuedAt PASSED

org.apache.kafka.common.security.oauthbearer.internals.unsecured.OAuthBearerValidationUtilsTest > validateExpirationTime PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorFailureDelayTest > testDisabledSaslMechanism[failedAuthenticationDelayMs=200] PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testLargeAssignmentAndGroupWithUniformSubscription PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testOneConsumerMultipleTopics PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testOnlyAssignsPartitionsFromSubscribedTopics PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testTwoConsumersOneTopicTwoPartitions PASSED

org.apache.kafka.clients.consumer.CooperativeStickyAssignorTest > testOneConsumerNonexistentTopic PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testTokenAuthenticationOverSaslScram PASSED

org.apache.kafka.common.network.KafkaChannelTest > testReceiving PASSED

org.apache.kafka.common.network.KafkaChannelTest > testSending PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldThrowOnV0IfNotLiteral PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldRoundTripV0 PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldRoundTripV1 PASSED

org.apache.kafka.common.requests.DeleteAclsResponseTest > shouldThrowOnIfUnknown PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testForIdWithInvalidIdLow PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testForIdWithInvalidIdHigh PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testAlterIsrIsClusterAction PASSED

org.apache.kafka.common.protocol.ApiKeysTest > testResponseThrottleTime PASSED

org.apache.kafka.common.utils.AppInfoParserTest > testUnregisterAppInfoUnregistersMetrics PASSED

org.apache.kafka.common.utils.AppInfoParserTest > testRegisterAppInfoRegistersMetrics PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderKey PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerde PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerdeInvalidHeaderCountTooLow PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderValue PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidVarlong PASSED

org.apache.kafka.common.record.DefaultRecordTest > testNullHeaderKey PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidNumHeadersPartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidKeySizePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testBasicSerdeInvalidHeaderCountTooHigh PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderKeyPartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidHeaderValuePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidValueSizePartial PASSED

org.apache.kafka.common.record.DefaultRecordTest > testUnderflowReadingVarlong PASSED

org.apache.kafka.common.record.DefaultRecordTest > testUnderflowReadingTimestamp PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidValueSize PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidNumHeaders PASSED

org.apache.kafka.common.record.DefaultRecordTest > testInvalidKeySize PASSED

org.apache.kafka.common.record.DefaultRecordTest > testSerdeNoSequence PASSED

org.apache.kafka.common.record.DefaultRecordTest > testNullHeaderKeyPartial PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientExceptionDoesNotContainSensitiveData PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslScramSha256 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidApiVersionsRequest PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientLoginCallbackOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInsufficientScopeSaslOauthBearerMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testDisabledMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion0 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverPlaintextHandshakeVersion1 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testPacketSizeTooBig PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerLoginCallbackOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextClientWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramPlaintextClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidUsernameSaslPlain PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUserCredentialsUnavailableForScramMechanism PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion0 PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnauthenticatedApiVersionsRequestOverSslHandshakeVersion1 PASSED
org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=false] failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=false].test.stdout

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=false] FAILED
    org.opentest4j.AssertionFailedError: Condition not met within timeout 15000. Metric not updated failed-authentication-total expected:<1.0> but was:<0.0> ==> expected: <true> but was: <false>
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
        at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
        at org.apache.kafka.test.TestUtils.lambda$waitForCondition$3(TestUtils.java:302)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:350)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:318)
        at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:299)
        at org.apache.kafka.common.network.NioEchoServer.waitForMetrics(NioEchoServer.java:193)
        at org.apache.kafka.common.network.NioEchoServer.verifyAuthenticationMetrics(NioEchoServer.java:152)
        at org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion(SslTransportLayerTest.java:613)

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testMultipleServerMechanisms PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testRepeatedValidSaslPlainOverSsl PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslPlainOverPlaintext PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testValidSaslPlainOverSsl PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidApiVersionsRequestSequence PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testSaslUnsupportedClientVersions PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateAgainFasterThanOneSecond PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testDisallowedKafkaRequestsBeforeAuthentication PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientLoginOverride PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testClientDynamicJaasConfiguration PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.network.SslSelectorTest > testLargeMessageSequence PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testForBrokenSaslHandshakeVersionBump PASSED

org.apache.kafka.common.network.SslSelectorTest > testLowestPriorityChannel PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerAuthenticateCallbackHandler PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectDisconnectDuringInSinglePoll PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidPasswordSaslPlain PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectException PASSED

org.apache.kafka.common.network.SslSelectorTest > registerFailure PASSED

org.apache.kafka.common.network.SslSelectorTest > testMute PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseAllChannels PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidPasswordSaslScram PASSED

org.apache.kafka.common.network.SslSelectorTest > testExpireConnectionWithPendingReceives PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testApiVersionsRequestWithServerUnsupportedVersion PASSED

org.apache.kafka.common.network.SslSelectorTest > testCantSendWithInProgress PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainSslServerWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCorrelationId PASSED

org.apache.kafka.common.network.SslSelectorTest > testOutboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testServerDynamicJaasConfiguration PASSED

org.apache.kafka.common.network.SslSelectorTest > testImmediatelyConnectedCleaned PASSED

org.apache.kafka.common.network.SslSelectorTest > testExistingConnectionId PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseOldestConnection PASSED

org.apache.kafka.common.network.SslSelectorTest > testServerDisconnect PASSED

org.apache.kafka.common.network.SslSelectorTest > testMetricsCleanupOnSelectorClose PASSED

org.apache.kafka.common.network.SslSelectorTest > testPartialSendAndReceiveReflectedInMetrics PASSED

org.apache.kafka.common.network.SslSelectorTest > testWriteCompletesSendWithNoBytesWritten PASSED

org.apache.kafka.common.network.SslSelectorTest > testIdleExpiryWithoutReadyKeys PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectionsByClientMetric PASSED

org.apache.kafka.common.network.SslSelectorTest > testInboundConnectionsCountInConnectionCreationMetric PASSED

org.apache.kafka.common.network.SslSelectorTest > testNoRouteToHost PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testTokenReauthenticationOverSaslScram PASSED

org.apache.kafka.common.network.SslSelectorTest > testClearCompletedSendsAndReceives PASSED

org.apache.kafka.common.network.SslSelectorTest > testPartialReceiveGracefulClose PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testInvalidSaslPacket PASSED

org.apache.kafka.common.network.SslSelectorTest > testNormalOperation PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testSaslHandshakeRequestWithUnsupportedVersion PASSED

org.apache.kafka.common.network.SslSelectorTest > testSendWithoutConnecting PASSED

org.apache.kafka.common.network.SslSelectorTest > testMuteOnOOM PASSED

org.apache.kafka.common.network.SslSelectorTest > testCloseOldestConnectionWithMultiplePendingReceives PASSED

org.apache.kafka.common.network.SslSelectorTest > testExpireClosedConnectionWithPendingReceives PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testCannotReauthenticateWithDifferentMechanism PASSED

org.apache.kafka.common.network.SslSelectorTest > testConnectionRefused PASSED

org.apache.kafka.common.network.SslSelectorTest > testChannelCloseWhileProcessingReceives PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testJaasConfigurationForListener PASSED

org.apache.kafka.common.network.SslSelectorTest > testEmptyRequest PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldCreateApiResponseThatHasAllApiKeysSupportedByBroker PASSED

org.apache.kafka.common.requests.ApiVersionsResponseTest > shouldHaveCorrectDefaultApiVersionsResponse PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testHistogram PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testConstantBinScheme PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testLinearBinScheme PASSED

org.apache.kafka.common.metrics.stats.HistogramTest > testConstantBinSchemeWithPositiveRange PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testCode PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testName PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testExhaustive PASSED

org.apache.kafka.common.resource.ResourceTypeTest > testIsUnknown PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testCompressedIterationWithNullValue PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testCompressedIterationWithEmptyRecords PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testIsValidWithChecksumMismatch PASSED

org.apache.kafka.common.record.SimpleLegacyRecordTest > testIsValidWithTooSmallBuffer PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslPlainPlaintextClientWithoutSaslAuthenticateHeaderFailure PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > testUnknownUserSaslScram PASSED

org.apache.kafka.common.security.authenticator.SaslAuthenticatorTest > oldSaslScramSslServerWithoutSaslAuthenticateHeader PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeystorePassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomClientSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidEndpointIdentification[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationDisabled[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFilesWithoutServerKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNullTruststorePassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testECKeyPair[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testSelectorPollReadSize[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetReadBufferResize[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetWriteBufferResize[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomServerSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidTruststorePassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerRequestMetrics[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED
org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=false] failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=false].test.stdout

org.apache.kafka.common.network.SslTransportLayerTest > testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=false] FAILED
    org.opentest4j.AssertionFailedError: Condition not met within timeout 15000. Metric not updated failed-authentication-total expected:<1.0> but was:<0.0> ==> expected: <true> but was: <false>
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
        at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
        at org.apache.kafka.test.TestUtils.lambda$waitForCondition$3(TestUtils.java:302)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:350)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:318)
        at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:299)
        at org.apache.kafka.common.network.NioEchoServer.waitForMetrics(NioEchoServer.java:193)
        at org.apache.kafka.common.network.NioEchoServer.verifyAuthenticationMetrics(NioEchoServer.java:152)
        at org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults(SslTransportLayerTest.java:586)

org.apache.kafka.common.network.SslTransportLayerTest > testApplicationBufferResize[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClosePlaintext[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFiles[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCloseSsl[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testDsaKeyPair[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFilesWithoutClientKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerKeystoreDynamicUpdateWithNewSubjectAltName[tlsProtocol=TLSv1.2, useInlinePem=false] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomClientAndServerSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testListenerConfigOverride[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationCN[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetworkThreadTimeRecorded[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedValidProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientEndpointNotValidated[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedCiphers[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED
org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=true] failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=true].test.stdout

org.apache.kafka.common.network.SslTransportLayerTest > testUnsupportedTLSVersion[tlsProtocol=TLSv1.2, useInlinePem=true] FAILED
    org.opentest4j.AssertionFailedError: Condition not met within timeout 15000. Metric not updated failed-authentication-total expected:<1.0> but was:<0.0> ==> expected: <true> but was: <false>
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
        at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
        at org.apache.kafka.test.TestUtils.lambda$waitForCondition$3(TestUtils.java:302)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:350)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:318)
        at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:299)
        at org.apache.kafka.common.network.NioEchoServer.waitForMetrics(NioEchoServer.java:193)
        at org.apache.kafka.common.network.NioEchoServer.verifyAuthenticationMetrics(NioEchoServer.java:152)
        at org.apache.kafka.common.network.SslTransportLayerTest.testUnsupportedTLSVersion(SslTransportLayerTest.java:613)

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredNotProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequestedNotProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testIOExceptionsDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeystorePassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledNotProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomClientSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanDns[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationNoReverseLookup[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeWrite[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testGracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidSecureRandomImplementation[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidEndpointIdentification[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testValidEndpointIdentificationSanIp[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testEndpointIdentificationDisabled[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidation[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerTruststoreDynamicUpdate[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFilesWithoutServerKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNullTruststorePassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testECKeyPair[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testUngracefulRemoteCloseDuringHandshakeRead[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredUntrustedProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationDisabledUntrustedProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testSelectorPollReadSize[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetReadBufferResize[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testNetWriteBufferResize[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCustomServerSslEngineFactory[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidTruststorePassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerRequestMetrics[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPeerNotifiedOfHandshakeFailure[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED
org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=true] failed, log available in /users/miaoyu/kafka/clients/build/reports/testOutput/org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=true].test.stdout

org.apache.kafka.common.network.SslTransportLayerTest > testTlsDefaults[tlsProtocol=TLSv1.2, useInlinePem=true] FAILED
    org.opentest4j.AssertionFailedError: Condition not met within timeout 15000. Metric not updated failed-authentication-total expected:<1.0> but was:<0.0> ==> expected: <true> but was: <false>
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
        at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
        at org.apache.kafka.test.TestUtils.lambda$waitForCondition$3(TestUtils.java:302)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:350)
        at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:318)
        at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:299)
        at org.apache.kafka.common.network.NioEchoServer.waitForMetrics(NioEchoServer.java:193)
        at org.apache.kafka.common.network.NioEchoServer.verifyAuthenticationMetrics(NioEchoServer.java:152)
        at org.apache.kafka.common.network.SslTransportLayerTest.testTlsDefaults(SslTransportLayerTest.java:586)

org.apache.kafka.common.network.SslTransportLayerTest > testApplicationBufferResize[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClosePlaintext[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFiles[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerKeystoreDynamicUpdate[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testClientAuthenticationRequiredValidProvided[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInvalidKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testCloseSsl[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testDsaKeyPair[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testInterBrokerSslConfigValidationFailure[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testPemFilesWithoutClientKeyPassword[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.network.SslTransportLayerTest > testServerKeystoreDynamicUpdateWithNewSubjectAltName[tlsProtocol=TLSv1.2, useInlinePem=true] PASSED

org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest > testConstructorWithErrorResponse PASSED

org.apache.kafka.common.requests.AddPartitionsToTxnResponseTest > testParse PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testSetAttribute PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testSetAttributes PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttribute PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributeUnknown PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testInvoke PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributesWithUnknown PASSED

org.apache.kafka.common.metrics.KafkaMbeanTest > testGetAttributes PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > noAuthorizationIdSpecified PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > authorizatonIdEqualsAuthenticationId PASSED

org.apache.kafka.common.security.scram.internals.ScramSaslServerTest > authorizatonIdNotEqualsAuthenticationId PASSED

org.apache.kafka.common.record.ControlRecordUtilsTest > testDeserializeByteData PASSED

org.apache.kafka.common.record.ControlRecordUtilsTest > testInvalidControlRecordType PASSED

> Task :clients:test FAILED

Deprecated Gradle features were used in this build, making it incompatible with Gradle 7.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/6.7.1/userguide/command_line_interface.html#sec:command_line_warnings
22 actionable tasks: 19 executed, 3 up-to-date
